
ELC_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ncrsection   00000004  20004c00  20004c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   0000010c  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000064d8  08002110  08002110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  080085e8  080085e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080086d0  080086d0  00008c04  2**0
                  CONTENTS
  5 .ARM          00000000  080086d0  080086d0  00008c04  2**0
                  CONTENTS
  6 .preinit_array 00000000  080086d0  080086d0  00008c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080086d0  080086d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080086d4  080086d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000074  20000000  080086d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004688  20000078  0800874c  00008078  2**3
                  ALLOC
 11 ._user_heap_stack 00000200  20004700  0800874c  00008700  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00008c04  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264a2  00000000  00000000  00008c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000635a  00000000  00000000  0002f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000b828  00000000  00000000  00035429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001720  00000000  00000000  00040c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001760  00000000  00000000  00042378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c16f  00000000  00000000  00043ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002541e  00000000  00000000  0005fc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009ba6d  00000000  00000000  00085065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00120ad2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003de8  00000000  00000000  00120b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00124900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08002110 <__do_global_dtors_aux>:
 8002110:	b510      	push	{r4, lr}
 8002112:	4c05      	ldr	r4, [pc, #20]	@ (8002128 <__do_global_dtors_aux+0x18>)
 8002114:	7823      	ldrb	r3, [r4, #0]
 8002116:	b933      	cbnz	r3, 8002126 <__do_global_dtors_aux+0x16>
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__do_global_dtors_aux+0x1c>)
 800211a:	b113      	cbz	r3, 8002122 <__do_global_dtors_aux+0x12>
 800211c:	4804      	ldr	r0, [pc, #16]	@ (8002130 <__do_global_dtors_aux+0x20>)
 800211e:	f3af 8000 	nop.w
 8002122:	2301      	movs	r3, #1
 8002124:	7023      	strb	r3, [r4, #0]
 8002126:	bd10      	pop	{r4, pc}
 8002128:	20000078 	.word	0x20000078
 800212c:	00000000 	.word	0x00000000
 8002130:	080085d0 	.word	0x080085d0

08002134 <frame_dummy>:
 8002134:	b508      	push	{r3, lr}
 8002136:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <frame_dummy+0x10>)
 8002138:	b11b      	cbz	r3, 8002142 <frame_dummy+0xe>
 800213a:	4903      	ldr	r1, [pc, #12]	@ (8002148 <frame_dummy+0x14>)
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <frame_dummy+0x18>)
 800213e:	f3af 8000 	nop.w
 8002142:	bd08      	pop	{r3, pc}
 8002144:	00000000 	.word	0x00000000
 8002148:	2000007c 	.word	0x2000007c
 800214c:	080085d0 	.word	0x080085d0

08002150 <__aeabi_frsub>:
 8002150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8002154:	e002      	b.n	800215c <__addsf3>
 8002156:	bf00      	nop

08002158 <__aeabi_fsub>:
 8002158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800215c <__addsf3>:
 800215c:	0042      	lsls	r2, r0, #1
 800215e:	bf1f      	itttt	ne
 8002160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002164:	ea92 0f03 	teqne	r2, r3
 8002168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800216c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002170:	d06a      	beq.n	8002248 <__addsf3+0xec>
 8002172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800217a:	bfc1      	itttt	gt
 800217c:	18d2      	addgt	r2, r2, r3
 800217e:	4041      	eorgt	r1, r0
 8002180:	4048      	eorgt	r0, r1
 8002182:	4041      	eorgt	r1, r0
 8002184:	bfb8      	it	lt
 8002186:	425b      	neglt	r3, r3
 8002188:	2b19      	cmp	r3, #25
 800218a:	bf88      	it	hi
 800218c:	4770      	bxhi	lr
 800218e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8002192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800219a:	bf18      	it	ne
 800219c:	4240      	negne	r0, r0
 800219e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80021a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80021a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80021aa:	bf18      	it	ne
 80021ac:	4249      	negne	r1, r1
 80021ae:	ea92 0f03 	teq	r2, r3
 80021b2:	d03f      	beq.n	8002234 <__addsf3+0xd8>
 80021b4:	f1a2 0201 	sub.w	r2, r2, #1
 80021b8:	fa41 fc03 	asr.w	ip, r1, r3
 80021bc:	eb10 000c 	adds.w	r0, r0, ip
 80021c0:	f1c3 0320 	rsb	r3, r3, #32
 80021c4:	fa01 f103 	lsl.w	r1, r1, r3
 80021c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80021cc:	d502      	bpl.n	80021d4 <__addsf3+0x78>
 80021ce:	4249      	negs	r1, r1
 80021d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80021d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80021d8:	d313      	bcc.n	8002202 <__addsf3+0xa6>
 80021da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80021de:	d306      	bcc.n	80021ee <__addsf3+0x92>
 80021e0:	0840      	lsrs	r0, r0, #1
 80021e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80021e6:	f102 0201 	add.w	r2, r2, #1
 80021ea:	2afe      	cmp	r2, #254	@ 0xfe
 80021ec:	d251      	bcs.n	8002292 <__addsf3+0x136>
 80021ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80021f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80021f6:	bf08      	it	eq
 80021f8:	f020 0001 	biceq.w	r0, r0, #1
 80021fc:	ea40 0003 	orr.w	r0, r0, r3
 8002200:	4770      	bx	lr
 8002202:	0049      	lsls	r1, r1, #1
 8002204:	eb40 0000 	adc.w	r0, r0, r0
 8002208:	3a01      	subs	r2, #1
 800220a:	bf28      	it	cs
 800220c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8002210:	d2ed      	bcs.n	80021ee <__addsf3+0x92>
 8002212:	fab0 fc80 	clz	ip, r0
 8002216:	f1ac 0c08 	sub.w	ip, ip, #8
 800221a:	ebb2 020c 	subs.w	r2, r2, ip
 800221e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002222:	bfaa      	itet	ge
 8002224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002228:	4252      	neglt	r2, r2
 800222a:	4318      	orrge	r0, r3
 800222c:	bfbc      	itt	lt
 800222e:	40d0      	lsrlt	r0, r2
 8002230:	4318      	orrlt	r0, r3
 8002232:	4770      	bx	lr
 8002234:	f092 0f00 	teq	r2, #0
 8002238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800223c:	bf06      	itte	eq
 800223e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8002242:	3201      	addeq	r2, #1
 8002244:	3b01      	subne	r3, #1
 8002246:	e7b5      	b.n	80021b4 <__addsf3+0x58>
 8002248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800224c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002250:	bf18      	it	ne
 8002252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002256:	d021      	beq.n	800229c <__addsf3+0x140>
 8002258:	ea92 0f03 	teq	r2, r3
 800225c:	d004      	beq.n	8002268 <__addsf3+0x10c>
 800225e:	f092 0f00 	teq	r2, #0
 8002262:	bf08      	it	eq
 8002264:	4608      	moveq	r0, r1
 8002266:	4770      	bx	lr
 8002268:	ea90 0f01 	teq	r0, r1
 800226c:	bf1c      	itt	ne
 800226e:	2000      	movne	r0, #0
 8002270:	4770      	bxne	lr
 8002272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8002276:	d104      	bne.n	8002282 <__addsf3+0x126>
 8002278:	0040      	lsls	r0, r0, #1
 800227a:	bf28      	it	cs
 800227c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8002280:	4770      	bx	lr
 8002282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8002286:	bf3c      	itt	cc
 8002288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800228c:	4770      	bxcc	lr
 800228e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8002292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8002296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800229a:	4770      	bx	lr
 800229c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80022a0:	bf16      	itet	ne
 80022a2:	4608      	movne	r0, r1
 80022a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80022a8:	4601      	movne	r1, r0
 80022aa:	0242      	lsls	r2, r0, #9
 80022ac:	bf06      	itte	eq
 80022ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80022b2:	ea90 0f01 	teqeq	r0, r1
 80022b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80022ba:	4770      	bx	lr

080022bc <__aeabi_ui2f>:
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e004      	b.n	80022cc <__aeabi_i2f+0x8>
 80022c2:	bf00      	nop

080022c4 <__aeabi_i2f>:
 80022c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80022c8:	bf48      	it	mi
 80022ca:	4240      	negmi	r0, r0
 80022cc:	ea5f 0c00 	movs.w	ip, r0
 80022d0:	bf08      	it	eq
 80022d2:	4770      	bxeq	lr
 80022d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80022d8:	4601      	mov	r1, r0
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	e01c      	b.n	800231a <__aeabi_l2f+0x2a>

080022e0 <__aeabi_ul2f>:
 80022e0:	ea50 0201 	orrs.w	r2, r0, r1
 80022e4:	bf08      	it	eq
 80022e6:	4770      	bxeq	lr
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e00a      	b.n	8002304 <__aeabi_l2f+0x14>
 80022ee:	bf00      	nop

080022f0 <__aeabi_l2f>:
 80022f0:	ea50 0201 	orrs.w	r2, r0, r1
 80022f4:	bf08      	it	eq
 80022f6:	4770      	bxeq	lr
 80022f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80022fc:	d502      	bpl.n	8002304 <__aeabi_l2f+0x14>
 80022fe:	4240      	negs	r0, r0
 8002300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002304:	ea5f 0c01 	movs.w	ip, r1
 8002308:	bf02      	ittt	eq
 800230a:	4684      	moveq	ip, r0
 800230c:	4601      	moveq	r1, r0
 800230e:	2000      	moveq	r0, #0
 8002310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8002314:	bf08      	it	eq
 8002316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800231a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800231e:	fabc f28c 	clz	r2, ip
 8002322:	3a08      	subs	r2, #8
 8002324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002328:	db10      	blt.n	800234c <__aeabi_l2f+0x5c>
 800232a:	fa01 fc02 	lsl.w	ip, r1, r2
 800232e:	4463      	add	r3, ip
 8002330:	fa00 fc02 	lsl.w	ip, r0, r2
 8002334:	f1c2 0220 	rsb	r2, r2, #32
 8002338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800233c:	fa20 f202 	lsr.w	r2, r0, r2
 8002340:	eb43 0002 	adc.w	r0, r3, r2
 8002344:	bf08      	it	eq
 8002346:	f020 0001 	biceq.w	r0, r0, #1
 800234a:	4770      	bx	lr
 800234c:	f102 0220 	add.w	r2, r2, #32
 8002350:	fa01 fc02 	lsl.w	ip, r1, r2
 8002354:	f1c2 0220 	rsb	r2, r2, #32
 8002358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800235c:	fa21 f202 	lsr.w	r2, r1, r2
 8002360:	eb43 0002 	adc.w	r0, r3, r2
 8002364:	bf08      	it	eq
 8002366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800236a:	4770      	bx	lr

0800236c <__aeabi_fmul>:
 800236c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002374:	bf1e      	ittt	ne
 8002376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800237a:	ea92 0f0c 	teqne	r2, ip
 800237e:	ea93 0f0c 	teqne	r3, ip
 8002382:	d06f      	beq.n	8002464 <__aeabi_fmul+0xf8>
 8002384:	441a      	add	r2, r3
 8002386:	ea80 0c01 	eor.w	ip, r0, r1
 800238a:	0240      	lsls	r0, r0, #9
 800238c:	bf18      	it	ne
 800238e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8002392:	d01e      	beq.n	80023d2 <__aeabi_fmul+0x66>
 8002394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800239c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80023a0:	fba0 3101 	umull	r3, r1, r0, r1
 80023a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80023a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80023ac:	bf3e      	ittt	cc
 80023ae:	0049      	lslcc	r1, r1, #1
 80023b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80023b4:	005b      	lslcc	r3, r3, #1
 80023b6:	ea40 0001 	orr.w	r0, r0, r1
 80023ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80023be:	2afd      	cmp	r2, #253	@ 0xfd
 80023c0:	d81d      	bhi.n	80023fe <__aeabi_fmul+0x92>
 80023c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80023ca:	bf08      	it	eq
 80023cc:	f020 0001 	biceq.w	r0, r0, #1
 80023d0:	4770      	bx	lr
 80023d2:	f090 0f00 	teq	r0, #0
 80023d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80023da:	bf08      	it	eq
 80023dc:	0249      	lsleq	r1, r1, #9
 80023de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80023e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80023e6:	3a7f      	subs	r2, #127	@ 0x7f
 80023e8:	bfc2      	ittt	gt
 80023ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80023ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80023f2:	4770      	bxgt	lr
 80023f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	3a01      	subs	r2, #1
 80023fe:	dc5d      	bgt.n	80024bc <__aeabi_fmul+0x150>
 8002400:	f112 0f19 	cmn.w	r2, #25
 8002404:	bfdc      	itt	le
 8002406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800240a:	4770      	bxle	lr
 800240c:	f1c2 0200 	rsb	r2, r2, #0
 8002410:	0041      	lsls	r1, r0, #1
 8002412:	fa21 f102 	lsr.w	r1, r1, r2
 8002416:	f1c2 0220 	rsb	r2, r2, #32
 800241a:	fa00 fc02 	lsl.w	ip, r0, r2
 800241e:	ea5f 0031 	movs.w	r0, r1, rrx
 8002422:	f140 0000 	adc.w	r0, r0, #0
 8002426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800242a:	bf08      	it	eq
 800242c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002430:	4770      	bx	lr
 8002432:	f092 0f00 	teq	r2, #0
 8002436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800243a:	bf02      	ittt	eq
 800243c:	0040      	lsleq	r0, r0, #1
 800243e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8002442:	3a01      	subeq	r2, #1
 8002444:	d0f9      	beq.n	800243a <__aeabi_fmul+0xce>
 8002446:	ea40 000c 	orr.w	r0, r0, ip
 800244a:	f093 0f00 	teq	r3, #0
 800244e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8002452:	bf02      	ittt	eq
 8002454:	0049      	lsleq	r1, r1, #1
 8002456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800245a:	3b01      	subeq	r3, #1
 800245c:	d0f9      	beq.n	8002452 <__aeabi_fmul+0xe6>
 800245e:	ea41 010c 	orr.w	r1, r1, ip
 8002462:	e78f      	b.n	8002384 <__aeabi_fmul+0x18>
 8002464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002468:	ea92 0f0c 	teq	r2, ip
 800246c:	bf18      	it	ne
 800246e:	ea93 0f0c 	teqne	r3, ip
 8002472:	d00a      	beq.n	800248a <__aeabi_fmul+0x11e>
 8002474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8002478:	bf18      	it	ne
 800247a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800247e:	d1d8      	bne.n	8002432 <__aeabi_fmul+0xc6>
 8002480:	ea80 0001 	eor.w	r0, r0, r1
 8002484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8002488:	4770      	bx	lr
 800248a:	f090 0f00 	teq	r0, #0
 800248e:	bf17      	itett	ne
 8002490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8002494:	4608      	moveq	r0, r1
 8002496:	f091 0f00 	teqne	r1, #0
 800249a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800249e:	d014      	beq.n	80024ca <__aeabi_fmul+0x15e>
 80024a0:	ea92 0f0c 	teq	r2, ip
 80024a4:	d101      	bne.n	80024aa <__aeabi_fmul+0x13e>
 80024a6:	0242      	lsls	r2, r0, #9
 80024a8:	d10f      	bne.n	80024ca <__aeabi_fmul+0x15e>
 80024aa:	ea93 0f0c 	teq	r3, ip
 80024ae:	d103      	bne.n	80024b8 <__aeabi_fmul+0x14c>
 80024b0:	024b      	lsls	r3, r1, #9
 80024b2:	bf18      	it	ne
 80024b4:	4608      	movne	r0, r1
 80024b6:	d108      	bne.n	80024ca <__aeabi_fmul+0x15e>
 80024b8:	ea80 0001 	eor.w	r0, r0, r1
 80024bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80024c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80024c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80024c8:	4770      	bx	lr
 80024ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80024ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80024d2:	4770      	bx	lr

080024d4 <__aeabi_fdiv>:
 80024d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80024d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80024dc:	bf1e      	ittt	ne
 80024de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80024e2:	ea92 0f0c 	teqne	r2, ip
 80024e6:	ea93 0f0c 	teqne	r3, ip
 80024ea:	d069      	beq.n	80025c0 <__aeabi_fdiv+0xec>
 80024ec:	eba2 0203 	sub.w	r2, r2, r3
 80024f0:	ea80 0c01 	eor.w	ip, r0, r1
 80024f4:	0249      	lsls	r1, r1, #9
 80024f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80024fa:	d037      	beq.n	800256c <__aeabi_fdiv+0x98>
 80024fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8002504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800250c:	428b      	cmp	r3, r1
 800250e:	bf38      	it	cc
 8002510:	005b      	lslcc	r3, r3, #1
 8002512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8002516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800251a:	428b      	cmp	r3, r1
 800251c:	bf24      	itt	cs
 800251e:	1a5b      	subcs	r3, r3, r1
 8002520:	ea40 000c 	orrcs.w	r0, r0, ip
 8002524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8002528:	bf24      	itt	cs
 800252a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800252e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8002536:	bf24      	itt	cs
 8002538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800253c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8002544:	bf24      	itt	cs
 8002546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800254a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	bf18      	it	ne
 8002552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8002556:	d1e0      	bne.n	800251a <__aeabi_fdiv+0x46>
 8002558:	2afd      	cmp	r2, #253	@ 0xfd
 800255a:	f63f af50 	bhi.w	80023fe <__aeabi_fmul+0x92>
 800255e:	428b      	cmp	r3, r1
 8002560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002564:	bf08      	it	eq
 8002566:	f020 0001 	biceq.w	r0, r0, #1
 800256a:	4770      	bx	lr
 800256c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8002570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002574:	327f      	adds	r2, #127	@ 0x7f
 8002576:	bfc2      	ittt	gt
 8002578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800257c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002580:	4770      	bxgt	lr
 8002582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	3a01      	subs	r2, #1
 800258c:	e737      	b.n	80023fe <__aeabi_fmul+0x92>
 800258e:	f092 0f00 	teq	r2, #0
 8002592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8002596:	bf02      	ittt	eq
 8002598:	0040      	lsleq	r0, r0, #1
 800259a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800259e:	3a01      	subeq	r2, #1
 80025a0:	d0f9      	beq.n	8002596 <__aeabi_fdiv+0xc2>
 80025a2:	ea40 000c 	orr.w	r0, r0, ip
 80025a6:	f093 0f00 	teq	r3, #0
 80025aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80025ae:	bf02      	ittt	eq
 80025b0:	0049      	lsleq	r1, r1, #1
 80025b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80025b6:	3b01      	subeq	r3, #1
 80025b8:	d0f9      	beq.n	80025ae <__aeabi_fdiv+0xda>
 80025ba:	ea41 010c 	orr.w	r1, r1, ip
 80025be:	e795      	b.n	80024ec <__aeabi_fdiv+0x18>
 80025c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80025c4:	ea92 0f0c 	teq	r2, ip
 80025c8:	d108      	bne.n	80025dc <__aeabi_fdiv+0x108>
 80025ca:	0242      	lsls	r2, r0, #9
 80025cc:	f47f af7d 	bne.w	80024ca <__aeabi_fmul+0x15e>
 80025d0:	ea93 0f0c 	teq	r3, ip
 80025d4:	f47f af70 	bne.w	80024b8 <__aeabi_fmul+0x14c>
 80025d8:	4608      	mov	r0, r1
 80025da:	e776      	b.n	80024ca <__aeabi_fmul+0x15e>
 80025dc:	ea93 0f0c 	teq	r3, ip
 80025e0:	d104      	bne.n	80025ec <__aeabi_fdiv+0x118>
 80025e2:	024b      	lsls	r3, r1, #9
 80025e4:	f43f af4c 	beq.w	8002480 <__aeabi_fmul+0x114>
 80025e8:	4608      	mov	r0, r1
 80025ea:	e76e      	b.n	80024ca <__aeabi_fmul+0x15e>
 80025ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80025f0:	bf18      	it	ne
 80025f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80025f6:	d1ca      	bne.n	800258e <__aeabi_fdiv+0xba>
 80025f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80025fc:	f47f af5c 	bne.w	80024b8 <__aeabi_fmul+0x14c>
 8002600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8002604:	f47f af3c 	bne.w	8002480 <__aeabi_fmul+0x114>
 8002608:	e75f      	b.n	80024ca <__aeabi_fmul+0x15e>
 800260a:	bf00      	nop

0800260c <__gesf2>:
 800260c:	f04f 3cff 	mov.w	ip, #4294967295
 8002610:	e006      	b.n	8002620 <__cmpsf2+0x4>
 8002612:	bf00      	nop

08002614 <__lesf2>:
 8002614:	f04f 0c01 	mov.w	ip, #1
 8002618:	e002      	b.n	8002620 <__cmpsf2+0x4>
 800261a:	bf00      	nop

0800261c <__cmpsf2>:
 800261c:	f04f 0c01 	mov.w	ip, #1
 8002620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800262c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002630:	bf18      	it	ne
 8002632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002636:	d011      	beq.n	800265c <__cmpsf2+0x40>
 8002638:	b001      	add	sp, #4
 800263a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800263e:	bf18      	it	ne
 8002640:	ea90 0f01 	teqne	r0, r1
 8002644:	bf58      	it	pl
 8002646:	ebb2 0003 	subspl.w	r0, r2, r3
 800264a:	bf88      	it	hi
 800264c:	17c8      	asrhi	r0, r1, #31
 800264e:	bf38      	it	cc
 8002650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8002654:	bf18      	it	ne
 8002656:	f040 0001 	orrne.w	r0, r0, #1
 800265a:	4770      	bx	lr
 800265c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002660:	d102      	bne.n	8002668 <__cmpsf2+0x4c>
 8002662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8002666:	d105      	bne.n	8002674 <__cmpsf2+0x58>
 8002668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800266c:	d1e4      	bne.n	8002638 <__cmpsf2+0x1c>
 800266e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8002672:	d0e1      	beq.n	8002638 <__cmpsf2+0x1c>
 8002674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <__aeabi_cfrcmple>:
 800267c:	4684      	mov	ip, r0
 800267e:	4608      	mov	r0, r1
 8002680:	4661      	mov	r1, ip
 8002682:	e7ff      	b.n	8002684 <__aeabi_cfcmpeq>

08002684 <__aeabi_cfcmpeq>:
 8002684:	b50f      	push	{r0, r1, r2, r3, lr}
 8002686:	f7ff ffc9 	bl	800261c <__cmpsf2>
 800268a:	2800      	cmp	r0, #0
 800268c:	bf48      	it	mi
 800268e:	f110 0f00 	cmnmi.w	r0, #0
 8002692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002694 <__aeabi_fcmpeq>:
 8002694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002698:	f7ff fff4 	bl	8002684 <__aeabi_cfcmpeq>
 800269c:	bf0c      	ite	eq
 800269e:	2001      	moveq	r0, #1
 80026a0:	2000      	movne	r0, #0
 80026a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80026a6:	bf00      	nop

080026a8 <__aeabi_fcmplt>:
 80026a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80026ac:	f7ff ffea 	bl	8002684 <__aeabi_cfcmpeq>
 80026b0:	bf34      	ite	cc
 80026b2:	2001      	movcc	r0, #1
 80026b4:	2000      	movcs	r0, #0
 80026b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80026ba:	bf00      	nop

080026bc <__aeabi_fcmple>:
 80026bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80026c0:	f7ff ffe0 	bl	8002684 <__aeabi_cfcmpeq>
 80026c4:	bf94      	ite	ls
 80026c6:	2001      	movls	r0, #1
 80026c8:	2000      	movhi	r0, #0
 80026ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80026ce:	bf00      	nop

080026d0 <__aeabi_fcmpge>:
 80026d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80026d4:	f7ff ffd2 	bl	800267c <__aeabi_cfrcmple>
 80026d8:	bf94      	ite	ls
 80026da:	2001      	movls	r0, #1
 80026dc:	2000      	movhi	r0, #0
 80026de:	f85d fb08 	ldr.w	pc, [sp], #8
 80026e2:	bf00      	nop

080026e4 <__aeabi_fcmpgt>:
 80026e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80026e8:	f7ff ffc8 	bl	800267c <__aeabi_cfrcmple>
 80026ec:	bf34      	ite	cc
 80026ee:	2001      	movcc	r0, #1
 80026f0:	2000      	movcs	r0, #0
 80026f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80026f6:	bf00      	nop

080026f8 <__aeabi_f2uiz>:
 80026f8:	0042      	lsls	r2, r0, #1
 80026fa:	d20e      	bcs.n	800271a <__aeabi_f2uiz+0x22>
 80026fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8002700:	d30b      	bcc.n	800271a <__aeabi_f2uiz+0x22>
 8002702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8002706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800270a:	d409      	bmi.n	8002720 <__aeabi_f2uiz+0x28>
 800270c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002714:	fa23 f002 	lsr.w	r0, r3, r2
 8002718:	4770      	bx	lr
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	4770      	bx	lr
 8002720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8002724:	d101      	bne.n	800272a <__aeabi_f2uiz+0x32>
 8002726:	0242      	lsls	r2, r0, #9
 8002728:	d102      	bne.n	8002730 <__aeabi_f2uiz+0x38>
 800272a:	f04f 30ff 	mov.w	r0, #4294967295
 800272e:	4770      	bx	lr
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <SMon_I2TAccumulation>:
void SMon_LoadSwitchingLogic(void);
void SMon_LoadSwitchingDiagnosis(void);
void SMon_main(void);

void SMon_I2TAccumulation(void)
{
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(1u == SMon_CmdStat)
 800273c:	4b3e      	ldr	r3, [pc, #248]	@ (8002838 <SMon_I2TAccumulation+0x100>)
 800273e:	4e3f      	ldr	r6, [pc, #252]	@ (800283c <SMon_I2TAccumulation+0x104>)
 8002740:	781f      	ldrb	r7, [r3, #0]
 8002742:	2f01      	cmp	r7, #1
 8002744:	d10e      	bne.n	8002764 <SMon_I2TAccumulation+0x2c>
	{
		if(20u > localI2tAvgCounter)
 8002746:	4d3e      	ldr	r5, [pc, #248]	@ (8002840 <SMon_I2TAccumulation+0x108>)
			{
				localI2tAvgCounter++;
				SMon_ISenseL1_Average_Float += SMon_ISenseL1_Float;
 8002748:	4c3e      	ldr	r4, [pc, #248]	@ (8002844 <SMon_I2TAccumulation+0x10c>)
		if(20u > localI2tAvgCounter)
 800274a:	7828      	ldrb	r0, [r5, #0]
				SMon_ISenseL1_Average_Float += SMon_ISenseL1_Float;
 800274c:	f8d4 8000 	ldr.w	r8, [r4]
		if(20u > localI2tAvgCounter)
 8002750:	2813      	cmp	r0, #19
 8002752:	d837      	bhi.n	80027c4 <SMon_I2TAccumulation+0x8c>
				SMon_ISenseL1_Average_Float += SMon_ISenseL1_Float;
 8002754:	4b3c      	ldr	r3, [pc, #240]	@ (8002848 <SMon_I2TAccumulation+0x110>)
				localI2tAvgCounter++;
 8002756:	3001      	adds	r0, #1
 8002758:	7028      	strb	r0, [r5, #0]
				SMon_ISenseL1_Average_Float += SMon_ISenseL1_Float;
 800275a:	4641      	mov	r1, r8
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f7ff fcfd 	bl	800215c <__addsf3>
 8002762:	6020      	str	r0, [r4, #0]
				{
					/* Do nothing. */
				}


	if(SMon_P_ISenseNominal < SMon_ISenseL1_Avged_Float && 0u == SMon_I2TError && 1u == SMon_CmdStat)
 8002764:	6835      	ldr	r5, [r6, #0]
	{
		SMon_DeltaAmper_Float = (SMon_ISenseL1_Avged_Float * SMon_ISenseL1_Avged_Float - SMon_P_ISenseNominal * SMon_P_ISenseNominal) / 10u;
		SMon_I2TCounter_Float += SMon_DeltaAmper_Float;
 8002766:	4c39      	ldr	r4, [pc, #228]	@ (800284c <SMon_I2TAccumulation+0x114>)
	if(SMon_P_ISenseNominal < SMon_ISenseL1_Avged_Float && 0u == SMon_I2TError && 1u == SMon_CmdStat)
 8002768:	4628      	mov	r0, r5
 800276a:	4939      	ldr	r1, [pc, #228]	@ (8002850 <SMon_I2TAccumulation+0x118>)
		SMon_I2TCounter_Float += SMon_DeltaAmper_Float;
 800276c:	6826      	ldr	r6, [r4, #0]
	if(SMon_P_ISenseNominal < SMon_ISenseL1_Avged_Float && 0u == SMon_I2TError && 1u == SMon_CmdStat)
 800276e:	f7ff ffb9 	bl	80026e4 <__aeabi_fcmpgt>
 8002772:	2800      	cmp	r0, #0
 8002774:	d032      	beq.n	80027dc <SMon_I2TAccumulation+0xa4>
 8002776:	4b37      	ldr	r3, [pc, #220]	@ (8002854 <SMon_I2TAccumulation+0x11c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d12e      	bne.n	80027dc <SMon_I2TAccumulation+0xa4>
 800277e:	2f01      	cmp	r7, #1
 8002780:	d12c      	bne.n	80027dc <SMon_I2TAccumulation+0xa4>
		SMon_DeltaAmper_Float = (SMon_ISenseL1_Avged_Float * SMon_ISenseL1_Avged_Float - SMon_P_ISenseNominal * SMon_P_ISenseNominal) / 10u;
 8002782:	4629      	mov	r1, r5
 8002784:	4628      	mov	r0, r5
 8002786:	f7ff fdf1 	bl	800236c <__aeabi_fmul>
 800278a:	4933      	ldr	r1, [pc, #204]	@ (8002858 <SMon_I2TAccumulation+0x120>)
 800278c:	f7ff fce4 	bl	8002158 <__aeabi_fsub>
 8002790:	4932      	ldr	r1, [pc, #200]	@ (800285c <SMon_I2TAccumulation+0x124>)
 8002792:	f7ff fe9f 	bl	80024d4 <__aeabi_fdiv>
 8002796:	4b32      	ldr	r3, [pc, #200]	@ (8002860 <SMon_I2TAccumulation+0x128>)
		SMon_I2TCounter_Float += SMon_DeltaAmper_Float;
 8002798:	4631      	mov	r1, r6
		SMon_DeltaAmper_Float = (SMon_ISenseL1_Avged_Float * SMon_ISenseL1_Avged_Float - SMon_P_ISenseNominal * SMon_P_ISenseNominal) / 10u;
 800279a:	6018      	str	r0, [r3, #0]
		SMon_I2TCounter_Float += SMon_DeltaAmper_Float;
 800279c:	f7ff fcde 	bl	800215c <__addsf3>
 80027a0:	6020      	str	r0, [r4, #0]
		SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 80027a2:	f7ff ffa9 	bl	80026f8 <__aeabi_f2uiz>
 80027a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <SMon_I2TAccumulation+0x12c>)
 80027a8:	6018      	str	r0, [r3, #0]
		{
			/* Do nothing. */
		}
	}

	if(SMon_I2TCounter_Float > SMon_P_I2TRating)
 80027aa:	6825      	ldr	r5, [r4, #0]
 80027ac:	492e      	ldr	r1, [pc, #184]	@ (8002868 <SMon_I2TAccumulation+0x130>)
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7ff ff98 	bl	80026e4 <__aeabi_fcmpgt>
 80027b4:	4604      	mov	r4, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d031      	beq.n	800281e <SMon_I2TAccumulation+0xe6>
	{
		SMon_I2TError = 1u;
 80027ba:	2201      	movs	r2, #1
 80027bc:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <SMon_I2TAccumulation+0x11c>)
 80027be:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 80027c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				SMon_ISenseL1_Avged_Float = SMon_ISenseL1_Average_Float / localI2tAvgCounter;
 80027c4:	f7ff fd7e 	bl	80022c4 <__aeabi_i2f>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4640      	mov	r0, r8
 80027cc:	f7ff fe82 	bl	80024d4 <__aeabi_fdiv>
				localI2tAvgCounter = 0u;
 80027d0:	2300      	movs	r3, #0
 80027d2:	702b      	strb	r3, [r5, #0]
				SMon_ISenseL1_Average_Float = 0u;
 80027d4:	2300      	movs	r3, #0
				SMon_ISenseL1_Avged_Float = SMon_ISenseL1_Average_Float / localI2tAvgCounter;
 80027d6:	6030      	str	r0, [r6, #0]
				SMon_ISenseL1_Average_Float = 0u;
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	e7c3      	b.n	8002764 <SMon_I2TAccumulation+0x2c>
		if(SMon_MainCnt % 20u == 0)
 80027dc:	4b23      	ldr	r3, [pc, #140]	@ (800286c <SMon_I2TAccumulation+0x134>)
		SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 80027de:	681d      	ldr	r5, [r3, #0]
 80027e0:	2314      	movs	r3, #20
 80027e2:	fbb5 f2f3 	udiv	r2, r5, r3
 80027e6:	fb03 5512 	mls	r5, r3, r2, r5
		if(SMon_MainCnt % 20u == 0)
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d1dd      	bne.n	80027aa <SMon_I2TAccumulation+0x72>
			SMon_I2TCounter_Float = (SMon_I2TCounter_Float * SMon_P_I2TDecrementPercentFactor) / 100;
 80027ee:	4630      	mov	r0, r6
 80027f0:	491f      	ldr	r1, [pc, #124]	@ (8002870 <SMon_I2TAccumulation+0x138>)
 80027f2:	f7ff fdbb 	bl	800236c <__aeabi_fmul>
 80027f6:	491f      	ldr	r1, [pc, #124]	@ (8002874 <SMon_I2TAccumulation+0x13c>)
 80027f8:	f7ff fe6c 	bl	80024d4 <__aeabi_fdiv>
 80027fc:	6020      	str	r0, [r4, #0]
 80027fe:	4606      	mov	r6, r0
			SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 8002800:	f7ff ff7a 	bl	80026f8 <__aeabi_f2uiz>
 8002804:	4f17      	ldr	r7, [pc, #92]	@ (8002864 <SMon_I2TAccumulation+0x12c>)
			if(1 > SMon_I2TCounter_Float)
 8002806:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
			SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 800280a:	6038      	str	r0, [r7, #0]
			if(1 > SMon_I2TCounter_Float)
 800280c:	4630      	mov	r0, r6
 800280e:	f7ff ff4b 	bl	80026a8 <__aeabi_fcmplt>
 8002812:	2800      	cmp	r0, #0
 8002814:	d0c9      	beq.n	80027aa <SMon_I2TAccumulation+0x72>
				SMon_I2TCounter_Float = 0;
 8002816:	2300      	movs	r3, #0
				SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 8002818:	603d      	str	r5, [r7, #0]
				SMon_I2TCounter_Float = 0;
 800281a:	6023      	str	r3, [r4, #0]
				SMon_I2TCounter = (uint32_t)SMon_I2TCounter_Float;
 800281c:	e7c5      	b.n	80027aa <SMon_I2TAccumulation+0x72>
	else if(0 == SMon_I2TCounter_Float && 1u == SMon_I2TError)
 800281e:	2100      	movs	r1, #0
 8002820:	4628      	mov	r0, r5
 8002822:	f7ff ff37 	bl	8002694 <__aeabi_fcmpeq>
 8002826:	2800      	cmp	r0, #0
 8002828:	d0ca      	beq.n	80027c0 <SMon_I2TAccumulation+0x88>
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <SMon_I2TAccumulation+0x11c>)
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	2a01      	cmp	r2, #1
		SMon_I2TError = 0u;
 8002830:	bf08      	it	eq
 8002832:	701c      	strbeq	r4, [r3, #0]
}
 8002834:	e7c4      	b.n	80027c0 <SMon_I2TAccumulation+0x88>
 8002836:	bf00      	nop
 8002838:	20000006 	.word	0x20000006
 800283c:	200000cc 	.word	0x200000cc
 8002840:	200000c4 	.word	0x200000c4
 8002844:	200000d0 	.word	0x200000d0
 8002848:	200000d8 	.word	0x200000d8
 800284c:	200000d4 	.word	0x200000d4
 8002850:	41280000 	.word	0x41280000
 8002854:	20000cee 	.word	0x20000cee
 8002858:	42dc8000 	.word	0x42dc8000
 800285c:	41200000 	.word	0x41200000
 8002860:	200000c8 	.word	0x200000c8
 8002864:	20000ce0 	.word	0x20000ce0
 8002868:	44cd0000 	.word	0x44cd0000
 800286c:	200000a8 	.word	0x200000a8
 8002870:	42aa0000 	.word	0x42aa0000
 8002874:	42c80000 	.word	0x42c80000

08002878 <SMon_UpdateHistograms>:

uint16_t SMon_GetBin(uint32_t val, uint32_t max_val)
{
	if (val >= max_val) return NUM_BINS - 1;
 8002878:	f247 532f 	movw	r3, #29999	@ 0x752f
 800287c:	4298      	cmp	r0, r3
	else return (val * NUM_BINS) / max_val;
 800287e:	bf9d      	ittte	ls
 8002880:	0203      	lslls	r3, r0, #8
 8002882:	f247 5030 	movwls	r0, #30000	@ 0x7530
 8002886:	fbb3 f3f0 	udivls	r3, r3, r0
	if (val >= max_val) return NUM_BINS - 1;
 800288a:	23ff      	movhi	r3, #255	@ 0xff
}

void SMon_UpdateHistograms(uint32_t ISenseL1_mA, uint32_t VfbT30_mV, uint32_t VfbL1_mV)
{
 800288c:	b510      	push	{r4, lr}
	SMon_Hist_ISenseL1_ms[SMon_GetBin(ISenseL1_mA, I_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 800288e:	4c16      	ldr	r4, [pc, #88]	@ (80028e8 <SMon_UpdateHistograms+0x70>)
	else return (val * NUM_BINS) / max_val;
 8002890:	bf98      	it	ls
 8002892:	b29b      	uxthls	r3, r3
	SMon_Hist_ISenseL1_ms[SMon_GetBin(ISenseL1_mA, I_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 8002894:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
	if (val >= max_val) return NUM_BINS - 1;
 8002898:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
	SMon_Hist_ISenseL1_ms[SMon_GetBin(ISenseL1_mA, I_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 800289c:	f100 0005 	add.w	r0, r0, #5
 80028a0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	else return (val * NUM_BINS) / max_val;
 80028a4:	bf3d      	ittte	cc
 80028a6:	020b      	lslcc	r3, r1, #8
 80028a8:	f44f 41fa 	movcc.w	r1, #32000	@ 0x7d00
 80028ac:	fbb3 f3f1 	udivcc	r3, r3, r1
	if (val >= max_val) return NUM_BINS - 1;
 80028b0:	23ff      	movcs	r3, #255	@ 0xff
	SMon_Hist_VfbT30_ms[SMon_GetBin(VfbT30_mV, V_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 80028b2:	480e      	ldr	r0, [pc, #56]	@ (80028ec <SMon_UpdateHistograms+0x74>)
	else return (val * NUM_BINS) / max_val;
 80028b4:	bf38      	it	cc
 80028b6:	b29b      	uxthcc	r3, r3
	SMon_Hist_VfbT30_ms[SMon_GetBin(VfbT30_mV, V_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 80028b8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
	if (val >= max_val) return NUM_BINS - 1;
 80028bc:	f5b2 4ffa 	cmp.w	r2, #32000	@ 0x7d00
	SMon_Hist_VfbT30_ms[SMon_GetBin(VfbT30_mV, V_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 80028c0:	f101 0105 	add.w	r1, r1, #5
 80028c4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	else return (val * NUM_BINS) / max_val;
 80028c8:	bf3d      	ittte	cc
 80028ca:	f44f 43fa 	movcc.w	r3, #32000	@ 0x7d00
 80028ce:	0212      	lslcc	r2, r2, #8
 80028d0:	fbb2 f2f3 	udivcc	r2, r2, r3
	if (val >= max_val) return NUM_BINS - 1;
 80028d4:	22ff      	movcs	r2, #255	@ 0xff
	SMon_Hist_VfbL1_ms[SMon_GetBin(VfbL1_mV, V_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 80028d6:	4906      	ldr	r1, [pc, #24]	@ (80028f0 <SMon_UpdateHistograms+0x78>)
	else return (val * NUM_BINS) / max_val;
 80028d8:	bf38      	it	cc
 80028da:	b292      	uxthcc	r2, r2
	SMon_Hist_VfbL1_ms[SMon_GetBin(VfbL1_mV, V_RANGE_MAX)] += SAMPLE_PERIOD_MS;
 80028dc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80028e0:	3305      	adds	r3, #5
 80028e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80028e6:	bd10      	pop	{r4, pc}
 80028e8:	200008e0 	.word	0x200008e0
 80028ec:	200004e0 	.word	0x200004e0
 80028f0:	200000e0 	.word	0x200000e0

080028f4 <SMon_ProcessShortToPlusTest>:

void SMon_ProcessShortToPlusTest(void)
{
 80028f4:	b530      	push	{r4, r5, lr}
	if(1u != SMon_CmdStat)
 80028f6:	4b37      	ldr	r3, [pc, #220]	@ (80029d4 <SMon_ProcessShortToPlusTest+0xe0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <SMon_ProcessShortToPlusTest+0xe4>)
 80028fe:	d010      	beq.n	8002922 <SMon_ProcessShortToPlusTest+0x2e>
	{
		if(0u == SMon_ShortToPlusTest)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	b90a      	cbnz	r2, 8002908 <SMon_ProcessShortToPlusTest+0x14>
		{
			SMon_ShortToPlusTest = 1u; // start short to plus test
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}

	if(0u != SMon_ShortToPlusTest)
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	b14a      	cbz	r2, 8002920 <SMon_ProcessShortToPlusTest+0x2c>
	{
		if(0u == localDischargeTimer) // "first call"
 800290c:	4933      	ldr	r1, [pc, #204]	@ (80029dc <SMon_ProcessShortToPlusTest+0xe8>)
 800290e:	680d      	ldr	r5, [r1, #0]
 8002910:	b985      	cbnz	r5, 8002934 <SMon_ProcessShortToPlusTest+0x40>
		{
			localDischargeTimer = SMon_MainCnt; // time-stamp
 8002912:	4b33      	ldr	r3, [pc, #204]	@ (80029e0 <SMon_ProcessShortToPlusTest+0xec>)
			localLowDisTimer = SMon_MainCnt; // time-stamp
 8002914:	4a33      	ldr	r2, [pc, #204]	@ (80029e4 <SMon_ProcessShortToPlusTest+0xf0>)
			localDischargeTimer = SMon_MainCnt; // time-stamp
 8002916:	681b      	ldr	r3, [r3, #0]
			localLowDisTimer = SMon_MainCnt; // time-stamp
 8002918:	6013      	str	r3, [r2, #0]
			localS2BCounter = SMon_MainCnt; // time-stamp
 800291a:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <SMon_ProcessShortToPlusTest+0xf4>)
			localDischargeTimer = SMon_MainCnt; // time-stamp
 800291c:	600b      	str	r3, [r1, #0]
			localS2BCounter = SMon_MainCnt; // time-stamp
 800291e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8002920:	bd30      	pop	{r4, r5, pc}
		SMon_ShortToPlusTest = 0u; // reset short to plus test status
 8002922:	2200      	movs	r2, #0
		localDischargeTimer = 0u; // reset normal discharge counter
 8002924:	492d      	ldr	r1, [pc, #180]	@ (80029dc <SMon_ProcessShortToPlusTest+0xe8>)
		SMon_ShortToPlusTest = 0u; // reset short to plus test status
 8002926:	701a      	strb	r2, [r3, #0]
		localDischargeTimer = 0u; // reset normal discharge counter
 8002928:	600a      	str	r2, [r1, #0]
		localLowDisTimer = 0u; // reset very low voltage discharge counter
 800292a:	492e      	ldr	r1, [pc, #184]	@ (80029e4 <SMon_ProcessShortToPlusTest+0xf0>)
 800292c:	600a      	str	r2, [r1, #0]
		localS2BCounter = 0u; // reset longer case discharge time counter
 800292e:	492e      	ldr	r1, [pc, #184]	@ (80029e8 <SMon_ProcessShortToPlusTest+0xf4>)
 8002930:	600a      	str	r2, [r1, #0]
 8002932:	e7e9      	b.n	8002908 <SMon_ProcessShortToPlusTest+0x14>
			switch(SMon_ShortToPlusTest) // short-to-plus test phases
 8002934:	2a02      	cmp	r2, #2
 8002936:	d01c      	beq.n	8002972 <SMon_ProcessShortToPlusTest+0x7e>
 8002938:	2a03      	cmp	r2, #3
 800293a:	d034      	beq.n	80029a6 <SMon_ProcessShortToPlusTest+0xb2>
 800293c:	2a01      	cmp	r2, #1
 800293e:	d1ef      	bne.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
					if(localT30P50 <= SMon_VfbL1)
 8002940:	492a      	ldr	r1, [pc, #168]	@ (80029ec <SMon_ProcessShortToPlusTest+0xf8>)
 8002942:	8808      	ldrh	r0, [r1, #0]
 8002944:	492a      	ldr	r1, [pc, #168]	@ (80029f0 <SMon_ProcessShortToPlusTest+0xfc>)
 8002946:	880c      	ldrh	r4, [r1, #0]
				if(SMon_P_DischargeTimeCycles <= (SMon_MainCnt - localDischargeTimer)) // de-bounce of SMon_P_DischargeTimeCycles milliseconds
 8002948:	4925      	ldr	r1, [pc, #148]	@ (80029e0 <SMon_ProcessShortToPlusTest+0xec>)
 800294a:	6809      	ldr	r1, [r1, #0]
 800294c:	1b49      	subs	r1, r1, r5
 800294e:	f24c 55a7 	movw	r5, #50599	@ 0xc5a7
 8002952:	42a9      	cmp	r1, r5
 8002954:	d906      	bls.n	8002964 <SMon_ProcessShortToPlusTest+0x70>
					if(localT30P50 <= SMon_VfbL1)
 8002956:	4284      	cmp	r4, r0
 8002958:	d3e2      	bcc.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_ShortToPlusTest = 2u; // go-to next phase
 800295a:	2102      	movs	r1, #2
						SMon_ShortToPlusTest = 3u; // go-to next phase
 800295c:	7019      	strb	r1, [r3, #0]
						SMon_S2BErrorStatus = 2u;
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <SMon_ProcessShortToPlusTest+0x100>)
						SMon_S2BErrorStatus = 0u;
 8002960:	701a      	strb	r2, [r3, #0]
}
 8002962:	e7dd      	b.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
					if(localT30P50 > SMon_VfbL1) // abort this test phase
 8002964:	4284      	cmp	r4, r0
 8002966:	d2db      	bcs.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_ShortToPlusTest = 2u; // go-to next phase
 8002968:	2202      	movs	r2, #2
						SMon_ShortToPlusTest = 4u; // finish short to plus test
 800296a:	701a      	strb	r2, [r3, #0]
						SMon_S2BErrorStatus = 0u;
 800296c:	2200      	movs	r2, #0
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <SMon_ProcessShortToPlusTest+0x100>)
 8002970:	e7f6      	b.n	8002960 <SMon_ProcessShortToPlusTest+0x6c>
					if(localT30P50 <= SMon_VfbL1)
 8002972:	491f      	ldr	r1, [pc, #124]	@ (80029f0 <SMon_ProcessShortToPlusTest+0xfc>)
				if(SMon_P_LowDisTimeCyc <= (SMon_MainCnt - localLowDisTimer)) // de-bounce of SMon_P_LowDisTimeCyc milliseconds
 8002974:	4c1b      	ldr	r4, [pc, #108]	@ (80029e4 <SMon_ProcessShortToPlusTest+0xf0>)
					if(localT30P50 <= SMon_VfbL1)
 8002976:	8808      	ldrh	r0, [r1, #0]
				if(SMon_P_LowDisTimeCyc <= (SMon_MainCnt - localLowDisTimer)) // de-bounce of SMon_P_LowDisTimeCyc milliseconds
 8002978:	4919      	ldr	r1, [pc, #100]	@ (80029e0 <SMon_ProcessShortToPlusTest+0xec>)
 800297a:	6824      	ldr	r4, [r4, #0]
 800297c:	6809      	ldr	r1, [r1, #0]
 800297e:	1b09      	subs	r1, r1, r4
 8002980:	4c1d      	ldr	r4, [pc, #116]	@ (80029f8 <SMon_ProcessShortToPlusTest+0x104>)
 8002982:	42a1      	cmp	r1, r4
 8002984:	d90a      	bls.n	800299c <SMon_ProcessShortToPlusTest+0xa8>
					if((SMon_VfbT30 * 3 / 10) <= SMon_VfbL1)
 8002986:	240a      	movs	r4, #10
 8002988:	491c      	ldr	r1, [pc, #112]	@ (80029fc <SMon_ProcessShortToPlusTest+0x108>)
 800298a:	8809      	ldrh	r1, [r1, #0]
 800298c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002990:	fbb1 f1f4 	udiv	r1, r1, r4
 8002994:	4281      	cmp	r1, r0
 8002996:	dcc3      	bgt.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_ShortToPlusTest = 3u; // go-to next phase
 8002998:	2103      	movs	r1, #3
 800299a:	e7df      	b.n	800295c <SMon_ProcessShortToPlusTest+0x68>
					if(SMon_P_LowVoltage > SMon_VfbL1) // abort this test phase
 800299c:	f5b0 7f48 	cmp.w	r0, #800	@ 0x320
 80029a0:	d2be      	bcs.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_ShortToPlusTest = 3u; // go-to next phase
 80029a2:	2203      	movs	r2, #3
 80029a4:	e7e1      	b.n	800296a <SMon_ProcessShortToPlusTest+0x76>
					if(localT30P50 <= SMon_VfbL1)
 80029a6:	4912      	ldr	r1, [pc, #72]	@ (80029f0 <SMon_ProcessShortToPlusTest+0xfc>)
				if(SMon_P_LongDischargeTimeCycles <= (SMon_MainCnt - localS2BCounter)) // worst case wait time 1054 seconds
 80029a8:	4c0f      	ldr	r4, [pc, #60]	@ (80029e8 <SMon_ProcessShortToPlusTest+0xf4>)
					if(localT30P50 <= SMon_VfbL1)
 80029aa:	8808      	ldrh	r0, [r1, #0]
				if(SMon_P_LongDischargeTimeCycles <= (SMon_MainCnt - localS2BCounter)) // worst case wait time 1054 seconds
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <SMon_ProcessShortToPlusTest+0xec>)
 80029ae:	6824      	ldr	r4, [r4, #0]
 80029b0:	6809      	ldr	r1, [r1, #0]
 80029b2:	1b09      	subs	r1, r1, r4
 80029b4:	4c12      	ldr	r4, [pc, #72]	@ (8002a00 <SMon_ProcessShortToPlusTest+0x10c>)
 80029b6:	42a1      	cmp	r1, r4
 80029b8:	d906      	bls.n	80029c8 <SMon_ProcessShortToPlusTest+0xd4>
					if(SMon_P_LowVoltage <= SMon_VfbL1)
 80029ba:	f5b0 7f48 	cmp.w	r0, #800	@ 0x320
 80029be:	d3af      	bcc.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_S2BErrorStatus = 3u;
 80029c0:	490c      	ldr	r1, [pc, #48]	@ (80029f4 <SMon_ProcessShortToPlusTest+0x100>)
 80029c2:	700a      	strb	r2, [r1, #0]
						SMon_ShortToPlusTest = 4u; // finish short to plus test
 80029c4:	2204      	movs	r2, #4
 80029c6:	e7cb      	b.n	8002960 <SMon_ProcessShortToPlusTest+0x6c>
					if(SMon_P_LowVoltage > SMon_VfbL1) // abort this test phase
 80029c8:	f5b0 7f48 	cmp.w	r0, #800	@ 0x320
 80029cc:	d2a8      	bcs.n	8002920 <SMon_ProcessShortToPlusTest+0x2c>
						SMon_ShortToPlusTest = 4u; // finish short to plus test
 80029ce:	2204      	movs	r2, #4
 80029d0:	e7cb      	b.n	800296a <SMon_ProcessShortToPlusTest+0x76>
 80029d2:	bf00      	nop
 80029d4:	20000006 	.word	0x20000006
 80029d8:	20000ce7 	.word	0x20000ce7
 80029dc:	200000b4 	.word	0x200000b4
 80029e0:	200000a8 	.word	0x200000a8
 80029e4:	200000b0 	.word	0x200000b0
 80029e8:	200000ac 	.word	0x200000ac
 80029ec:	200000c0 	.word	0x200000c0
 80029f0:	20000004 	.word	0x20000004
 80029f4:	20000cef 	.word	0x20000cef
 80029f8:	0006689f 	.word	0x0006689f
 80029fc:	20000002 	.word	0x20000002
 8002a00:	000fee1f 	.word	0x000fee1f

08002a04 <SMon_ProcessLoadCurrentState>:

void SMon_ProcessLoadCurrentState(void)
{
	localT30P50 = ((SMon_VfbT30 * 5u) / 10u); // get 50% of T30
 8002a04:	220a      	movs	r2, #10
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <SMon_ProcessLoadCurrentState+0x48>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a12:	4a0f      	ldr	r2, [pc, #60]	@ (8002a50 <SMon_ProcessLoadCurrentState+0x4c>)
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]

	if(SMon_VfbL1 >= localT30P50)
 8002a18:	4a0e      	ldr	r2, [pc, #56]	@ (8002a54 <SMon_ProcessLoadCurrentState+0x50>)
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	bf34      	ite	cc
 8002a20:	2300      	movcc	r3, #0
 8002a22:	2301      	movcs	r3, #1
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <SMon_ProcessLoadCurrentState+0x54>)
 8002a26:	7013      	strb	r3, [r2, #0]
	else
	{
		SMon_L1ST = 0u;
	}

	if(1u == SMon_CmdStat && 0u == SMon_CLS_Failure && 0u == SMon_L1_UVStatus)
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <SMon_ProcessLoadCurrentState+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10a      	bne.n	8002a46 <SMon_ProcessLoadCurrentState+0x42>
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <SMon_ProcessLoadCurrentState+0x5c>)
 8002a32:	4a0c      	ldr	r2, [pc, #48]	@ (8002a64 <SMon_ProcessLoadCurrentState+0x60>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <SMon_ProcessLoadCurrentState+0x64>)
 8002a42:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		localRequestPhysicalStatus = 0u;
	}
}
 8002a44:	4770      	bx	lr
		localRequestPhysicalStatus = 0u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e7fa      	b.n	8002a40 <SMon_ProcessLoadCurrentState+0x3c>
 8002a4a:	bf00      	nop
 8002a4c:	20000002 	.word	0x20000002
 8002a50:	200000c0 	.word	0x200000c0
 8002a54:	20000004 	.word	0x20000004
 8002a58:	20000ce6 	.word	0x20000ce6
 8002a5c:	20000006 	.word	0x20000006
 8002a60:	20000cec 	.word	0x20000cec
 8002a64:	20000ced 	.word	0x20000ced
 8002a68:	20000000 	.word	0x20000000

08002a6c <SMon_ProcessEcuVoltageState>:

void SMon_ProcessEcuVoltageState(void)
{
	if(SMon_P_UV_KL30 <= SMon_VfbT30 && SMon_P_OV_KL30 >= SMon_VfbT30) // UV OV checks
 8002a6c:	f242 7210 	movw	r2, #10000	@ 0x2710
{
 8002a70:	b510      	push	{r4, lr}
	if(SMon_P_UV_KL30 <= SMon_VfbT30 && SMon_P_OV_KL30 >= SMon_VfbT30) // UV OV checks
 8002a72:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <SMon_ProcessEcuVoltageState+0x70>)
 8002a74:	491a      	ldr	r1, [pc, #104]	@ (8002ae0 <SMon_ProcessEcuVoltageState+0x74>)
 8002a76:	8818      	ldrh	r0, [r3, #0]
 8002a78:	f5a0 53da 	sub.w	r3, r0, #6976	@ 0x1b40
 8002a7c:	3b18      	subs	r3, #24
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4293      	cmp	r3, r2
 8002a82:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <SMon_ProcessEcuVoltageState+0x78>)
 8002a84:	d807      	bhi.n	8002a96 <SMon_ProcessEcuVoltageState+0x2a>
	{
		SMon_CounterUVKL30 = 0u; // reset counters
 8002a86:	2300      	movs	r3, #0
		SMon_CounterOVKL30 = 0u; // reset counters
 8002a88:	6013      	str	r3, [r2, #0]
		SMon_ECU_UV = 0u;
 8002a8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <SMon_ProcessEcuVoltageState+0x7c>)
		SMon_CounterUVKL30 = 0u; // reset counters
 8002a8c:	600b      	str	r3, [r1, #0]
		SMon_ECU_UV = 0u;
 8002a8e:	7013      	strb	r3, [r2, #0]
		SMon_ECU_OV = 0u;
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <SMon_ProcessEcuVoltageState+0x80>)
 8002a92:	7013      	strb	r3, [r2, #0]
		else
		{
			SMon_CounterOVKL30 = 0u; // reset counter
		}
	}
}
 8002a94:	bd10      	pop	{r4, pc}
		if(SMon_P_UV_KL30 > SMon_VfbT30) // under-voltage
 8002a96:	f641 3457 	movw	r4, #6999	@ 0x1b57
				SMon_CounterUVKL30 = SMon_MainCnt; // time-stamp
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <SMon_ProcessEcuVoltageState+0x84>)
		if(SMon_P_UV_KL30 > SMon_VfbT30) // under-voltage
 8002a9c:	42a0      	cmp	r0, r4
				SMon_CounterUVKL30 = SMon_MainCnt; // time-stamp
 8002a9e:	681b      	ldr	r3, [r3, #0]
		if(SMon_P_UV_KL30 > SMon_VfbT30) // under-voltage
 8002aa0:	d80c      	bhi.n	8002abc <SMon_ProcessEcuVoltageState+0x50>
			if(0u == SMon_CounterUVKL30) // "first call"
 8002aa2:	6808      	ldr	r0, [r1, #0]
 8002aa4:	b910      	cbnz	r0, 8002aac <SMon_ProcessEcuVoltageState+0x40>
				SMon_CounterUVKL30 = SMon_MainCnt; // time-stamp
 8002aa6:	600b      	str	r3, [r1, #0]
			SMon_CounterOVKL30 = 0u; // reset counter
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e00b      	b.n	8002ac4 <SMon_ProcessEcuVoltageState+0x58>
				if(SMon_P_WaitTimeOVUV < (SMon_MainCnt - SMon_CounterUVKL30)) // de-bounce for UV
 8002aac:	1a1b      	subs	r3, r3, r0
 8002aae:	2b3c      	cmp	r3, #60	@ 0x3c
					SMon_ECU_UV = 1u;
 8002ab0:	bf8c      	ite	hi
 8002ab2:	2101      	movhi	r1, #1
					SMon_ECU_UV = 0u;
 8002ab4:	2100      	movls	r1, #0
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <SMon_ProcessEcuVoltageState+0x7c>)
 8002ab8:	7019      	strb	r1, [r3, #0]
		if(SMon_P_OV_KL30 < SMon_VfbT30) // over-voltage
 8002aba:	e7f5      	b.n	8002aa8 <SMon_ProcessEcuVoltageState+0x3c>
			SMon_CounterUVKL30 = 0u; // reset counter
 8002abc:	2000      	movs	r0, #0
 8002abe:	6008      	str	r0, [r1, #0]
			if(0u == SMon_CounterOVKL30) // "first call"
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	b909      	cbnz	r1, 8002ac8 <SMon_ProcessEcuVoltageState+0x5c>
			SMon_CounterOVKL30 = 0u; // reset counter
 8002ac4:	6013      	str	r3, [r2, #0]
}
 8002ac6:	e7e5      	b.n	8002a94 <SMon_ProcessEcuVoltageState+0x28>
				if(SMon_P_WaitTimeOVUV < (SMon_MainCnt - SMon_CounterOVKL30)) // de-bounce for OV - 300ms
 8002ac8:	1a5b      	subs	r3, r3, r1
 8002aca:	2b3c      	cmp	r3, #60	@ 0x3c
					SMon_ECU_OV = 1u;
 8002acc:	bf88      	it	hi
 8002ace:	2201      	movhi	r2, #1
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <SMon_ProcessEcuVoltageState+0x80>)
 8002ad2:	bf8c      	ite	hi
 8002ad4:	701a      	strbhi	r2, [r3, #0]
					SMon_ECU_OV = 0u;
 8002ad6:	7018      	strbls	r0, [r3, #0]
 8002ad8:	e7dc      	b.n	8002a94 <SMon_ProcessEcuVoltageState+0x28>
 8002ada:	bf00      	nop
 8002adc:	20000002 	.word	0x20000002
 8002ae0:	200000a4 	.word	0x200000a4
 8002ae4:	200000a0 	.word	0x200000a0
 8002ae8:	20000ceb 	.word	0x20000ceb
 8002aec:	20000cea 	.word	0x20000cea
 8002af0:	200000a8 	.word	0x200000a8

08002af4 <SMon_ProcessLoadErrorStatus>:

void SMon_ProcessLoadErrorStatus(void)
{
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t pSMon_I2TError = 0u;
	static uint8_t pSMon_CLS_Failure = 0u;
	static uint8_t pSMon_CmdStat = 0u;
	static uint32_t localTimeStamp = 0u;

	if(1u == SMon_CLS_Failure)
 8002af6:	4933      	ldr	r1, [pc, #204]	@ (8002bc4 <SMon_ProcessLoadErrorStatus+0xd0>)
 8002af8:	780b      	ldrb	r3, [r1, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <SMon_ProcessLoadErrorStatus+0x18>
	{
		if(0u == localTimeStamp)
 8002afe:	4a32      	ldr	r2, [pc, #200]	@ (8002bc8 <SMon_ProcessLoadErrorStatus+0xd4>)
		{
			localTimeStamp = SMon_MainCnt;
 8002b00:	4b32      	ldr	r3, [pc, #200]	@ (8002bcc <SMon_ProcessLoadErrorStatus+0xd8>)
		if(0u == localTimeStamp)
 8002b02:	6810      	ldr	r0, [r2, #0]
			localTimeStamp = SMon_MainCnt;
 8002b04:	681b      	ldr	r3, [r3, #0]
		if(0u == localTimeStamp)
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d14f      	bne.n	8002baa <SMon_ProcessLoadErrorStatus+0xb6>
		else
		{
			if(SMon_P_ClsFailureWaitTime < (SMon_MainCnt - localTimeStamp))
			{
				SMon_CLS_Failure = 0u;
				localTimeStamp = 0u;
 8002b0a:	6013      	str	r3, [r2, #0]
	else
	{
		/* Do nothing. */
	}

	if(1u == SMon_ECU_OV || 1u == SMon_ECU_UV)
 8002b0c:	4b30      	ldr	r3, [pc, #192]	@ (8002bd0 <SMon_ProcessLoadErrorStatus+0xdc>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d003      	beq.n	8002b1c <SMon_ProcessLoadErrorStatus+0x28>
 8002b14:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd4 <SMon_ProcessLoadErrorStatus+0xe0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d102      	bne.n	8002b22 <SMon_ProcessLoadErrorStatus+0x2e>
	{
		localRequestPhysicalStatus = 0u;
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd8 <SMon_ProcessLoadErrorStatus+0xe4>)
 8002b20:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}

	if(0u != SMon_LockSupply)
 8002b22:	4f2e      	ldr	r7, [pc, #184]	@ (8002bdc <SMon_ProcessLoadErrorStatus+0xe8>)
 8002b24:	783b      	ldrb	r3, [r7, #0]
 8002b26:	b113      	cbz	r3, 8002b2e <SMon_ProcessLoadErrorStatus+0x3a>
	{
		localRequestPhysicalStatus = 0u;
 8002b28:	2000      	movs	r0, #0
 8002b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd8 <SMon_ProcessLoadErrorStatus+0xe4>)
 8002b2c:	7010      	strb	r0, [r2, #0]
	else
	{
		/* Do nothing. */
	}

	if(1u == SMon_I2TError)
 8002b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <SMon_ProcessLoadErrorStatus+0xec>)
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	2a01      	cmp	r2, #1
	{
		localRequestPhysicalStatus = 0u;
 8002b34:	bf02      	ittt	eq
 8002b36:	2400      	moveq	r4, #0
 8002b38:	4827      	ldreq	r0, [pc, #156]	@ (8002bd8 <SMon_ProcessLoadErrorStatus+0xe4>)
 8002b3a:	7004      	strbeq	r4, [r0, #0]
	else
	{
		/* Do nothing. */
	}

	if(1u == pSMon_CLS_Failure && 0u == SMon_CLS_Failure && 0u == SMon_LockSupply)
 8002b3c:	4829      	ldr	r0, [pc, #164]	@ (8002be4 <SMon_ProcessLoadErrorStatus+0xf0>)
 8002b3e:	780c      	ldrb	r4, [r1, #0]
 8002b40:	7801      	ldrb	r1, [r0, #0]
 8002b42:	2901      	cmp	r1, #1
 8002b44:	4928      	ldr	r1, [pc, #160]	@ (8002be8 <SMon_ProcessLoadErrorStatus+0xf4>)
 8002b46:	d106      	bne.n	8002b56 <SMon_ProcessLoadErrorStatus+0x62>
 8002b48:	ea53 0604 	orrs.w	r6, r3, r4
	{
		pSMon_CLS_Failure = SMon_CLS_Failure;
		SMon_RetryCnt++;
 8002b4c:	bf01      	itttt	eq
 8002b4e:	780d      	ldrbeq	r5, [r1, #0]
		pSMon_CLS_Failure = SMon_CLS_Failure;
 8002b50:	7006      	strbeq	r6, [r0, #0]
		SMon_RetryCnt++;
 8002b52:	3501      	addeq	r5, #1
 8002b54:	700d      	strbeq	r5, [r1, #0]
	else
	{
		/* Do nothing. */
	}

	if(1u == pSMon_I2TError && 0u == SMon_I2TError && 0u == SMon_LockSupply)
 8002b56:	4d25      	ldr	r5, [pc, #148]	@ (8002bec <SMon_ProcessLoadErrorStatus+0xf8>)
 8002b58:	782e      	ldrb	r6, [r5, #0]
 8002b5a:	2e01      	cmp	r6, #1
 8002b5c:	d105      	bne.n	8002b6a <SMon_ProcessLoadErrorStatus+0x76>
 8002b5e:	4313      	orrs	r3, r2
	{
		pSMon_I2TError = SMon_I2TError;
		SMon_RetryCnt++;
 8002b60:	bf01      	itttt	eq
 8002b62:	780e      	ldrbeq	r6, [r1, #0]
		pSMon_I2TError = SMon_I2TError;
 8002b64:	702b      	strbeq	r3, [r5, #0]
		SMon_RetryCnt++;
 8002b66:	1c73      	addeq	r3, r6, #1
 8002b68:	700b      	strbeq	r3, [r1, #0]
	else
	{
		/* Do nothing. */
	}

	if(SMon_P_Rtcntmax == SMon_RetryCnt)
 8002b6a:	780b      	ldrb	r3, [r1, #0]
	else
	{
		/* Do nothing. */
	}

	if(1u == SMon_L1_UVStatus && 0u == SMon_CmdStat && 1u == pSMon_CmdStat)
 8002b6c:	4e20      	ldr	r6, [pc, #128]	@ (8002bf0 <SMon_ProcessLoadErrorStatus+0xfc>)
	if(SMon_P_Rtcntmax == SMon_RetryCnt)
 8002b6e:	2b0a      	cmp	r3, #10
		SMon_LockSupply = 1u;
 8002b70:	bf08      	it	eq
 8002b72:	2301      	moveq	r3, #1
	if(1u == SMon_L1_UVStatus && 0u == SMon_CmdStat && 1u == pSMon_CmdStat)
 8002b74:	7831      	ldrb	r1, [r6, #0]
		SMon_LockSupply = 1u;
 8002b76:	bf08      	it	eq
 8002b78:	703b      	strbeq	r3, [r7, #0]
	if(1u == SMon_L1_UVStatus && 0u == SMon_CmdStat && 1u == pSMon_CmdStat)
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <SMon_ProcessLoadErrorStatus+0x100>)
 8002b7c:	2901      	cmp	r1, #1
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	491d      	ldr	r1, [pc, #116]	@ (8002bf8 <SMon_ProcessLoadErrorStatus+0x104>)
 8002b82:	d119      	bne.n	8002bb8 <SMon_ProcessLoadErrorStatus+0xc4>
 8002b84:	b9c3      	cbnz	r3, 8002bb8 <SMon_ProcessLoadErrorStatus+0xc4>
 8002b86:	780f      	ldrb	r7, [r1, #0]
 8002b88:	2f01      	cmp	r7, #1
 8002b8a:	d115      	bne.n	8002bb8 <SMon_ProcessLoadErrorStatus+0xc4>
	{
		pSMon_CmdStat = SMon_CmdStat;
 8002b8c:	700b      	strb	r3, [r1, #0]
		SMon_L1_UVStatus = 0u;
		localRequestPhysicalStatus = 0u;
 8002b8e:	4912      	ldr	r1, [pc, #72]	@ (8002bd8 <SMon_ProcessLoadErrorStatus+0xe4>)
		SMon_L1_UVStatus = 0u;
 8002b90:	7033      	strb	r3, [r6, #0]
		localRequestPhysicalStatus = 0u;
 8002b92:	700b      	strb	r3, [r1, #0]
		SMon_CounterUVL1 = 0u; // reset counter
 8002b94:	4919      	ldr	r1, [pc, #100]	@ (8002bfc <SMon_ProcessLoadErrorStatus+0x108>)
 8002b96:	600b      	str	r3, [r1, #0]
	else
	{
		/* Do nothing. */
	}

	if(pSMon_I2TError != SMon_I2TError)
 8002b98:	782b      	ldrb	r3, [r5, #0]
 8002b9a:	4293      	cmp	r3, r2
	else
	{
		/* Do nothing. */
	}

	if(pSMon_CLS_Failure != SMon_CLS_Failure)
 8002b9c:	7803      	ldrb	r3, [r0, #0]
		pSMon_I2TError = SMon_I2TError;
 8002b9e:	bf18      	it	ne
 8002ba0:	702a      	strbne	r2, [r5, #0]
	if(pSMon_CLS_Failure != SMon_CLS_Failure)
 8002ba2:	42a3      	cmp	r3, r4
	{
		pSMon_CLS_Failure = SMon_CLS_Failure;
 8002ba4:	bf18      	it	ne
 8002ba6:	7004      	strbne	r4, [r0, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(SMon_P_ClsFailureWaitTime < (SMon_MainCnt - localTimeStamp))
 8002baa:	1a1b      	subs	r3, r3, r0
 8002bac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002bb0:	d9ac      	bls.n	8002b0c <SMon_ProcessLoadErrorStatus+0x18>
				SMon_CLS_Failure = 0u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	700b      	strb	r3, [r1, #0]
 8002bb6:	e7a8      	b.n	8002b0a <SMon_ProcessLoadErrorStatus+0x16>
	if(pSMon_CmdStat != SMon_CmdStat)
 8002bb8:	780e      	ldrb	r6, [r1, #0]
 8002bba:	429e      	cmp	r6, r3
		pSMon_CmdStat = SMon_CmdStat;
 8002bbc:	bf18      	it	ne
 8002bbe:	700b      	strbne	r3, [r1, #0]
 8002bc0:	e7ea      	b.n	8002b98 <SMon_ProcessLoadErrorStatus+0xa4>
 8002bc2:	bf00      	nop
 8002bc4:	20000cec 	.word	0x20000cec
 8002bc8:	20000098 	.word	0x20000098
 8002bcc:	200000a8 	.word	0x200000a8
 8002bd0:	20000cea 	.word	0x20000cea
 8002bd4:	20000ceb 	.word	0x20000ceb
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000ce4 	.word	0x20000ce4
 8002be0:	20000cee 	.word	0x20000cee
 8002be4:	20000096 	.word	0x20000096
 8002be8:	20000ce5 	.word	0x20000ce5
 8002bec:	20000095 	.word	0x20000095
 8002bf0:	20000ced 	.word	0x20000ced
 8002bf4:	20000006 	.word	0x20000006
 8002bf8:	20000094 	.word	0x20000094
 8002bfc:	2000009c 	.word	0x2000009c

08002c00 <SMon_LoadSwitchingDiagnosis>:

void SMon_LoadSwitchingDiagnosis(void)
{
	if(1u == localCLSFlag) // CLS ongoing
 8002c00:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <SMon_LoadSwitchingDiagnosis+0x5c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10d      	bne.n	8002c24 <SMon_LoadSwitchingDiagnosis+0x24>
	{
		if(SMon_P_UV_CLS <= SMon_VfbL1) // voltage is rising, no error
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <SMon_LoadSwitchingDiagnosis+0x60>)
 8002c0a:	4916      	ldr	r1, [pc, #88]	@ (8002c64 <SMon_LoadSwitchingDiagnosis+0x64>)
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	f5b2 6fcc 	cmp.w	r2, #1632	@ 0x660
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	d901      	bls.n	8002c1c <SMon_LoadSwitchingDiagnosis+0x1c>
		{
			SMon_CLS_Failure = 0u;
 8002c18:	700a      	strb	r2, [r1, #0]
 8002c1a:	4770      	bx	lr
		}
		else
		{
			SMon_CLS_Failure = 1u;
 8002c1c:	700b      	strb	r3, [r1, #0]
			localRequestPhysicalStatus = 0u;
 8002c1e:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <SMon_LoadSwitchingDiagnosis+0x68>)
				else
				{
					if(SMon_P_WaitTimeOVUV < (SMon_MainCnt - SMon_CounterUVL1)) // de-bounce for UV - 300ms
					{
						SMon_L1_UVStatus = 1u;
						localRequestPhysicalStatus = 0u;
 8002c20:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8002c22:	4770      	bx	lr
	else if(2u == localCLSFlag) // CLS is done
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d1fc      	bne.n	8002c22 <SMon_LoadSwitchingDiagnosis+0x22>
		if(localT30P50 <= SMon_VfbL1) // No UV on output
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <SMon_LoadSwitchingDiagnosis+0x6c>)
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <SMon_LoadSwitchingDiagnosis+0x60>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <SMon_LoadSwitchingDiagnosis+0x70>)
 8002c34:	d804      	bhi.n	8002c40 <SMon_LoadSwitchingDiagnosis+0x40>
			SMon_L1_UVStatus = 0u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <SMon_LoadSwitchingDiagnosis+0x74>)
 8002c3a:	700b      	strb	r3, [r1, #0]
					SMon_CounterUVL1 = SMon_MainCnt; // time-stamp
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4770      	bx	lr
 8002c40:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <SMon_LoadSwitchingDiagnosis+0x78>)
				if(0u == SMon_CounterUVL1) // "first call"
 8002c42:	6811      	ldr	r1, [r2, #0]
					SMon_CounterUVL1 = SMon_MainCnt; // time-stamp
 8002c44:	681b      	ldr	r3, [r3, #0]
				if(0u == SMon_CounterUVL1) // "first call"
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d0f8      	beq.n	8002c3c <SMon_LoadSwitchingDiagnosis+0x3c>
					if(SMon_P_WaitTimeOVUV < (SMon_MainCnt - SMon_CounterUVL1)) // de-bounce for UV - 300ms
 8002c4a:	1a5b      	subs	r3, r3, r1
 8002c4c:	2b3c      	cmp	r3, #60	@ 0x3c
 8002c4e:	d9e8      	bls.n	8002c22 <SMon_LoadSwitchingDiagnosis+0x22>
						SMon_L1_UVStatus = 1u;
 8002c50:	2201      	movs	r2, #1
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <SMon_LoadSwitchingDiagnosis+0x74>)
 8002c54:	701a      	strb	r2, [r3, #0]
						localRequestPhysicalStatus = 0u;
 8002c56:	2200      	movs	r2, #0
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <SMon_LoadSwitchingDiagnosis+0x68>)
 8002c5a:	e7e1      	b.n	8002c20 <SMon_LoadSwitchingDiagnosis+0x20>
 8002c5c:	200000c3 	.word	0x200000c3
 8002c60:	20000004 	.word	0x20000004
 8002c64:	20000cec 	.word	0x20000cec
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	200000c0 	.word	0x200000c0
 8002c70:	2000009c 	.word	0x2000009c
 8002c74:	20000ced 	.word	0x20000ced
 8002c78:	200000a8 	.word	0x200000a8

08002c7c <SMon_LoadSwitchingLogic>:

void SMon_LoadSwitchingLogic(void)
{
 8002c7c:	b538      	push	{r3, r4, r5, lr}
	if(1u == localRequestPhysicalStatus)
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <SMon_LoadSwitchingLogic+0xb4>)
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <SMon_LoadSwitchingLogic+0xb8>)
 8002c84:	2a01      	cmp	r2, #1
 8002c86:	d13e      	bne.n	8002d06 <SMon_LoadSwitchingLogic+0x8a>
	{
		if(0u == localCPCFlag) // CPC off
 8002c88:	7819      	ldrb	r1, [r3, #0]
 8002c8a:	b951      	cbnz	r1, 8002ca2 <SMon_LoadSwitchingLogic+0x26>
		{
			localCPCFlag = 1u; // CPC ongoing
 8002c8c:	701a      	strb	r2, [r3, #0]
			localCPCCounter = SMon_MainCnt; // time-stamp
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <SMon_LoadSwitchingLogic+0xbc>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <SMon_LoadSwitchingLogic+0xc0>)
 8002c94:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR1 = 257u; // switch on CPC
 8002c96:	f240 1201 	movw	r2, #257	@ 0x101
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <SMon_LoadSwitchingLogic+0xc4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	635a      	str	r2, [r3, #52]	@ 0x34
		localCPCCounter = 0u; // reset counter
		htim1.Instance->CCR1 = 0u; // switch off CPC
		HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS
		HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 0u); // switch off L1
	}
}
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
		else if(1u == localCPCFlag) // CPC ongoing
 8002ca2:	2901      	cmp	r1, #1
 8002ca4:	d10b      	bne.n	8002cbe <SMon_LoadSwitchingLogic+0x42>
			if(SMon_P_WaitTimeCPC <= (SMon_MainCnt - localCPCCounter)) // de-bounce time 50ms
 8002ca6:	4925      	ldr	r1, [pc, #148]	@ (8002d3c <SMon_LoadSwitchingLogic+0xc0>)
 8002ca8:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <SMon_LoadSwitchingLogic+0xbc>)
 8002caa:	6808      	ldr	r0, [r1, #0]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	1a12      	subs	r2, r2, r0
 8002cb0:	2a09      	cmp	r2, #9
 8002cb2:	d9f5      	bls.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
				localCPCFlag = 2u; // CPC finished
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
				localCPCCounter = 0u; // reset counter
 8002cb8:	2300      	movs	r3, #0
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e7f0      	b.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
		else if(2u == localCPCFlag) // CPC finished
 8002cbe:	2902      	cmp	r1, #2
 8002cc0:	d1ee      	bne.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
			if(0u == localCLSFlag) // CLS off
 8002cc2:	4820      	ldr	r0, [pc, #128]	@ (8002d44 <SMon_LoadSwitchingLogic+0xc8>)
 8002cc4:	7803      	ldrb	r3, [r0, #0]
 8002cc6:	b963      	cbnz	r3, 8002ce2 <SMon_LoadSwitchingLogic+0x66>
				if(0u == localCLSCounter) // "first call"
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <SMon_LoadSwitchingLogic+0xcc>)
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d1e7      	bne.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
					localCLSCounter = SMon_MainCnt; // time-stamp
 8002cd0:	4c19      	ldr	r4, [pc, #100]	@ (8002d38 <SMon_LoadSwitchingLogic+0xbc>)
					localCLSFlag = 1u; // CLS ongoing
 8002cd2:	7002      	strb	r2, [r0, #0]
					localCLSCounter = SMon_MainCnt; // time-stamp
 8002cd4:	6824      	ldr	r4, [r4, #0]
 8002cd6:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 0u); // switch off L1
 8002cd8:	481c      	ldr	r0, [pc, #112]	@ (8002d4c <SMon_LoadSwitchingLogic+0xd0>)
}
 8002cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 0u); // switch off L1
 8002cde:	f001 bf49 	b.w	8004b74 <HAL_GPIO_WritePin>
			else if(1u == localCLSFlag) // CLS ongoing
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d1dc      	bne.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
				if(SMon_P_CLSTime <= (SMon_MainCnt - localCLSCounter)) // de-bounce time based on parameter
 8002ce6:	4c18      	ldr	r4, [pc, #96]	@ (8002d48 <SMon_LoadSwitchingLogic+0xcc>)
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <SMon_LoadSwitchingLogic+0xbc>)
 8002cea:	6825      	ldr	r5, [r4, #0]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	1b52      	subs	r2, r2, r5
 8002cf0:	2a15      	cmp	r2, #21
 8002cf2:	d903      	bls.n	8002cfc <SMon_LoadSwitchingLogic+0x80>
					localCLSCounter = 0u; // reset counter
 8002cf4:	2200      	movs	r2, #0
					localCLSFlag = 2u; // CLS finished
 8002cf6:	7001      	strb	r1, [r0, #0]
					localCLSCounter = 0u; // reset counter
 8002cf8:	6022      	str	r2, [r4, #0]
					HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS circuit
 8002cfa:	e7ed      	b.n	8002cd8 <SMon_LoadSwitchingLogic+0x5c>
				else if(SMon_P_CLSTime - 1u <= (SMon_MainCnt - localCLSCounter))
 8002cfc:	d1d0      	bne.n	8002ca0 <SMon_LoadSwitchingLogic+0x24>
					HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 1u); // switch on L1 circuit
 8002cfe:	461a      	mov	r2, r3
		HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 0u); // switch off L1
 8002d00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d04:	e7e8      	b.n	8002cd8 <SMon_LoadSwitchingLogic+0x5c>
		localCPCFlag = 0u; // reset flag
 8002d06:	2400      	movs	r4, #0
 8002d08:	701c      	strb	r4, [r3, #0]
		localCLSFlag = 0u; // reset flag
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <SMon_LoadSwitchingLogic+0xc8>)
		HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS
 8002d0c:	4622      	mov	r2, r4
		localCLSFlag = 0u; // reset flag
 8002d0e:	701c      	strb	r4, [r3, #0]
		SMon_CounterUVL1 = 0u; // reset counter
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <SMon_LoadSwitchingLogic+0xd4>)
		HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS
 8002d12:	2102      	movs	r1, #2
		SMon_CounterUVL1 = 0u; // reset counter
 8002d14:	601c      	str	r4, [r3, #0]
		localCLSCounter = 0u; // reset counter
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <SMon_LoadSwitchingLogic+0xcc>)
		HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS
 8002d18:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <SMon_LoadSwitchingLogic+0xd0>)
		localCLSCounter = 0u; // reset counter
 8002d1a:	601c      	str	r4, [r3, #0]
		localCPCCounter = 0u; // reset counter
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <SMon_LoadSwitchingLogic+0xc0>)
 8002d1e:	601c      	str	r4, [r3, #0]
		htim1.Instance->CCR1 = 0u; // switch off CPC
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <SMon_LoadSwitchingLogic+0xc4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	635c      	str	r4, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(ENL1CLS_GPIO_Port, ENL1CLS_Pin, 0u); // switch off CLS
 8002d26:	f001 ff25 	bl	8004b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENL1_GPIO_Port, ENL1_Pin, 0u); // switch off L1
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	e7e8      	b.n	8002d00 <SMon_LoadSwitchingLogic+0x84>
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000
 8002d34:	200000c2 	.word	0x200000c2
 8002d38:	200000a8 	.word	0x200000a8
 8002d3c:	200000b8 	.word	0x200000b8
 8002d40:	20004514 	.word	0x20004514
 8002d44:	200000c3 	.word	0x200000c3
 8002d48:	200000bc 	.word	0x200000bc
 8002d4c:	40010c00 	.word	0x40010c00
 8002d50:	2000009c 	.word	0x2000009c

08002d54 <SMon_main>:

void SMon_main(void)
{
 8002d54:	b508      	push	{r3, lr}
	SMon_ProcessLoadCurrentState();
 8002d56:	f7ff fe55 	bl	8002a04 <SMon_ProcessLoadCurrentState>
	SMon_ProcessLoadErrorStatus();
 8002d5a:	f7ff fecb 	bl	8002af4 <SMon_ProcessLoadErrorStatus>
	SMon_I2TAccumulation();
 8002d5e:	f7ff fceb 	bl	8002738 <SMon_I2TAccumulation>
	SMon_ProcessEcuVoltageState();
 8002d62:	f7ff fe83 	bl	8002a6c <SMon_ProcessEcuVoltageState>
	SMon_LoadSwitchingDiagnosis();
 8002d66:	f7ff ff4b 	bl	8002c00 <SMon_LoadSwitchingDiagnosis>
	SMon_LoadSwitchingLogic();
 8002d6a:	f7ff ff87 	bl	8002c7c <SMon_LoadSwitchingLogic>
	SMon_ProcessShortToPlusTest();
 8002d6e:	f7ff fdc1 	bl	80028f4 <SMon_ProcessShortToPlusTest>
	SMon_UpdateHistograms(SMon_ISenseL1, SMon_VfbT30, SMon_VfbL1);
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <SMon_main+0x38>)
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <SMon_main+0x3c>)
 8002d78:	8819      	ldrh	r1, [r3, #0]
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <SMon_main+0x40>)
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	f7ff fd7b 	bl	8002878 <SMon_UpdateHistograms>
	SMon_MainCnt++;
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <SMon_main+0x44>)
 8002d84:	6813      	ldr	r3, [r2, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bd08      	pop	{r3, pc}
 8002d8c:	20000004 	.word	0x20000004
 8002d90:	20000002 	.word	0x20000002
 8002d94:	200000dc 	.word	0x200000dc
 8002d98:	200000a8 	.word	0x200000a8

08002d9c <CanH_MainFunction>:
void CanH_MainFunction(void);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgFullCallback(CAN_HandleTypeDef *hcan);

void CanH_MainFunction(void)
{
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(0x04 != HAL_CAN_GetError(&hcan))
 8002d9e:	4855      	ldr	r0, [pc, #340]	@ (8002ef4 <CanH_MainFunction+0x158>)
 8002da0:	f001 fad5 	bl	800434e <HAL_CAN_GetError>
 8002da4:	2804      	cmp	r0, #4
 8002da6:	4e54      	ldr	r6, [pc, #336]	@ (8002ef8 <CanH_MainFunction+0x15c>)
 8002da8:	4c54      	ldr	r4, [pc, #336]	@ (8002efc <CanH_MainFunction+0x160>)
 8002daa:	d062      	beq.n	8002e72 <CanH_MainFunction+0xd6>
	{
		if(FULL_COMMUNICATION == CanH_CommunicationState)
 8002dac:	4a54      	ldr	r2, [pc, #336]	@ (8002f00 <CanH_MainFunction+0x164>)
		{
			if(CanH_MainCounter % 202 == 0)
 8002dae:	6833      	ldr	r3, [r6, #0]
		if(FULL_COMMUNICATION == CanH_CommunicationState)
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	2a02      	cmp	r2, #2
 8002db4:	d15d      	bne.n	8002e72 <CanH_MainFunction+0xd6>
			if(CanH_MainCounter % 202 == 0)
 8002db6:	22ca      	movs	r2, #202	@ 0xca
 8002db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8002dc0:	4d50      	ldr	r5, [pc, #320]	@ (8002f04 <CanH_MainFunction+0x168>)
 8002dc2:	b963      	cbnz	r3, 8002dde <CanH_MainFunction+0x42>
			{
				CanH_TxData[0] = SMon_L1ST;
 8002dc4:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <CanH_MainFunction+0x16c>)
				CanH_TxHeader.DLC = 1;
				CanH_TxHeader.StdId = 0x51;
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002dc6:	4622      	mov	r2, r4
				CanH_TxData[0] = SMon_L1ST;
 8002dc8:	781b      	ldrb	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002dca:	4629      	mov	r1, r5
				CanH_TxData[0] = SMon_L1ST;
 8002dcc:	7023      	strb	r3, [r4, #0]
				CanH_TxHeader.DLC = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0x51;
 8002dd2:	2351      	movs	r3, #81	@ 0x51
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002dd4:	4847      	ldr	r0, [pc, #284]	@ (8002ef4 <CanH_MainFunction+0x158>)
				CanH_TxHeader.StdId = 0x51;
 8002dd6:	602b      	str	r3, [r5, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8002f0c <CanH_MainFunction+0x170>)
 8002dda:	f001 f8bf 	bl	8003f5c <HAL_CAN_AddTxMessage>
			else
			{
				/* Do nothing. */
			}

			if(CanH_MainCounter != 0)
 8002dde:	6833      	ldr	r3, [r6, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d15b      	bne.n	8002e9c <CanH_MainFunction+0x100>
				/* Do nothing. */
			}

			if(CanH_MainCounter % 20 == 0)
			{
				CanH_TxData[0] = SMon_ECU_UV;
 8002de4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <CanH_MainFunction+0x174>)
				CanH_TxData[5] = (uint8_t)(SMon_I2TCounter >> 24u);
				CanH_TxData[6] = SMon_CLS_Failure;
				CanH_TxData[7] = SMon_L1_UVStatus;
				CanH_TxHeader.DLC = 8;
				CanH_TxHeader.StdId = 0x6f0;
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002de6:	4947      	ldr	r1, [pc, #284]	@ (8002f04 <CanH_MainFunction+0x168>)
				CanH_TxData[0] = SMon_ECU_UV;
 8002de8:	781b      	ldrb	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002dea:	4842      	ldr	r0, [pc, #264]	@ (8002ef4 <CanH_MainFunction+0x158>)
				CanH_TxData[0] = SMon_ECU_UV;
 8002dec:	7023      	strb	r3, [r4, #0]
				CanH_TxData[1] = SMon_ECU_OV;
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <CanH_MainFunction+0x178>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	7063      	strb	r3, [r4, #1]
				CanH_TxData[2] = (uint8_t)(SMon_I2TCounter);
 8002df4:	4b48      	ldr	r3, [pc, #288]	@ (8002f18 <CanH_MainFunction+0x17c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
				CanH_TxData[3] = (uint8_t)(SMon_I2TCounter >> 8u);
 8002df8:	0a1a      	lsrs	r2, r3, #8
				CanH_TxData[2] = (uint8_t)(SMon_I2TCounter);
 8002dfa:	70a3      	strb	r3, [r4, #2]
				CanH_TxData[3] = (uint8_t)(SMon_I2TCounter >> 8u);
 8002dfc:	70e2      	strb	r2, [r4, #3]
				CanH_TxData[4] = (uint8_t)(SMon_I2TCounter >> 16u);
 8002dfe:	0c1a      	lsrs	r2, r3, #16
				CanH_TxData[5] = (uint8_t)(SMon_I2TCounter >> 24u);
 8002e00:	0e1b      	lsrs	r3, r3, #24
 8002e02:	7163      	strb	r3, [r4, #5]
				CanH_TxData[6] = SMon_CLS_Failure;
 8002e04:	4b45      	ldr	r3, [pc, #276]	@ (8002f1c <CanH_MainFunction+0x180>)
				CanH_TxData[4] = (uint8_t)(SMon_I2TCounter >> 16u);
 8002e06:	7122      	strb	r2, [r4, #4]
				CanH_TxData[6] = SMon_CLS_Failure;
 8002e08:	781b      	ldrb	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002efc <CanH_MainFunction+0x160>)
				CanH_TxData[6] = SMon_CLS_Failure;
 8002e0c:	71a3      	strb	r3, [r4, #6]
				CanH_TxData[7] = SMon_L1_UVStatus;
 8002e0e:	4b44      	ldr	r3, [pc, #272]	@ (8002f20 <CanH_MainFunction+0x184>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	71e3      	strb	r3, [r4, #7]
				CanH_TxHeader.DLC = 8;
 8002e14:	2308      	movs	r3, #8
 8002e16:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0x6f0;
 8002e18:	f44f 63de 	mov.w	r3, #1776	@ 0x6f0
 8002e1c:	602b      	str	r3, [r5, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <CanH_MainFunction+0x170>)
 8002e20:	f001 f89c 	bl	8003f5c <HAL_CAN_AddTxMessage>
				for(uint8_t i = 0; i < 8; i++) CanH_TxData[i] = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	6063      	str	r3, [r4, #4]
				CanH_TxHeader.DLC = 0;
 8002e28:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0;
 8002e2a:	602b      	str	r3, [r5, #0]
			else
			{
				/* Do nothing. */
			}

			if(CanH_MainCounter % 201 == 0)
 8002e2c:	23c9      	movs	r3, #201	@ 0xc9
 8002e2e:	6837      	ldr	r7, [r6, #0]
 8002e30:	fbb7 f2f3 	udiv	r2, r7, r3
 8002e34:	fb03 7712 	mls	r7, r3, r2, r7
 8002e38:	b9df      	cbnz	r7, 8002e72 <CanH_MainFunction+0xd6>
			{
				CanH_TxData[0] = SMon_I2TError;
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f24 <CanH_MainFunction+0x188>)
				CanH_TxData[2] = SMon_RetryCnt;
				CanH_TxData[3] = SMon_WupLineState;
				CanH_TxData[4] = SMon_S2BErrorStatus;
				CanH_TxHeader.DLC = 5;
				CanH_TxHeader.StdId = 0x6f1;
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <CanH_MainFunction+0x160>)
				CanH_TxData[0] = SMon_I2TError;
 8002e3e:	781b      	ldrb	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e40:	4930      	ldr	r1, [pc, #192]	@ (8002f04 <CanH_MainFunction+0x168>)
				CanH_TxData[0] = SMon_I2TError;
 8002e42:	7023      	strb	r3, [r4, #0]
				CanH_TxData[1] = SMon_LockSupply;
 8002e44:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <CanH_MainFunction+0x18c>)
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e46:	482b      	ldr	r0, [pc, #172]	@ (8002ef4 <CanH_MainFunction+0x158>)
				CanH_TxData[1] = SMon_LockSupply;
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	7063      	strb	r3, [r4, #1]
				CanH_TxData[2] = SMon_RetryCnt;
 8002e4c:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <CanH_MainFunction+0x190>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	70a3      	strb	r3, [r4, #2]
				CanH_TxData[3] = SMon_WupLineState;
 8002e52:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <CanH_MainFunction+0x194>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	70e3      	strb	r3, [r4, #3]
				CanH_TxData[4] = SMon_S2BErrorStatus;
 8002e58:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <CanH_MainFunction+0x198>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	7123      	strb	r3, [r4, #4]
				CanH_TxHeader.DLC = 5;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0x6f1;
 8002e62:	f240 63f1 	movw	r3, #1777	@ 0x6f1
 8002e66:	602b      	str	r3, [r5, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e68:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <CanH_MainFunction+0x170>)
 8002e6a:	f001 f877 	bl	8003f5c <HAL_CAN_AddTxMessage>
				for(uint8_t i = 0; i < 8; i++) CanH_TxData[i] = 0;
				CanH_TxHeader.DLC = 0;
 8002e6e:	612f      	str	r7, [r5, #16]
				CanH_TxHeader.StdId = 0;
 8002e70:	602f      	str	r7, [r5, #0]
	else
	{
		/* Do nothing. */
	}

	if(58u <= CanH_NoCommCounter)
 8002e72:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <CanH_MainFunction+0x19c>)
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	2b39      	cmp	r3, #57	@ 0x39
	else
	{
		/* Do nothing. */
	}

	CanH_NoCommCounter++;
 8002e78:	f103 0301 	add.w	r3, r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
	CanH_MainCounter++;

	CanH_MainCounter++;
 8002e7e:	6833      	ldr	r3, [r6, #0]
		CanH_CommunicationState = NO_COMMUNICATION;
 8002e80:	bf88      	it	hi
 8002e82:	2001      	movhi	r0, #1
	CanH_MainCounter++;
 8002e84:	f103 0302 	add.w	r3, r3, #2
 8002e88:	6033      	str	r3, [r6, #0]

	for(uint8_t i = 0; i < 8; i++)
	{
		CanH_TxData[i] = 0;
 8002e8a:	f04f 0300 	mov.w	r3, #0
		CanH_CommunicationState = NO_COMMUNICATION;
 8002e8e:	bf88      	it	hi
 8002e90:	491b      	ldrhi	r1, [pc, #108]	@ (8002f00 <CanH_MainFunction+0x164>)
		CanH_TxData[i] = 0;
 8002e92:	6023      	str	r3, [r4, #0]
		CanH_CommunicationState = NO_COMMUNICATION;
 8002e94:	bf88      	it	hi
 8002e96:	7008      	strbhi	r0, [r1, #0]
		CanH_TxData[i] = 0;
 8002e98:	6063      	str	r3, [r4, #4]
	}
}
 8002e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				CanH_TxData[0] = (uint8_t)(SMon_ISenseL1);
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <CanH_MainFunction+0x1a0>)
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002e9e:	4919      	ldr	r1, [pc, #100]	@ (8002f04 <CanH_MainFunction+0x168>)
				CanH_TxData[0] = (uint8_t)(SMon_ISenseL1);
 8002ea0:	681b      	ldr	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002ea2:	4814      	ldr	r0, [pc, #80]	@ (8002ef4 <CanH_MainFunction+0x158>)
				CanH_TxData[1] = (uint8_t)(SMon_ISenseL1 >> 8u);
 8002ea4:	0a1a      	lsrs	r2, r3, #8
				CanH_TxData[0] = (uint8_t)(SMon_ISenseL1);
 8002ea6:	7023      	strb	r3, [r4, #0]
				CanH_TxData[1] = (uint8_t)(SMon_ISenseL1 >> 8u);
 8002ea8:	7062      	strb	r2, [r4, #1]
				CanH_TxData[2] = (uint8_t)(SMon_ISenseL1 >> 16u);
 8002eaa:	0c1a      	lsrs	r2, r3, #16
				CanH_TxData[3] = (uint8_t)(SMon_ISenseL1 >> 24u);
 8002eac:	0e1b      	lsrs	r3, r3, #24
 8002eae:	70e3      	strb	r3, [r4, #3]
				CanH_TxData[4] = (uint8_t)(SMon_VfbT30);
 8002eb0:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <CanH_MainFunction+0x1a4>)
				CanH_TxData[2] = (uint8_t)(SMon_ISenseL1 >> 16u);
 8002eb2:	70a2      	strb	r2, [r4, #2]
				CanH_TxData[4] = (uint8_t)(SMon_VfbT30);
 8002eb4:	881b      	ldrh	r3, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002eb6:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <CanH_MainFunction+0x160>)
				CanH_TxData[4] = (uint8_t)(SMon_VfbT30);
 8002eb8:	7123      	strb	r3, [r4, #4]
				CanH_TxData[5] = (uint8_t)(SMon_VfbT30 >> 8u);
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	7163      	strb	r3, [r4, #5]
				CanH_TxData[6] = (uint8_t)(SMon_VfbL1);
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <CanH_MainFunction+0x1a8>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	71a3      	strb	r3, [r4, #6]
				CanH_TxData[7] = (uint8_t)(SMon_VfbL1 >> 8u);
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	71e3      	strb	r3, [r4, #7]
				CanH_TxHeader.DLC = 8;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0x6ef;
 8002ecc:	f240 63ef 	movw	r3, #1775	@ 0x6ef
 8002ed0:	602b      	str	r3, [r5, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <CanH_MainFunction+0x170>)
 8002ed4:	f001 f842 	bl	8003f5c <HAL_CAN_AddTxMessage>
				for(uint8_t i = 0; i < 8; i++) CanH_TxData[i] = 0;
 8002ed8:	2300      	movs	r3, #0
				CanH_TxHeader.StdId = 0;
 8002eda:	2214      	movs	r2, #20
				for(uint8_t i = 0; i < 8; i++) CanH_TxData[i] = 0;
 8002edc:	6063      	str	r3, [r4, #4]
				CanH_TxHeader.DLC = 0;
 8002ede:	612b      	str	r3, [r5, #16]
				CanH_TxHeader.StdId = 0;
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	6833      	ldr	r3, [r6, #0]
 8002ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ee8:	fb02 3311 	mls	r3, r2, r1, r3
			if(CanH_MainCounter % 20 == 0)
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d19d      	bne.n	8002e2c <CanH_MainFunction+0x90>
 8002ef0:	e778      	b.n	8002de4 <CanH_MainFunction+0x48>
 8002ef2:	bf00      	nop
 8002ef4:	20001bb4 	.word	0x20001bb4
 8002ef8:	20000d40 	.word	0x20000d40
 8002efc:	20000cfc 	.word	0x20000cfc
 8002f00:	20000007 	.word	0x20000007
 8002f04:	20000d04 	.word	0x20000d04
 8002f08:	20000ce6 	.word	0x20000ce6
 8002f0c:	20000cf8 	.word	0x20000cf8
 8002f10:	20000ceb 	.word	0x20000ceb
 8002f14:	20000cea 	.word	0x20000cea
 8002f18:	20000ce0 	.word	0x20000ce0
 8002f1c:	20000cec 	.word	0x20000cec
 8002f20:	20000ced 	.word	0x20000ced
 8002f24:	20000cee 	.word	0x20000cee
 8002f28:	20000ce4 	.word	0x20000ce4
 8002f2c:	20000ce5 	.word	0x20000ce5
 8002f30:	20000ce9 	.word	0x20000ce9
 8002f34:	20000cef 	.word	0x20000cef
 8002f38:	20000cf4 	.word	0x20000cf4
 8002f3c:	200000dc 	.word	0x200000dc
 8002f40:	20000002 	.word	0x20000002
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f48:	b570      	push	{r4, r5, r6, lr}
	if(1u == EcuM_SleeModeActive)
 8002f4a:	4b27      	ldr	r3, [pc, #156]	@ (8002fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
{
 8002f4c:	4606      	mov	r6, r0
	if(1u == EcuM_SleeModeActive)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4d26      	ldr	r5, [pc, #152]	@ (8002fec <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	4c26      	ldr	r4, [pc, #152]	@ (8002ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8002f56:	d112      	bne.n	8002f7e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanH_RxHeader, CanH_RxData);
 8002f58:	462b      	mov	r3, r5
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	f001 f84f 	bl	8004000 <HAL_CAN_GetRxMessage>

		if(0x3FF == CanH_RxHeader.StdId)
 8002f62:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		{
			if(0x12 == CanH_RxData[0])
 8002f6c:	782b      	ldrb	r3, [r5, #0]
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d103      	bne.n	8002f7a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			{
				EcuM_PerformReset(0,0);
 8002f72:	2100      	movs	r1, #0
 8002f74:	4608      	mov	r0, r1
 8002f76:	f000 fae5 	bl	8003544 <EcuM_PerformReset>
		else
		{
			/* Do nothing. */
		}

		HAL_PWR_EnableSleepOnExit();
 8002f7a:	f001 fe11 	bl	8004ba0 <HAL_PWR_EnableSleepOnExit>
	else
	{
		/* Do nothing. */
	}
	/* Pending and full callback to prevent messages being lost. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanH_RxHeader, CanH_RxData);
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8002f80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8002f82:	2100      	movs	r1, #0
 8002f84:	4630      	mov	r0, r6
 8002f86:	f001 f83b 	bl	8004000 <HAL_CAN_GetRxMessage>

	if(0x3ff == CanH_RxHeader.StdId)
 8002f8a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d115      	bne.n	8002fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
	{
		if(0x12 == CanH_RxData[0])
 8002f94:	782b      	ldrb	r3, [r5, #0]
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d107      	bne.n	8002faa <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		{
			CanH_RequestBusSleep = 0;
 8002f9a:	2300      	movs	r3, #0
			CanH_CommunicationState = FULL_COMMUNICATION;
 8002f9c:	2102      	movs	r1, #2
			CanH_RequestBusSleep = 0;
 8002f9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8002fa0:	7013      	strb	r3, [r2, #0]
			CanH_CommunicationState = FULL_COMMUNICATION;
 8002fa2:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8002fa4:	7011      	strb	r1, [r2, #0]
			CanH_NoCommCounter = 0;
 8002fa6:	4a15      	ldr	r2, [pc, #84]	@ (8002ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8002fa8:	6013      	str	r3, [r2, #0]
	else
	{
		/* Do nothing. */
	}

	CanH_RxHeader.DLC = 0;
 8002faa:	2300      	movs	r3, #0
	CanH_RxHeader.ExtId = 0;
	CanH_RxHeader.FilterMatchIndex = 0;
	CanH_RxHeader.IDE = 0;
	CanH_RxHeader.RTR = 0;
 8002fac:	e9c4 3302 	strd	r3, r3, [r4, #8]
	CanH_RxHeader.DLC = 0;
 8002fb0:	6123      	str	r3, [r4, #16]
	CanH_RxHeader.ExtId = 0;
 8002fb2:	6063      	str	r3, [r4, #4]
	CanH_RxHeader.FilterMatchIndex = 0;
 8002fb4:	61a3      	str	r3, [r4, #24]
	CanH_RxHeader.StdId = 0;
 8002fb6:	6023      	str	r3, [r4, #0]
	CanH_RxHeader.Timestamp = 0;
 8002fb8:	6163      	str	r3, [r4, #20]

	for(uint8_t i = 0; i < 8; i++)
	{
		CanH_RxData[i] = 0;
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	606b      	str	r3, [r5, #4]
	}
}
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
	if(0x50u == CanH_RxHeader.StdId)
 8002fc0:	2b50      	cmp	r3, #80	@ 0x50
 8002fc2:	d103      	bne.n	8002fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
		SMon_CmdStat = CanH_RxData[0];
 8002fc4:	782a      	ldrb	r2, [r5, #0]
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002fc8:	701a      	strb	r2, [r3, #0]
	if(0x702 == CanH_RxHeader.StdId)
 8002fca:	e7ee      	b.n	8002faa <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8002fcc:	f240 7202 	movw	r2, #1794	@ 0x702
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d1ea      	bne.n	8002faa <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		Dcm_DiagRxHeader.StdId = CanH_RxHeader.StdId;
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003004 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002fd6:	6013      	str	r3, [r2, #0]
		Dcm_DiagRxHeader.DLC = CanH_RxHeader.DLC;
 8002fd8:	6923      	ldr	r3, [r4, #16]
 8002fda:	6113      	str	r3, [r2, #16]
			Dcm_RxData[i] = CanH_RxData[i];
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002fde:	682b      	ldr	r3, [r5, #0]
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	686b      	ldr	r3, [r5, #4]
 8002fe4:	6053      	str	r3, [r2, #4]
 8002fe6:	e7e0      	b.n	8002faa <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8002fe8:	20000d94 	.word	0x20000d94
 8002fec:	20000d1c 	.word	0x20000d1c
 8002ff0:	20000d24 	.word	0x20000d24
 8002ff4:	20000cf0 	.word	0x20000cf0
 8002ff8:	20000007 	.word	0x20000007
 8002ffc:	20000cf4 	.word	0x20000cf4
 8003000:	20000006 	.word	0x20000006
 8003004:	20000d6c 	.word	0x20000d6c
 8003008:	20000d64 	.word	0x20000d64

0800300c <Dcm_SendHistogramISO_TP>:
	Dcm_SendHistogramISO_TP(SMon_Hist_VfbT30_ms);
	Dcm_SendHistogramISO_TP(SMon_Hist_VfbL1_ms);
}

void Dcm_SendHistogramISO_TP(uint32_t *hist_array)
{
 800300c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003010:	4605      	mov	r5, r0
	uint16_t byte_index = 0;
 8003012:	2400      	movs	r4, #0
			byte_index++;
			dlc++;
		}

		// Set PCI byte for first frame / consecutive frame
		Dcm_TxData[0] = 0x20; // Consecutive frame PCI
 8003014:	4e1a      	ldr	r6, [pc, #104]	@ (8003080 <Dcm_SendHistogramISO_TP+0x74>)
		for(uint8_t j=0; j<dlc; j++)
		{
			Dcm_TxData[j+1] = frame_data[j];
		}

		Dcm_DiagTxHeader.DLC = 8u;
 8003016:	4f1b      	ldr	r7, [pc, #108]	@ (8003084 <Dcm_SendHistogramISO_TP+0x78>)
			Dcm_TxData[j+1] = frame_data[j];
 8003018:	f106 0801 	add.w	r8, r6, #1
 800301c:	46ec      	mov	ip, sp
		dlc = 0;
 800301e:	2200      	movs	r2, #0
 8003020:	4661      	mov	r1, ip
			uint32_t bin_val = hist_array[byte_index / HIST_BYTES_PER_BIN];
 8003022:	08a3      	lsrs	r3, r4, #2
			frame_data[i] = (bin_val >> ((byte_index % 4)*8)) & 0xFF;
 8003024:	f004 0003 	and.w	r0, r4, #3
 8003028:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			dlc++;
 800302c:	3201      	adds	r2, #1
			frame_data[i] = (bin_val >> ((byte_index % 4)*8)) & 0xFF;
 800302e:	00c0      	lsls	r0, r0, #3
			dlc++;
 8003030:	b2d2      	uxtb	r2, r2
			frame_data[i] = (bin_val >> ((byte_index % 4)*8)) & 0xFF;
 8003032:	40c3      	lsrs	r3, r0
			byte_index++;
 8003034:	3401      	adds	r4, #1
		for(uint8_t i=0; i<ISO_TP_MAX_FRAME_DATA && byte_index < HIST_TOTAL_BYTES; i++)
 8003036:	2a07      	cmp	r2, #7
			frame_data[i] = (bin_val >> ((byte_index % 4)*8)) & 0xFF;
 8003038:	f80c 3b01 	strb.w	r3, [ip], #1
			byte_index++;
 800303c:	b2a4      	uxth	r4, r4
		for(uint8_t i=0; i<ISO_TP_MAX_FRAME_DATA && byte_index < HIST_TOTAL_BYTES; i++)
 800303e:	d002      	beq.n	8003046 <Dcm_SendHistogramISO_TP+0x3a>
 8003040:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8003044:	d1ed      	bne.n	8003022 <Dcm_SendHistogramISO_TP+0x16>
		Dcm_TxData[0] = 0x20; // Consecutive frame PCI
 8003046:	2320      	movs	r3, #32
			Dcm_TxData[j+1] = frame_data[j];
 8003048:	4640      	mov	r0, r8
		Dcm_TxData[0] = 0x20; // Consecutive frame PCI
 800304a:	7033      	strb	r3, [r6, #0]
			Dcm_TxData[j+1] = frame_data[j];
 800304c:	f005 fab2 	bl	80085b4 <memcpy>
		Dcm_DiagTxHeader.DLC = 8u;
 8003050:	2308      	movs	r3, #8
 8003052:	613b      	str	r3, [r7, #16]
		Dcm_DiagTxHeader.StdId = 0x703u;
 8003054:	f240 7303 	movw	r3, #1795	@ 0x703
		while(0u == HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox));
 8003058:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 8003088 <Dcm_SendHistogramISO_TP+0x7c>
		Dcm_DiagTxHeader.StdId = 0x703u;
 800305c:	603b      	str	r3, [r7, #0]
		while(0u == HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox));
 800305e:	464b      	mov	r3, r9
 8003060:	4632      	mov	r2, r6
 8003062:	4639      	mov	r1, r7
 8003064:	4809      	ldr	r0, [pc, #36]	@ (800308c <Dcm_SendHistogramISO_TP+0x80>)
 8003066:	f000 ff79 	bl	8003f5c <HAL_CAN_AddTxMessage>
 800306a:	2800      	cmp	r0, #0
 800306c:	d0f7      	beq.n	800305e <Dcm_SendHistogramISO_TP+0x52>
		HAL_Delay(1);
 800306e:	2001      	movs	r0, #1
 8003070:	f000 fab6 	bl	80035e0 <HAL_Delay>
	while(byte_index < HIST_TOTAL_BYTES)
 8003074:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8003078:	d1d0      	bne.n	800301c <Dcm_SendHistogramISO_TP+0x10>
	}
}
 800307a:	b003      	add	sp, #12
 800307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003080:	20000d5c 	.word	0x20000d5c
 8003084:	20000d44 	.word	0x20000d44
 8003088:	20000d88 	.word	0x20000d88
 800308c:	20001bb4 	.word	0x20001bb4

08003090 <Dcm_RC_ReadHistograms>:
{
 8003090:	b508      	push	{r3, lr}
	Dcm_SendHistogramISO_TP(SMon_Hist_ISenseL1_ms);
 8003092:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <Dcm_RC_ReadHistograms+0x18>)
 8003094:	f7ff ffba 	bl	800300c <Dcm_SendHistogramISO_TP>
	Dcm_SendHistogramISO_TP(SMon_Hist_VfbT30_ms);
 8003098:	4804      	ldr	r0, [pc, #16]	@ (80030ac <Dcm_RC_ReadHistograms+0x1c>)
 800309a:	f7ff ffb7 	bl	800300c <Dcm_SendHistogramISO_TP>
}
 800309e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Dcm_SendHistogramISO_TP(SMon_Hist_VfbL1_ms);
 80030a2:	4803      	ldr	r0, [pc, #12]	@ (80030b0 <Dcm_RC_ReadHistograms+0x20>)
 80030a4:	f7ff bfb2 	b.w	800300c <Dcm_SendHistogramISO_TP>
 80030a8:	200008e0 	.word	0x200008e0
 80030ac:	200004e0 	.word	0x200004e0
 80030b0:	200000e0 	.word	0x200000e0

080030b4 <Dcm_ProgrammingSession>:

void Dcm_ProgrammingSession()
{
 80030b4:	b508      	push	{r3, lr}
	Dcm_TxData[0u] = Dcm_RxData[0u];
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <Dcm_ProgrammingSession+0x54>)
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <Dcm_ProgrammingSession+0x58>)
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
	Dcm_TxData[2u] = Dcm_RxData[2u];
	Dcm_TxData[3u] = Dcm_RxData[3u];
 80030ba:	78d8      	ldrb	r0, [r3, #3]
	Dcm_TxData[0u] = Dcm_RxData[0u];
 80030bc:	7819      	ldrb	r1, [r3, #0]
	Dcm_TxData[3u] = Dcm_RxData[3u];
 80030be:	70d0      	strb	r0, [r2, #3]
	Dcm_TxData[4u] = Dcm_RxData[4u];
 80030c0:	7918      	ldrb	r0, [r3, #4]
	Dcm_TxData[0u] = Dcm_RxData[0u];
 80030c2:	7011      	strb	r1, [r2, #0]
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 80030c4:	7859      	ldrb	r1, [r3, #1]
	Dcm_TxData[4u] = Dcm_RxData[4u];
 80030c6:	7110      	strb	r0, [r2, #4]
	Dcm_TxData[5u] = Dcm_RxData[5u];
 80030c8:	7958      	ldrb	r0, [r3, #5]
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 80030ca:	3140      	adds	r1, #64	@ 0x40
 80030cc:	7051      	strb	r1, [r2, #1]
	Dcm_TxData[5u] = Dcm_RxData[5u];
 80030ce:	7150      	strb	r0, [r2, #5]
	Dcm_TxData[2u] = Dcm_RxData[2u];
 80030d0:	7899      	ldrb	r1, [r3, #2]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 80030d2:	7998      	ldrb	r0, [r3, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 80030d4:	79db      	ldrb	r3, [r3, #7]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 80030d6:	7190      	strb	r0, [r2, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 80030d8:	71d3      	strb	r3, [r2, #7]
	Dcm_ActiveSessionState = Dcm_RxData[2u];
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <Dcm_ProgrammingSession+0x5c>)
	Dcm_TxData[2u] = Dcm_RxData[2u];
 80030dc:	7091      	strb	r1, [r2, #2]
	Dcm_ActiveSessionState = Dcm_RxData[2u];
 80030de:	6019      	str	r1, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <Dcm_ProgrammingSession+0x60>)
 80030e2:	490d      	ldr	r1, [pc, #52]	@ (8003118 <Dcm_ProgrammingSession+0x64>)
 80030e4:	6918      	ldr	r0, [r3, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 80030e6:	681b      	ldr	r3, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 80030e8:	6108      	str	r0, [r1, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 80030ea:	3301      	adds	r3, #1
 80030ec:	600b      	str	r3, [r1, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80030ee:	480b      	ldr	r0, [pc, #44]	@ (800311c <Dcm_ProgrammingSession+0x68>)
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <Dcm_ProgrammingSession+0x6c>)
 80030f2:	f000 ff33 	bl	8003f5c <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f000 fa72 	bl	80035e0 <HAL_Delay>
	EcuM_PerformReset(0u, 0u);
}
 80030fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EcuM_PerformReset(0u, 0u);
 8003100:	2100      	movs	r1, #0
 8003102:	4608      	mov	r0, r1
 8003104:	f000 ba1e 	b.w	8003544 <EcuM_PerformReset>
 8003108:	20000d64 	.word	0x20000d64
 800310c:	20000d5c 	.word	0x20000d5c
 8003110:	20004c00 	.word	0x20004c00
 8003114:	20000d6c 	.word	0x20000d6c
 8003118:	20000d44 	.word	0x20000d44
 800311c:	20001bb4 	.word	0x20001bb4
 8003120:	20000d88 	.word	0x20000d88

08003124 <Dcm_SendNrc>:

void Dcm_SendNrc()
{
	Dcm_TxData[0u] = 0x03;
 8003124:	2303      	movs	r3, #3
 8003126:	4a0e      	ldr	r2, [pc, #56]	@ (8003160 <Dcm_SendNrc+0x3c>)
 8003128:	7013      	strb	r3, [r2, #0]
	Dcm_TxData[1u] = 0x7f;
 800312a:	237f      	movs	r3, #127	@ 0x7f
 800312c:	7053      	strb	r3, [r2, #1]
	Dcm_TxData[2u] = 0x19;
 800312e:	2319      	movs	r3, #25
 8003130:	7093      	strb	r3, [r2, #2]
	Dcm_TxData[3u] = 0x22;
 8003132:	2322      	movs	r3, #34	@ 0x22
 8003134:	70d3      	strb	r3, [r2, #3]
	Dcm_TxData[4u] = Dcm_RxData[4u];
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <Dcm_SendNrc+0x40>)
 8003138:	7919      	ldrb	r1, [r3, #4]
 800313a:	7111      	strb	r1, [r2, #4]
	Dcm_TxData[5u] = Dcm_RxData[5u];
 800313c:	7959      	ldrb	r1, [r3, #5]
 800313e:	7151      	strb	r1, [r2, #5]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 8003140:	7999      	ldrb	r1, [r3, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 8003142:	79db      	ldrb	r3, [r3, #7]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 8003144:	7191      	strb	r1, [r2, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 8003146:	71d3      	strb	r3, [r2, #7]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003148:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <Dcm_SendNrc+0x44>)
 800314a:	4908      	ldr	r1, [pc, #32]	@ (800316c <Dcm_SendNrc+0x48>)
 800314c:	6918      	ldr	r0, [r3, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 800314e:	681b      	ldr	r3, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003150:	6108      	str	r0, [r1, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 8003152:	3301      	adds	r3, #1
 8003154:	600b      	str	r3, [r1, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8003156:	4806      	ldr	r0, [pc, #24]	@ (8003170 <Dcm_SendNrc+0x4c>)
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <Dcm_SendNrc+0x50>)
 800315a:	f000 beff 	b.w	8003f5c <HAL_CAN_AddTxMessage>
 800315e:	bf00      	nop
 8003160:	20000d5c 	.word	0x20000d5c
 8003164:	20000d64 	.word	0x20000d64
 8003168:	20000d6c 	.word	0x20000d6c
 800316c:	20000d44 	.word	0x20000d44
 8003170:	20001bb4 	.word	0x20001bb4
 8003174:	20000d88 	.word	0x20000d88

08003178 <Dcm_HardReset>:
}

void Dcm_HardReset()
{
 8003178:	b508      	push	{r3, lr}
	Dcm_TxData[0u] = Dcm_RxData[0u];
 800317a:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <Dcm_HardReset+0x50>)
 800317c:	4a13      	ldr	r2, [pc, #76]	@ (80031cc <Dcm_HardReset+0x54>)
 800317e:	7819      	ldrb	r1, [r3, #0]
 8003180:	7011      	strb	r1, [r2, #0]
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 8003182:	7859      	ldrb	r1, [r3, #1]
 8003184:	3140      	adds	r1, #64	@ 0x40
 8003186:	7051      	strb	r1, [r2, #1]
	Dcm_TxData[2u] = Dcm_RxData[2u];
 8003188:	7899      	ldrb	r1, [r3, #2]
 800318a:	7091      	strb	r1, [r2, #2]
	Dcm_TxData[3u] = Dcm_RxData[3u];
 800318c:	78d9      	ldrb	r1, [r3, #3]
 800318e:	70d1      	strb	r1, [r2, #3]
	Dcm_TxData[4u] = Dcm_RxData[4u];
 8003190:	7919      	ldrb	r1, [r3, #4]
 8003192:	7111      	strb	r1, [r2, #4]
	Dcm_TxData[5u] = Dcm_RxData[5u];
 8003194:	7959      	ldrb	r1, [r3, #5]
 8003196:	7151      	strb	r1, [r2, #5]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 8003198:	7999      	ldrb	r1, [r3, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 800319a:	79db      	ldrb	r3, [r3, #7]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 800319c:	7191      	strb	r1, [r2, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 800319e:	71d3      	strb	r3, [r2, #7]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <Dcm_HardReset+0x58>)
 80031a2:	490c      	ldr	r1, [pc, #48]	@ (80031d4 <Dcm_HardReset+0x5c>)
 80031a4:	6918      	ldr	r0, [r3, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 80031a6:	681b      	ldr	r3, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 80031a8:	6108      	str	r0, [r1, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 80031aa:	3301      	adds	r3, #1
 80031ac:	600b      	str	r3, [r1, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80031ae:	480a      	ldr	r0, [pc, #40]	@ (80031d8 <Dcm_HardReset+0x60>)
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <Dcm_HardReset+0x64>)
 80031b2:	f000 fed3 	bl	8003f5c <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f000 fa12 	bl	80035e0 <HAL_Delay>
	EcuM_PerformReset(0u, 0u);
}
 80031bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EcuM_PerformReset(0u, 0u);
 80031c0:	2100      	movs	r1, #0
 80031c2:	4608      	mov	r0, r1
 80031c4:	f000 b9be 	b.w	8003544 <EcuM_PerformReset>
 80031c8:	20000d64 	.word	0x20000d64
 80031cc:	20000d5c 	.word	0x20000d5c
 80031d0:	20000d6c 	.word	0x20000d6c
 80031d4:	20000d44 	.word	0x20000d44
 80031d8:	20001bb4 	.word	0x20001bb4
 80031dc:	20000d88 	.word	0x20000d88

080031e0 <Dcm_ReadSWV>:

void Dcm_ReadSWV()
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
	Dcm_TxData[0u] = Dcm_RxData[0u] + 4u;
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <Dcm_ReadSWV+0x58>)
 80031e4:	4c15      	ldr	r4, [pc, #84]	@ (800323c <Dcm_ReadSWV+0x5c>)
 80031e6:	781a      	ldrb	r2, [r3, #0]
	Dcm_TxData[3u] = Dcm_RxData[3u];
	Dcm_TxData[4u] = Dcm_SWV[0u];
	Dcm_TxData[5u] = Dcm_SWV[1u];
	Dcm_TxData[6u] = Dcm_SWV[2u];
	Dcm_TxData[7u] = Dcm_SWV[3u];
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 80031e8:	4d15      	ldr	r5, [pc, #84]	@ (8003240 <Dcm_ReadSWV+0x60>)
	Dcm_TxData[0u] = Dcm_RxData[0u] + 4u;
 80031ea:	3204      	adds	r2, #4
 80031ec:	7022      	strb	r2, [r4, #0]
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 80031ee:	785a      	ldrb	r2, [r3, #1]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
	while(0 == HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox));
 80031f0:	4e14      	ldr	r6, [pc, #80]	@ (8003244 <Dcm_ReadSWV+0x64>)
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 80031f2:	3240      	adds	r2, #64	@ 0x40
 80031f4:	7062      	strb	r2, [r4, #1]
	Dcm_TxData[2u] = Dcm_RxData[2u];
 80031f6:	789a      	ldrb	r2, [r3, #2]
	Dcm_TxData[3u] = Dcm_RxData[3u];
 80031f8:	78db      	ldrb	r3, [r3, #3]
	Dcm_TxData[2u] = Dcm_RxData[2u];
 80031fa:	70a2      	strb	r2, [r4, #2]
	Dcm_TxData[3u] = Dcm_RxData[3u];
 80031fc:	70e3      	strb	r3, [r4, #3]
	Dcm_TxData[4u] = Dcm_SWV[0u];
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <Dcm_ReadSWV+0x68>)
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	7122      	strb	r2, [r4, #4]
	Dcm_TxData[5u] = Dcm_SWV[1u];
 8003204:	785a      	ldrb	r2, [r3, #1]
 8003206:	7162      	strb	r2, [r4, #5]
	Dcm_TxData[6u] = Dcm_SWV[2u];
 8003208:	789a      	ldrb	r2, [r3, #2]
	Dcm_TxData[7u] = Dcm_SWV[3u];
 800320a:	78db      	ldrb	r3, [r3, #3]
	Dcm_TxData[6u] = Dcm_SWV[2u];
 800320c:	71a2      	strb	r2, [r4, #6]
	Dcm_TxData[7u] = Dcm_SWV[3u];
 800320e:	71e3      	strb	r3, [r4, #7]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <Dcm_ReadSWV+0x6c>)
 8003212:	691a      	ldr	r2, [r3, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 8003214:	681b      	ldr	r3, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003216:	612a      	str	r2, [r5, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 8003218:	3301      	adds	r3, #1
 800321a:	602b      	str	r3, [r5, #0]
	while(0 == HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox));
 800321c:	4633      	mov	r3, r6
 800321e:	4622      	mov	r2, r4
 8003220:	4629      	mov	r1, r5
 8003222:	480b      	ldr	r0, [pc, #44]	@ (8003250 <Dcm_ReadSWV+0x70>)
 8003224:	f000 fe9a 	bl	8003f5c <HAL_CAN_AddTxMessage>
 8003228:	2800      	cmp	r0, #0
 800322a:	d0f7      	beq.n	800321c <Dcm_ReadSWV+0x3c>
	for(uint8_t i = 0; i < 8; i++) Dcm_TxData[i] = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	6063      	str	r3, [r4, #4]
	Dcm_DiagTxHeader.DLC = 0;
 8003232:	612b      	str	r3, [r5, #16]
	Dcm_DiagTxHeader.StdId = 0;
 8003234:	602b      	str	r3, [r5, #0]
}
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	20000d64 	.word	0x20000d64
 800323c:	20000d5c 	.word	0x20000d5c
 8003240:	20000d44 	.word	0x20000d44
 8003244:	20000d88 	.word	0x20000d88
 8003248:	20000008 	.word	0x20000008
 800324c:	20000d6c 	.word	0x20000d6c
 8003250:	20001bb4 	.word	0x20001bb4

08003254 <Dcm_RC_HealSupply>:

void Dcm_RC_HealSupply()
{
 8003254:	b570      	push	{r4, r5, r6, lr}
	SMon_RetryCnt = 0u;
 8003256:	2500      	movs	r5, #0
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <Dcm_RC_HealSupply+0x58>)
	SMon_LockSupply = 0u;
	Dcm_TxData[0u] = Dcm_RxData[0u];
 800325a:	4c15      	ldr	r4, [pc, #84]	@ (80032b0 <Dcm_RC_HealSupply+0x5c>)
	SMon_RetryCnt = 0u;
 800325c:	701d      	strb	r5, [r3, #0]
	SMon_LockSupply = 0u;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <Dcm_RC_HealSupply+0x60>)
	Dcm_TxData[3u] = Dcm_RxData[3u];
	Dcm_TxData[4u] = Dcm_RxData[4u];
	Dcm_TxData[5u] = Dcm_RxData[5u];
	Dcm_TxData[6u] = Dcm_RxData[6u];
	Dcm_TxData[7u] = Dcm_RxData[7u];
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003260:	4e15      	ldr	r6, [pc, #84]	@ (80032b8 <Dcm_RC_HealSupply+0x64>)
	SMon_LockSupply = 0u;
 8003262:	701d      	strb	r5, [r3, #0]
	Dcm_TxData[0u] = Dcm_RxData[0u];
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <Dcm_RC_HealSupply+0x68>)
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8003266:	4631      	mov	r1, r6
	Dcm_TxData[0u] = Dcm_RxData[0u];
 8003268:	781a      	ldrb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 800326a:	4815      	ldr	r0, [pc, #84]	@ (80032c0 <Dcm_RC_HealSupply+0x6c>)
	Dcm_TxData[0u] = Dcm_RxData[0u];
 800326c:	7022      	strb	r2, [r4, #0]
	Dcm_TxData[1u] = Dcm_RxData[1u] + 0x40u;
 800326e:	785a      	ldrb	r2, [r3, #1]
 8003270:	3240      	adds	r2, #64	@ 0x40
 8003272:	7062      	strb	r2, [r4, #1]
	Dcm_TxData[2u] = Dcm_RxData[2u];
 8003274:	789a      	ldrb	r2, [r3, #2]
 8003276:	70a2      	strb	r2, [r4, #2]
	Dcm_TxData[3u] = Dcm_RxData[3u];
 8003278:	78da      	ldrb	r2, [r3, #3]
 800327a:	70e2      	strb	r2, [r4, #3]
	Dcm_TxData[4u] = Dcm_RxData[4u];
 800327c:	791a      	ldrb	r2, [r3, #4]
 800327e:	7122      	strb	r2, [r4, #4]
	Dcm_TxData[5u] = Dcm_RxData[5u];
 8003280:	795a      	ldrb	r2, [r3, #5]
 8003282:	7162      	strb	r2, [r4, #5]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 8003284:	799a      	ldrb	r2, [r3, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 8003286:	79db      	ldrb	r3, [r3, #7]
	Dcm_TxData[6u] = Dcm_RxData[6u];
 8003288:	71a2      	strb	r2, [r4, #6]
	Dcm_TxData[7u] = Dcm_RxData[7u];
 800328a:	71e3      	strb	r3, [r4, #7]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 800328c:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <Dcm_RC_HealSupply+0x70>)
 800328e:	691a      	ldr	r2, [r3, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 8003290:	681b      	ldr	r3, [r3, #0]
	Dcm_DiagTxHeader.DLC = Dcm_DiagRxHeader.DLC;
 8003292:	6132      	str	r2, [r6, #16]
	Dcm_DiagTxHeader.StdId = Dcm_DiagRxHeader.StdId + 0x01u;
 8003294:	3301      	adds	r3, #1
 8003296:	6033      	str	r3, [r6, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_DiagTxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8003298:	4622      	mov	r2, r4
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <Dcm_RC_HealSupply+0x74>)
 800329c:	f000 fe5e 	bl	8003f5c <HAL_CAN_AddTxMessage>
	for(uint8_t i = 0; i < 8; i++) Dcm_TxData[i] = 0;
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	6065      	str	r5, [r4, #4]
	Dcm_DiagTxHeader.DLC = 0;
 80032a4:	6135      	str	r5, [r6, #16]
	Dcm_DiagTxHeader.StdId = 0;
 80032a6:	6035      	str	r5, [r6, #0]
}
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	bf00      	nop
 80032ac:	20000ce5 	.word	0x20000ce5
 80032b0:	20000d5c 	.word	0x20000d5c
 80032b4:	20000ce4 	.word	0x20000ce4
 80032b8:	20000d44 	.word	0x20000d44
 80032bc:	20000d64 	.word	0x20000d64
 80032c0:	20001bb4 	.word	0x20001bb4
 80032c4:	20000d6c 	.word	0x20000d6c
 80032c8:	20000d88 	.word	0x20000d88

080032cc <Dcm_main>:

void Dcm_main()
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
	if(0u == Dcm_MainCounter)
 80032ce:	4d22      	ldr	r5, [pc, #136]	@ (8003358 <Dcm_main+0x8c>)
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b90b      	cbnz	r3, 80032d8 <Dcm_main+0xc>
	{
		Dcm_ActiveSessionState = 0u;
 80032d4:	4a21      	ldr	r2, [pc, #132]	@ (800335c <Dcm_main+0x90>)
 80032d6:	6013      	str	r3, [r2, #0]
	else
	{
		/* Do nothing. */
	}

	if(0x02 == Dcm_RxData[2u] && 0u == SMon_CmdStat)
 80032d8:	4c21      	ldr	r4, [pc, #132]	@ (8003360 <Dcm_main+0x94>)
 80032da:	78a3      	ldrb	r3, [r4, #2]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d104      	bne.n	80032ea <Dcm_main+0x1e>
 80032e0:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <Dcm_main+0x98>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	bb73      	cbnz	r3, 8003344 <Dcm_main+0x78>
	{
		Dcm_ProgrammingSession();
 80032e6:	f7ff fee5 	bl	80030b4 <Dcm_ProgrammingSession>
	else
	{
		/* Do nothing. */
	}

	if(0x11u == Dcm_RxData[1u] && 0x01u == Dcm_RxData[2u] && 0u == SMon_CmdStat)
 80032ea:	7862      	ldrb	r2, [r4, #1]
 80032ec:	78a3      	ldrb	r3, [r4, #2]
 80032ee:	2a11      	cmp	r2, #17
 80032f0:	d106      	bne.n	8003300 <Dcm_main+0x34>
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d104      	bne.n	8003300 <Dcm_main+0x34>
 80032f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <Dcm_main+0x98>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	bb43      	cbnz	r3, 800334e <Dcm_main+0x82>
	{
		Dcm_HardReset();
 80032fc:	f7ff ff3c 	bl	8003178 <Dcm_HardReset>
	else
	{
		/* Do nothing. */
	}

	if(0xf1u == Dcm_RxData[2u] && 0x80u == Dcm_RxData[3u])
 8003300:	78a3      	ldrb	r3, [r4, #2]
 8003302:	2bf1      	cmp	r3, #241	@ 0xf1
 8003304:	d104      	bne.n	8003310 <Dcm_main+0x44>
 8003306:	78e3      	ldrb	r3, [r4, #3]
 8003308:	2b80      	cmp	r3, #128	@ 0x80
 800330a:	d101      	bne.n	8003310 <Dcm_main+0x44>
	{
		Dcm_ReadSWV();
 800330c:	f7ff ff68 	bl	80031e0 <Dcm_ReadSWV>
	else
	{
		/* Do nothing. */
	}

	if(0x40u == Dcm_RxData[4u] && 0x31u == Dcm_RxData[1u])
 8003310:	7923      	ldrb	r3, [r4, #4]
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d104      	bne.n	8003320 <Dcm_main+0x54>
 8003316:	7863      	ldrb	r3, [r4, #1]
 8003318:	2b31      	cmp	r3, #49	@ 0x31
 800331a:	d109      	bne.n	8003330 <Dcm_main+0x64>
	{
		Dcm_RC_HealSupply();
 800331c:	f7ff ff9a 	bl	8003254 <Dcm_RC_HealSupply>
	else
	{
		/* Do nothing. */
	}

	if(0x41u == Dcm_RxData[4u] && 0x31u == Dcm_RxData[1u])
 8003320:	7923      	ldrb	r3, [r4, #4]
 8003322:	2b41      	cmp	r3, #65	@ 0x41
 8003324:	d104      	bne.n	8003330 <Dcm_main+0x64>
 8003326:	7863      	ldrb	r3, [r4, #1]
 8003328:	2b31      	cmp	r3, #49	@ 0x31
 800332a:	d101      	bne.n	8003330 <Dcm_main+0x64>
	{
		Dcm_RC_ReadHistograms();
 800332c:	f7ff feb0 	bl	8003090 <Dcm_RC_ReadHistograms>
		/* Do nothing. */
	}

	for(uint8_t i = 0u; i < 8u; i++)
	{
		Dcm_RxData[i] = 0u;
 8003330:	2300      	movs	r3, #0
		Dcm_TxData[i] = 0u;
 8003332:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <Dcm_main+0x9c>)
		Dcm_RxData[i] = 0u;
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	6063      	str	r3, [r4, #4]
		Dcm_TxData[i] = 0u;
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	6053      	str	r3, [r2, #4]
	}

	Dcm_MainCounter++;
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	602b      	str	r3, [r5, #0]
}
 8003342:	bd38      	pop	{r3, r4, r5, pc}
	else if(0x02 == Dcm_RxData[2u] && 1u == SMon_CmdStat)
 8003344:	2b01      	cmp	r3, #1
 8003346:	d1d0      	bne.n	80032ea <Dcm_main+0x1e>
		Dcm_SendNrc();
 8003348:	f7ff feec 	bl	8003124 <Dcm_SendNrc>
 800334c:	e7cd      	b.n	80032ea <Dcm_main+0x1e>
	else if(0x11u == Dcm_RxData[1u] && 0x01u == Dcm_RxData[2u] && 1u == SMon_CmdStat)
 800334e:	2b01      	cmp	r3, #1
 8003350:	d1de      	bne.n	8003310 <Dcm_main+0x44>
		Dcm_SendNrc();
 8003352:	f7ff fee7 	bl	8003124 <Dcm_SendNrc>
 8003356:	e7d3      	b.n	8003300 <Dcm_main+0x34>
 8003358:	20000d8c 	.word	0x20000d8c
 800335c:	20004c00 	.word	0x20004c00
 8003360:	20000d64 	.word	0x20000d64
 8003364:	20000006 	.word	0x20000006
 8003368:	20000d5c 	.word	0x20000d5c

0800336c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800336c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003370:	4905      	ldr	r1, [pc, #20]	@ (8003388 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003374:	68ca      	ldr	r2, [r1, #12]
 8003376:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800337a:	4313      	orrs	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
 800337e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003382:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003384:	e7fd      	b.n	8003382 <__NVIC_SystemReset+0x16>
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	05fa0004 	.word	0x05fa0004

08003390 <EcuM_GoSleep>:

	mainCnt++;
}

void EcuM_GoSleep(void)
{
 8003390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003392:	b672      	cpsid	i
	//	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_15);
	//	HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_14 | GPIO_PIN_13;
 8003394:	2203      	movs	r2, #3
 8003396:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339a:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339c:	4669      	mov	r1, sp
 800339e:	482e      	ldr	r0, [pc, #184]	@ (8003458 <EcuM_GoSleep+0xc8>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_14 | GPIO_PIN_13;
 80033a0:	e9cd 3200 	strd	r3, r2, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f001 fa6a 	bl	8004880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_3;
 80033ac:	f240 432a 	movw	r3, #1066	@ 0x42a
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	4669      	mov	r1, sp
 80033b2:	482a      	ldr	r0, [pc, #168]	@ (800345c <EcuM_GoSleep+0xcc>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_3;
 80033b4:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	f001 fa63 	bl	8004880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033be:	4669      	mov	r1, sp
 80033c0:	4827      	ldr	r0, [pc, #156]	@ (8003460 <EcuM_GoSleep+0xd0>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033c2:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c4:	f001 fa5c 	bl	8004880 <HAL_GPIO_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80033c8:	b662      	cpsie	i
	__enable_irq();
	HAL_ADC_Stop_DMA(&hadc1);
 80033ca:	4826      	ldr	r0, [pc, #152]	@ (8003464 <EcuM_GoSleep+0xd4>)
 80033cc:	f000 fbf2 	bl	8003bb4 <HAL_ADC_Stop_DMA>
	HAL_ADC_DeInit(&hadc1);
 80033d0:	4824      	ldr	r0, [pc, #144]	@ (8003464 <EcuM_GoSleep+0xd4>)
 80033d2:	f000 fb5f 	bl	8003a94 <HAL_ADC_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 80033d6:	b672      	cpsid	i
	__disable_irq();
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80033d8:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <EcuM_GoSleep+0xd8>)
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_DMA1_CLK_DISABLE();
	__HAL_RCC_ADC1_CLK_DISABLE();
	__HAL_RCC_AFIO_CLK_DISABLE();
	__HAL_RCC_TIM1_CLK_DISABLE();
	HAL_TIM_PWM_Stop_IT(&htim1, 0);
 80033da:	4621      	mov	r1, r4
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80033dc:	699a      	ldr	r2, [r3, #24]
	HAL_TIM_PWM_Stop_IT(&htim1, 0);
 80033de:	4823      	ldr	r0, [pc, #140]	@ (800346c <EcuM_GoSleep+0xdc>)
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	619a      	str	r2, [r3, #24]
	__HAL_RCC_GPIOC_CLK_DISABLE();
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	f022 0210 	bic.w	r2, r2, #16
 80033ec:	619a      	str	r2, [r3, #24]
	__HAL_RCC_DMA1_CLK_DISABLE();
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	615a      	str	r2, [r3, #20]
	__HAL_RCC_ADC1_CLK_DISABLE();
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033fc:	619a      	str	r2, [r3, #24]
	__HAL_RCC_AFIO_CLK_DISABLE();
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	619a      	str	r2, [r3, #24]
	__HAL_RCC_TIM1_CLK_DISABLE();
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340c:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_Stop_IT(&htim1, 0);
 800340e:	f002 fb19 	bl	8005a44 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_DeInit(&htim1);
 8003412:	4816      	ldr	r0, [pc, #88]	@ (800346c <EcuM_GoSleep+0xdc>)
 8003414:	f001 fff6 	bl	8005404 <HAL_TIM_PWM_DeInit>
	HAL_SuspendTick();
 8003418:	f004 ff46 	bl	80082a8 <HAL_SuspendTick>
	for(uint8_t i = 0; i < 82; i++) HAL_NVIC_ClearPendingIRQ(i);
 800341c:	b260      	sxtb	r0, r4
 800341e:	3401      	adds	r4, #1
 8003420:	f000 fffa 	bl	8004418 <HAL_NVIC_ClearPendingIRQ>
 8003424:	2c52      	cmp	r4, #82	@ 0x52
 8003426:	d1f9      	bne.n	800341c <EcuM_GoSleep+0x8c>
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8003428:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
	HAL_TIM_Base_Start_IT(&htim2);
	EcuM_SleeModeActive = 1;
 800342c:	2401      	movs	r4, #1
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 800342e:	6913      	ldr	r3, [r2, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8003430:	480f      	ldr	r0, [pc, #60]	@ (8003470 <EcuM_GoSleep+0xe0>)
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8003432:	f023 0305 	bic.w	r3, r3, #5
 8003436:	6113      	str	r3, [r2, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8003438:	f001 ffba 	bl	80053b0 <HAL_TIM_Base_Start_IT>
	EcuM_SleeModeActive = 1;
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <EcuM_GoSleep+0xe4>)
	HAL_CAN_RequestSleep(&hcan);
 800343e:	480e      	ldr	r0, [pc, #56]	@ (8003478 <EcuM_GoSleep+0xe8>)
	EcuM_SleeModeActive = 1;
 8003440:	701c      	strb	r4, [r3, #0]
	HAL_CAN_RequestSleep(&hcan);
 8003442:	f000 fd79 	bl	8003f38 <HAL_CAN_RequestSleep>
  __ASM volatile ("cpsie i" : : : "memory");
 8003446:	b662      	cpsie	i
	__enable_irq();
	HAL_DBGMCU_DisableDBGSleepMode();
 8003448:	f000 f8dc 	bl	8003604 <HAL_DBGMCU_DisableDBGSleepMode>
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800344c:	4621      	mov	r1, r4
 800344e:	4620      	mov	r0, r4
 8003450:	f001 fb96 	bl	8004b80 <HAL_PWR_EnterSLEEPMode>
	}
}

void EcuM_PerformReset(uint8_t reason, uint8_t info)
{
	NVIC_SystemReset();
 8003454:	f7ff ff8a 	bl	800336c <__NVIC_SystemReset>
 8003458:	40010800 	.word	0x40010800
 800345c:	40010c00 	.word	0x40010c00
 8003460:	40011000 	.word	0x40011000
 8003464:	20001b68 	.word	0x20001b68
 8003468:	40021000 	.word	0x40021000
 800346c:	20004514 	.word	0x20004514
 8003470:	20004460 	.word	0x20004460
 8003474:	20000d94 	.word	0x20000d94
 8003478:	20001bb4 	.word	0x20001bb4

0800347c <EcuM_main>:
{
 800347c:	b508      	push	{r3, lr}
	EcuM_WUPLine = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800347e:	2101      	movs	r1, #1
 8003480:	481f      	ldr	r0, [pc, #124]	@ (8003500 <EcuM_main+0x84>)
 8003482:	f001 fb71 	bl	8004b68 <HAL_GPIO_ReadPin>
 8003486:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <EcuM_main+0x88>)
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <EcuM_main+0x8c>)
 800348a:	7018      	strb	r0, [r3, #0]
	if(1u == SMon_CmdStat || 1u == EcuM_WUPLine || FULL_COMMUNICATION == CanH_CommunicationState)
 800348c:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <EcuM_main+0x90>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d005      	beq.n	80034a0 <EcuM_main+0x24>
 8003494:	2801      	cmp	r0, #1
 8003496:	d003      	beq.n	80034a0 <EcuM_main+0x24>
 8003498:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <EcuM_main+0x94>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d117      	bne.n	80034d0 <EcuM_main+0x54>
		EcuM_SWState = 1u;
 80034a0:	2101      	movs	r1, #1
 80034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <EcuM_main+0x98>)
 80034a4:	7019      	strb	r1, [r3, #0]
		EcuM_RunTimer = 58u;
 80034a6:	233a      	movs	r3, #58	@ 0x3a
		EcuM_PostRunTimer = 58u;
 80034a8:	491b      	ldr	r1, [pc, #108]	@ (8003518 <EcuM_main+0x9c>)
		EcuM_RunTimer = 58u;
 80034aa:	6013      	str	r3, [r2, #0]
		EcuM_PostRunTimer = 58u;
 80034ac:	600b      	str	r3, [r1, #0]
	if(4u != SMon_ShortToPlusTest && 0u == EcuM_RunTimer)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <EcuM_main+0xa0>)
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	2a04      	cmp	r2, #4
 80034b6:	d016      	beq.n	80034e6 <EcuM_main+0x6a>
 80034b8:	b92b      	cbnz	r3, 80034c6 <EcuM_main+0x4a>
		EcuM_SWState = 2u;
 80034ba:	2202      	movs	r2, #2
 80034bc:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <EcuM_main+0x98>)
 80034be:	701a      	strb	r2, [r3, #0]
		EcuM_PostRunTimer = 58u;
 80034c0:	223a      	movs	r2, #58	@ 0x3a
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <EcuM_main+0x9c>)
 80034c4:	601a      	str	r2, [r3, #0]
	mainCnt++;
 80034c6:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <EcuM_main+0xa4>)
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bd08      	pop	{r3, pc}
		if(0u < EcuM_RunTimer)
 80034d0:	6813      	ldr	r3, [r2, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0eb      	beq.n	80034ae <EcuM_main+0x32>
			EcuM_RunTimer--;
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6013      	str	r3, [r2, #0]
			if(0u == EcuM_RunTimer)
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e7      	bne.n	80034ae <EcuM_main+0x32>
				EcuM_SWState = 2u;
 80034de:	2102      	movs	r1, #2
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <EcuM_main+0x98>)
 80034e2:	7019      	strb	r1, [r3, #0]
 80034e4:	e7e3      	b.n	80034ae <EcuM_main+0x32>
	else if(4u == SMon_ShortToPlusTest && 0u == EcuM_RunTimer)
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ed      	bne.n	80034c6 <EcuM_main+0x4a>
		if(0u < EcuM_PostRunTimer)
 80034ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003518 <EcuM_main+0x9c>)
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0e9      	beq.n	80034c6 <EcuM_main+0x4a>
			EcuM_PostRunTimer--;
 80034f2:	3b01      	subs	r3, #1
 80034f4:	6013      	str	r3, [r2, #0]
			if(0u == EcuM_PostRunTimer)
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <EcuM_main+0x4a>
				EcuM_GoSleep();
 80034fa:	f7ff ff49 	bl	8003390 <EcuM_GoSleep>
 80034fe:	bf00      	nop
 8003500:	40010800 	.word	0x40010800
 8003504:	20000d95 	.word	0x20000d95
 8003508:	20000010 	.word	0x20000010
 800350c:	20000006 	.word	0x20000006
 8003510:	20000007 	.word	0x20000007
 8003514:	20000014 	.word	0x20000014
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000ce7 	.word	0x20000ce7
 8003520:	20000d90 	.word	0x20000d90

08003524 <EcuM_ProcessTimerInterrupt>:
	if(1u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8003524:	2101      	movs	r1, #1
{
 8003526:	b508      	push	{r3, lr}
	if(1u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8003528:	4805      	ldr	r0, [pc, #20]	@ (8003540 <EcuM_ProcessTimerInterrupt+0x1c>)
 800352a:	f001 fb1d 	bl	8004b68 <HAL_GPIO_ReadPin>
 800352e:	2801      	cmp	r0, #1
 8003530:	d101      	bne.n	8003536 <EcuM_ProcessTimerInterrupt+0x12>
	NVIC_SystemReset();
 8003532:	f7ff ff1b 	bl	800336c <__NVIC_SystemReset>
}
 8003536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_PWR_EnableSleepOnExit();
 800353a:	f001 bb31 	b.w	8004ba0 <HAL_PWR_EnableSleepOnExit>
 800353e:	bf00      	nop
 8003540:	40010800 	.word	0x40010800

08003544 <EcuM_PerformReset>:
{
 8003544:	b508      	push	{r3, lr}
	NVIC_SystemReset();
 8003546:	f7ff ff11 	bl	800336c <__NVIC_SystemReset>
	...

0800354c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800354c:	f004 ff10 	bl	8008370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003550:	480b      	ldr	r0, [pc, #44]	@ (8003580 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003552:	490c      	ldr	r1, [pc, #48]	@ (8003584 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003554:	4a0c      	ldr	r2, [pc, #48]	@ (8003588 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003568:	4c09      	ldr	r4, [pc, #36]	@ (8003590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003576:	f004 fff9 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800357a:	f004 fd51 	bl	8008020 <main>
  bx lr
 800357e:	4770      	bx	lr
  ldr r0, =_sdata
 8003580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003584:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003588:	080086d8 	.word	0x080086d8
  ldr r2, =_sbss
 800358c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003590:	20004700 	.word	0x20004700

08003594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003594:	e7fe      	b.n	8003594 <ADC1_2_IRQHandler>
	...

08003598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003598:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800359a:	4a07      	ldr	r2, [pc, #28]	@ (80035b8 <HAL_Init+0x20>)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800359c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f043 0310 	orr.w	r3, r3, #16
 80035a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a6:	f000 fed5 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035aa:	200f      	movs	r0, #15
 80035ac:	f004 fe2e 	bl	800820c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035b0:	f004 fe04 	bl	80081bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	bd08      	pop	{r3, pc}
 80035b8:	40022000 	.word	0x40022000

080035bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80035bc:	4a03      	ldr	r2, [pc, #12]	@ (80035cc <HAL_IncTick+0x10>)
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <HAL_IncTick+0x14>)
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	440b      	add	r3, r1
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000d98 	.word	0x20000d98
 80035d0:	20000015 	.word	0x20000015

080035d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035d4:	4b01      	ldr	r3, [pc, #4]	@ (80035dc <HAL_GetTick+0x8>)
 80035d6:	6818      	ldr	r0, [r3, #0]
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000d98 	.word	0x20000d98

080035e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7ff fff6 	bl	80035d4 <HAL_GetTick>
 80035e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80035ec:	bf1e      	ittt	ne
 80035ee:	4b04      	ldrne	r3, [pc, #16]	@ (8003600 <HAL_Delay+0x20>)
 80035f0:	781b      	ldrbne	r3, [r3, #0]
 80035f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035f4:	f7ff ffee 	bl	80035d4 <HAL_GetTick>
 80035f8:	1b43      	subs	r3, r0, r5
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	d3fa      	bcc.n	80035f4 <HAL_Delay+0x14>
  {
  }
}
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000015 	.word	0x20000015

08003604 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003606:	6853      	ldr	r3, [r2, #4]
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6053      	str	r3, [r2, #4]
}
 800360e:	4770      	bx	lr
 8003610:	e0042000 	.word	0xe0042000

08003614 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003614:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003618:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800361c:	d11a      	bne.n	8003654 <ADC_DMAConvCplt+0x40>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800361e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800362e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8003632:	d10c      	bne.n	800364e <ADC_DMAConvCplt+0x3a>
 8003634:	7b1a      	ldrb	r2, [r3, #12]
 8003636:	b952      	cbnz	r2, 800364e <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800363a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003640:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003642:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003644:	bf5e      	ittt	pl
 8003646:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 8003648:	f042 0201 	orrpl.w	r2, r2, #1
 800364c:	629a      	strpl	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800364e:	4618      	mov	r0, r3
 8003650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003652:	4710      	bx	r2
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4718      	bx	r3

0800365a <ADC_DMAHalfConvCplt>:
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
 800365c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800365e:	4718      	bx	r3

08003660 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003660:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003662:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003668:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800366a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003672:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003674:	4718      	bx	r3

08003676 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8003676:	4770      	bx	lr

08003678 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8003678:	4770      	bx	lr
	...

0800367c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800367c:	2300      	movs	r3, #0
{ 
 800367e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003680:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003682:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8003686:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003688:	2b01      	cmp	r3, #1
 800368a:	d071      	beq.n	8003770 <HAL_ADC_ConfigChannel+0xf4>
 800368c:	2301      	movs	r3, #1
 800368e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8003692:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003694:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7U)
 8003696:	2c06      	cmp	r4, #6
 8003698:	680d      	ldr	r5, [r1, #0]
 800369a:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800369e:	d825      	bhi.n	80036ec <HAL_ADC_ConfigChannel+0x70>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036a0:	4423      	add	r3, r4
 80036a2:	241f      	movs	r4, #31
 80036a4:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80036a6:	3b05      	subs	r3, #5
 80036a8:	409c      	lsls	r4, r3
 80036aa:	ea26 0404 	bic.w	r4, r6, r4
 80036ae:	fa05 f303 	lsl.w	r3, r5, r3
 80036b2:	4323      	orrs	r3, r4
 80036b4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036b6:	680c      	ldr	r4, [r1, #0]
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036b8:	6816      	ldr	r6, [r2, #0]
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036ba:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036bc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80036c0:	688b      	ldr	r3, [r1, #8]
 80036c2:	f04f 0407 	mov.w	r4, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036c6:	d929      	bls.n	800371c <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036c8:	68f5      	ldr	r5, [r6, #12]
 80036ca:	381e      	subs	r0, #30
 80036cc:	4084      	lsls	r4, r0
 80036ce:	ea25 0404 	bic.w	r4, r5, r4
 80036d2:	4083      	lsls	r3, r0
 80036d4:	4323      	orrs	r3, r4
 80036d6:	60f3      	str	r3, [r6, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	3b10      	subs	r3, #16
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d925      	bls.n	800372c <HAL_ADC_ConfigChannel+0xb0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80036e2:	2300      	movs	r3, #0
 80036e4:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 80036e8:	b002      	add	sp, #8
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80036ec:	2c0c      	cmp	r4, #12
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036ee:	4423      	add	r3, r4
 80036f0:	f04f 041f 	mov.w	r4, #31
  else if (sConfig->Rank < 13U)
 80036f4:	d809      	bhi.n	800370a <HAL_ADC_ConfigChannel+0x8e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036f6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80036f8:	3b23      	subs	r3, #35	@ 0x23
 80036fa:	409c      	lsls	r4, r3
 80036fc:	ea26 0404 	bic.w	r4, r6, r4
 8003700:	fa05 f303 	lsl.w	r3, r5, r3
 8003704:	4323      	orrs	r3, r4
 8003706:	6303      	str	r3, [r0, #48]	@ 0x30
 8003708:	e7d5      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800370a:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800370c:	3b41      	subs	r3, #65	@ 0x41
 800370e:	409c      	lsls	r4, r3
 8003710:	ea26 0404 	bic.w	r4, r6, r4
 8003714:	409d      	lsls	r5, r3
 8003716:	432c      	orrs	r4, r5
 8003718:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800371a:	e7cc      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800371c:	6935      	ldr	r5, [r6, #16]
 800371e:	4084      	lsls	r4, r0
 8003720:	ea25 0404 	bic.w	r4, r5, r4
 8003724:	4083      	lsls	r3, r0
 8003726:	4323      	orrs	r3, r4
 8003728:	6133      	str	r3, [r6, #16]
 800372a:	e7d5      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x5c>
    if (hadc->Instance == ADC1)
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	4811      	ldr	r0, [pc, #68]	@ (8003774 <HAL_ADC_ConfigChannel+0xf8>)
 8003730:	4283      	cmp	r3, r0
 8003732:	d117      	bne.n	8003764 <HAL_ADC_ConfigChannel+0xe8>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003734:	6898      	ldr	r0, [r3, #8]
 8003736:	0200      	lsls	r0, r0, #8
 8003738:	d4d2      	bmi.n	80036e0 <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800373a:	6898      	ldr	r0, [r3, #8]
 800373c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8003740:	6098      	str	r0, [r3, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003742:	680b      	ldr	r3, [r1, #0]
 8003744:	2b10      	cmp	r3, #16
 8003746:	d1cb      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_ADC_ConfigChannel+0xfc>)
 800374a:	490c      	ldr	r1, [pc, #48]	@ (800377c <HAL_ADC_ConfigChannel+0x100>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	210a      	movs	r1, #10
 8003754:	434b      	muls	r3, r1
            wait_loop_index--;
 8003756:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003758:	9b01      	ldr	r3, [sp, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0c0      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	3b01      	subs	r3, #1
 8003762:	e7f8      	b.n	8003756 <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003764:	6a93      	ldr	r3, [r2, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8003766:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	f043 0320 	orr.w	r3, r3, #32
 800376c:	6293      	str	r3, [r2, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 800376e:	e7b8      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x66>
  __HAL_LOCK(hadc);
 8003770:	2002      	movs	r0, #2
 8003772:	e7b9      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x6c>
 8003774:	40012400 	.word	0x40012400
 8003778:	20000020 	.word	0x20000020
 800377c:	000f4240 	.word	0x000f4240

08003780 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8003780:	2300      	movs	r3, #0
{
 8003782:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003784:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003786:	6803      	ldr	r3, [r0, #0]
{
 8003788:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	07d2      	lsls	r2, r2, #31
 800378e:	d502      	bpl.n	8003796 <ADC_Enable+0x16>
  return HAL_OK;
 8003790:	2000      	movs	r0, #0
}
 8003792:	b003      	add	sp, #12
 8003794:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800379e:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <ADC_Enable+0x70>)
 80037a0:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <ADC_Enable+0x74>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80037a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80037aa:	9b01      	ldr	r3, [sp, #4]
 80037ac:	b9e3      	cbnz	r3, 80037e8 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80037ae:	f7ff ff11 	bl	80035d4 <HAL_GetTick>
 80037b2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	07db      	lsls	r3, r3, #31
 80037ba:	d4e9      	bmi.n	8003790 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037bc:	f7ff ff0a 	bl	80035d4 <HAL_GetTick>
 80037c0:	1b40      	subs	r0, r0, r5
 80037c2:	2802      	cmp	r0, #2
 80037c4:	d9f6      	bls.n	80037b4 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f013 0301 	ands.w	r3, r3, #1
 80037ce:	d1f1      	bne.n	80037b4 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d4:	f042 0210 	orr.w	r2, r2, #16
 80037d8:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 80037dc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80037e6:	e7d4      	b.n	8003792 <ADC_Enable+0x12>
      wait_loop_index--;
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	e7dc      	b.n	80037a8 <ADC_Enable+0x28>
 80037ee:	bf00      	nop
 80037f0:	20000020 	.word	0x20000020
 80037f4:	000f4240 	.word	0x000f4240

080037f8 <HAL_ADC_Start_DMA>:
{
 80037f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80037fc:	4b41      	ldr	r3, [pc, #260]	@ (8003904 <HAL_ADC_Start_DMA+0x10c>)
{
 80037fe:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003800:	6802      	ldr	r2, [r0, #0]
{
 8003802:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003804:	429a      	cmp	r2, r3
{
 8003806:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003808:	d002      	beq.n	8003810 <HAL_ADC_Start_DMA+0x18>
 800380a:	493f      	ldr	r1, [pc, #252]	@ (8003908 <HAL_ADC_Start_DMA+0x110>)
 800380c:	428a      	cmp	r2, r1
 800380e:	d103      	bne.n	8003818 <HAL_ADC_Start_DMA+0x20>
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003816:	d170      	bne.n	80038fa <HAL_ADC_Start_DMA+0x102>
    __HAL_LOCK(hadc);
 8003818:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800381c:	2b01      	cmp	r3, #1
 800381e:	d06e      	beq.n	80038fe <HAL_ADC_Start_DMA+0x106>
 8003820:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8003822:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8003824:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8003828:	f7ff ffaa 	bl	8003780 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800382c:	4606      	mov	r6, r0
 800382e:	2800      	cmp	r0, #0
 8003830:	d15f      	bne.n	80038f2 <HAL_ADC_Start_DMA+0xfa>
      ADC_STATE_CLR_SET(hadc->State,
 8003832:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003834:	6821      	ldr	r1, [r4, #0]
 8003836:	4b34      	ldr	r3, [pc, #208]	@ (8003908 <HAL_ADC_Start_DMA+0x110>)
      ADC_STATE_CLR_SET(hadc->State,
 8003838:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 800383c:	f025 0501 	bic.w	r5, r5, #1
 8003840:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003844:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8003846:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003848:	d104      	bne.n	8003854 <HAL_ADC_Start_DMA+0x5c>
 800384a:	4a2e      	ldr	r2, [pc, #184]	@ (8003904 <HAL_ADC_Start_DMA+0x10c>)
 800384c:	6853      	ldr	r3, [r2, #4]
 800384e:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003852:	d140      	bne.n	80038d6 <HAL_ADC_Start_DMA+0xde>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003854:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003856:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800385a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800385c:	684b      	ldr	r3, [r1, #4]
 800385e:	055a      	lsls	r2, r3, #21
 8003860:	d505      	bpl.n	800386e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003862:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003864:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800386c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800386e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003870:	4a26      	ldr	r2, [pc, #152]	@ (800390c <HAL_ADC_Start_DMA+0x114>)
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003872:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003876:	bf1c      	itt	ne
 8003878:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 800387a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800387e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8003880:	2300      	movs	r3, #0
 8003882:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003886:	6a23      	ldr	r3, [r4, #32]
 8003888:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800388a:	6a23      	ldr	r3, [r4, #32]
 800388c:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <HAL_ADC_Start_DMA+0x118>)
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003890:	6a23      	ldr	r3, [r4, #32]
 8003892:	4a20      	ldr	r2, [pc, #128]	@ (8003914 <HAL_ADC_Start_DMA+0x11c>)
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6893      	ldr	r3, [r2, #8]
 80038a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a6:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038a8:	6821      	ldr	r1, [r4, #0]
 80038aa:	4643      	mov	r3, r8
 80038ac:	463a      	mov	r2, r7
 80038ae:	6a20      	ldr	r0, [r4, #32]
 80038b0:	314c      	adds	r1, #76	@ 0x4c
 80038b2:	f000 fe21 	bl	80044f8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80038be:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	bf0c      	ite	eq
 80038c6:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80038ca:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	4630      	mov	r0, r6
 80038d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80038d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038dc:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80038de:	6853      	ldr	r3, [r2, #4]
 80038e0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038e2:	bf41      	itttt	mi
 80038e4:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 80038e6:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 80038ea:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 80038ee:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 80038f0:	e7bd      	b.n	800386e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80038f2:	2300      	movs	r3, #0
 80038f4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80038f8:	e7ea      	b.n	80038d0 <HAL_ADC_Start_DMA+0xd8>
    tmp_hal_status = HAL_ERROR;
 80038fa:	2601      	movs	r6, #1
 80038fc:	e7e8      	b.n	80038d0 <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 80038fe:	2602      	movs	r6, #2
 8003900:	e7e6      	b.n	80038d0 <HAL_ADC_Start_DMA+0xd8>
 8003902:	bf00      	nop
 8003904:	40012400 	.word	0x40012400
 8003908:	40012800 	.word	0x40012800
 800390c:	08003615 	.word	0x08003615
 8003910:	0800365b 	.word	0x0800365b
 8003914:	08003661 	.word	0x08003661

08003918 <ADC_ConversionStop_Disable>:
{
 8003918:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800391a:	6803      	ldr	r3, [r0, #0]
{
 800391c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	07d1      	lsls	r1, r2, #31
 8003922:	d401      	bmi.n	8003928 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003924:	2000      	movs	r0, #0
}
 8003926:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003930:	f7ff fe50 	bl	80035d4 <HAL_GetTick>
 8003934:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	07db      	lsls	r3, r3, #31
 800393c:	d5f2      	bpl.n	8003924 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800393e:	f7ff fe49 	bl	80035d4 <HAL_GetTick>
 8003942:	1b40      	subs	r0, r0, r5
 8003944:	2802      	cmp	r0, #2
 8003946:	d9f6      	bls.n	8003936 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	07da      	lsls	r2, r3, #31
 800394e:	d5f2      	bpl.n	8003936 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003950:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8003962:	e7e0      	b.n	8003926 <ADC_ConversionStop_Disable+0xe>

08003964 <HAL_ADC_Init>:
{
 8003964:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8003966:	4604      	mov	r4, r0
 8003968:	2800      	cmp	r0, #0
 800396a:	d07c      	beq.n	8003a66 <HAL_ADC_Init+0x102>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800396c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800396e:	b99b      	cbnz	r3, 8003998 <HAL_ADC_Init+0x34>
    ADC_CLEAR_ERRORCODE(hadc);
 8003970:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003972:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003976:	4b3f      	ldr	r3, [pc, #252]	@ (8003a74 <HAL_ADC_Init+0x110>)
 8003978:	6303      	str	r3, [r0, #48]	@ 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <HAL_ADC_Init+0x114>)
 800397c:	6343      	str	r3, [r0, #52]	@ 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800397e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_ADC_Init+0x118>)
 8003980:	6383      	str	r3, [r0, #56]	@ 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003982:	4b3f      	ldr	r3, [pc, #252]	@ (8003a80 <HAL_ADC_Init+0x11c>)
 8003984:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003986:	4b3f      	ldr	r3, [pc, #252]	@ (8003a84 <HAL_ADC_Init+0x120>)
 8003988:	6403      	str	r3, [r0, #64]	@ 0x40
    if (hadc->MspInitCallback == NULL)
 800398a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800398c:	b90b      	cbnz	r3, 8003992 <HAL_ADC_Init+0x2e>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800398e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a88 <HAL_ADC_Init+0x124>)
 8003990:	6443      	str	r3, [r0, #68]	@ 0x44
    hadc->MspInitCallback(hadc);
 8003992:	4620      	mov	r0, r4
 8003994:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003996:	4798      	blx	r3
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff ffbd 	bl	8003918 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800399e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80039a0:	f013 0310 	ands.w	r3, r3, #16
 80039a4:	d161      	bne.n	8003a6a <HAL_ADC_Init+0x106>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d15f      	bne.n	8003a6a <HAL_ADC_Init+0x106>
    ADC_STATE_CLR_SET(hadc->State,
 80039aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039ac:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80039ae:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80039b2:	f022 0202 	bic.w	r2, r2, #2
 80039b6:	f042 0202 	orr.w	r2, r2, #2
 80039ba:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039bc:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80039be:	7b25      	ldrb	r5, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039c0:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039c2:	68a2      	ldr	r2, [r4, #8]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039c4:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039c8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80039cc:	d003      	beq.n	80039d6 <HAL_ADC_Init+0x72>
 80039ce:	1e56      	subs	r6, r2, #1
 80039d0:	4272      	negs	r2, r6
 80039d2:	4172      	adcs	r2, r6
 80039d4:	0212      	lsls	r2, r2, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039d6:	7d26      	ldrb	r6, [r4, #20]
 80039d8:	2e01      	cmp	r6, #1
 80039da:	d107      	bne.n	80039ec <HAL_ADC_Init+0x88>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039dc:	2d00      	cmp	r5, #0
 80039de:	d12f      	bne.n	8003a40 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80039e0:	69a5      	ldr	r5, [r4, #24]
 80039e2:	3d01      	subs	r5, #1
 80039e4:	ea42 3545 	orr.w	r5, r2, r5, lsl #13
 80039e8:	f445 6200 	orr.w	r2, r5, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80039ec:	6826      	ldr	r6, [r4, #0]
 80039ee:	6875      	ldr	r5, [r6, #4]
 80039f0:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 80039f4:	432a      	orrs	r2, r5
 80039f6:	6072      	str	r2, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80039f8:	6825      	ldr	r5, [r4, #0]
 80039fa:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <HAL_ADC_Init+0x128>)
 80039fc:	68ae      	ldr	r6, [r5, #8]
 80039fe:	4032      	ands	r2, r6
 8003a00:	430a      	orrs	r2, r1
 8003a02:	60aa      	str	r2, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a04:	68a2      	ldr	r2, [r4, #8]
 8003a06:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8003a0a:	d001      	beq.n	8003a10 <HAL_ADC_Init+0xac>
 8003a0c:	2a01      	cmp	r2, #1
 8003a0e:	d102      	bne.n	8003a16 <HAL_ADC_Init+0xb2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003a16:	6825      	ldr	r5, [r4, #0]
 8003a18:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8003a1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <HAL_ADC_Init+0x12c>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	4299      	cmp	r1, r3
 8003a2c:	d111      	bne.n	8003a52 <HAL_ADC_Init+0xee>
      ADC_CLEAR_ERRORCODE(hadc);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003a32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a34:	f023 0303 	bic.w	r3, r3, #3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8003a42:	f045 0520 	orr.w	r5, r5, #32
 8003a46:	62a5      	str	r5, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003a4a:	f045 0501 	orr.w	r5, r5, #1
 8003a4e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8003a50:	e7cc      	b.n	80039ec <HAL_ADC_Init+0x88>
      ADC_STATE_CLR_SET(hadc->State,
 8003a52:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a54:	f023 0312 	bic.w	r3, r3, #18
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8003a66:	2001      	movs	r0, #1
 8003a68:	e7e9      	b.n	8003a3e <HAL_ADC_Init+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a6c:	f043 0310 	orr.w	r3, r3, #16
 8003a70:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8003a72:	e7f8      	b.n	8003a66 <HAL_ADC_Init+0x102>
 8003a74:	08007d6d 	.word	0x08007d6d
 8003a78:	08003677 	.word	0x08003677
 8003a7c:	08003679 	.word	0x08003679
 8003a80:	08007f75 	.word	0x08007f75
 8003a84:	08003cf1 	.word	0x08003cf1
 8003a88:	080078bd 	.word	0x080078bd
 8003a8c:	ffe1f7fd 	.word	0xffe1f7fd
 8003a90:	ff1f0efe 	.word	0xff1f0efe

08003a94 <HAL_ADC_DeInit>:
{
 8003a94:	b538      	push	{r3, r4, r5, lr}
  if(hadc == NULL)
 8003a96:	4604      	mov	r4, r0
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d065      	beq.n	8003b68 <HAL_ADC_DeInit+0xd4>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003a9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6283      	str	r3, [r0, #40]	@ 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003aa4:	f7ff ff38 	bl	8003918 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d157      	bne.n	8003b5e <HAL_ADC_DeInit+0xca>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8003aae:	f06f 021f 	mvn.w	r2, #31
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b6c <HAL_ADC_DeInit+0xd8>)
 8003aba:	6851      	ldr	r1, [r2, #4]
 8003abc:	400b      	ands	r3, r1
 8003abe:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8003ac0:	6822      	ldr	r2, [r4, #0]
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b70 <HAL_ADC_DeInit+0xdc>)
 8003ac4:	6891      	ldr	r1, [r2, #8]
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	68d3      	ldr	r3, [r2, #12]
 8003ace:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003ad2:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6913      	ldr	r3, [r2, #16]
 8003ad8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003adc:	6113      	str	r3, [r2, #16]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_ADC_DeInit+0xe0>)
 8003ae2:	694a      	ldr	r2, [r1, #20]
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	698a      	ldr	r2, [r1, #24]
 8003aec:	401a      	ands	r2, r3
 8003aee:	618a      	str	r2, [r1, #24]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8003af0:	6821      	ldr	r1, [r4, #0]
 8003af2:	69ca      	ldr	r2, [r1, #28]
 8003af4:	401a      	ands	r2, r3
 8003af6:	61ca      	str	r2, [r1, #28]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8003af8:	6821      	ldr	r1, [r4, #0]
 8003afa:	6a0a      	ldr	r2, [r1, #32]
 8003afc:	401a      	ands	r2, r3
 8003afe:	620a      	str	r2, [r1, #32]
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8003b04:	401a      	ands	r2, r3
 8003b06:	624a      	str	r2, [r1, #36]	@ 0x24
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8003b08:	6821      	ldr	r1, [r4, #0]
 8003b0a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	628b      	str	r3, [r1, #40]	@ 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8003b10:	6822      	ldr	r2, [r4, #0]
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8003b12:	4919      	ldr	r1, [pc, #100]	@ (8003b78 <HAL_ADC_DeInit+0xe4>)
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8003b14:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b16:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b20:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003b24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003b2a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003b2e:	6313      	str	r3, [r2, #48]	@ 0x30
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003b34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003b38:	6353      	str	r3, [r2, #52]	@ 0x34
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003b3e:	400b      	ands	r3, r1
 8003b40:	6393      	str	r3, [r2, #56]	@ 0x38
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003b46:	400b      	ands	r3, r1
 8003b48:	6393      	str	r3, [r2, #56]	@ 0x38
    if (hadc->MspDeInitCallback == NULL)
 8003b4a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003b4c:	b90b      	cbnz	r3, 8003b52 <HAL_ADC_DeInit+0xbe>
      hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_ADC_DeInit+0xe8>)
 8003b50:	64a3      	str	r3, [r4, #72]	@ 0x48
    hadc->MspDeInitCallback(hadc);
 8003b52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003b54:	4620      	mov	r0, r4
 8003b56:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hadc->State = HAL_ADC_STATE_RESET; 
 8003b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003b64:	4628      	mov	r0, r5
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8003b68:	2501      	movs	r5, #1
 8003b6a:	e7fb      	b.n	8003b64 <HAL_ADC_DeInit+0xd0>
 8003b6c:	ff3f0000 	.word	0xff3f0000
 8003b70:	ff0106f0 	.word	0xff0106f0
 8003b74:	fffff000 	.word	0xfffff000
 8003b78:	ffc00000 	.word	0xffc00000
 8003b7c:	08007951 	.word	0x08007951

08003b80 <HAL_ADC_Stop>:
{
 8003b80:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003b82:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8003b86:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d011      	beq.n	8003bb0 <HAL_ADC_Stop+0x30>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b92:	f7ff fec1 	bl	8003918 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003b96:	b938      	cbnz	r0, 8003ba8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003b98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003bae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	e7fc      	b.n	8003bae <HAL_ADC_Stop+0x2e>

08003bb4 <HAL_ADC_Stop_DMA>:
{
 8003bb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8003bb6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8003bba:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d025      	beq.n	8003c0c <HAL_ADC_Stop_DMA+0x58>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003bc6:	f7ff fea7 	bl	8003918 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003bca:	4605      	mov	r5, r0
 8003bcc:	b9a0      	cbnz	r0, 8003bf8 <HAL_ADC_Stop_DMA+0x44>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	6893      	ldr	r3, [r2, #8]
 8003bd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bd6:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003bd8:	6a20      	ldr	r0, [r4, #32]
 8003bda:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d10a      	bne.n	8003bf8 <HAL_ADC_Stop_DMA+0x44>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003be2:	f000 fcce 	bl	8004582 <HAL_DMA_Abort>
        ADC_STATE_CLR_SET(hadc->State,
 8003be6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      if (tmp_hal_status == HAL_OK)
 8003be8:	b958      	cbnz	r0, 8003c02 <HAL_ADC_Stop_DMA+0x4e>
        ADC_STATE_CLR_SET(hadc->State,
 8003bea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003bfe:	4628      	mov	r0, r5
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c06:	4605      	mov	r5, r0
 8003c08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c0a:	e7f5      	b.n	8003bf8 <HAL_ADC_Stop_DMA+0x44>
  __HAL_LOCK(hadc);
 8003c0c:	2502      	movs	r5, #2
 8003c0e:	e7f6      	b.n	8003bfe <HAL_ADC_Stop_DMA+0x4a>

08003c10 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c10:	2300      	movs	r3, #0
{
 8003c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003c14:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c16:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8003c1a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d062      	beq.n	8003ce6 <HAL_ADCEx_Calibration_Start+0xd6>
 8003c20:	2301      	movs	r3, #1
 8003c22:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c26:	f7ff fe77 	bl	8003918 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fda8 	bl	8003780 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003c30:	4605      	mov	r5, r0
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d12f      	bne.n	8003c96 <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003c36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c38:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 8003c3a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c3e:	f023 0302 	bic.w	r3, r3, #2
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c48:	4b28      	ldr	r3, [pc, #160]	@ (8003cec <HAL_ADCEx_Calibration_Start+0xdc>)
 8003c4a:	681e      	ldr	r6, [r3, #0]
 8003c4c:	f001 fad4 	bl	80051f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c50:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c54:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8003c56:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	bb03      	cbnz	r3, 8003c9e <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	6893      	ldr	r3, [r2, #8]
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8003c66:	f7ff fcb5 	bl	80035d4 <HAL_GetTick>
 8003c6a:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	0711      	lsls	r1, r2, #28
 8003c72:	d418      	bmi.n	8003ca6 <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	f042 0204 	orr.w	r2, r2, #4
 8003c7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c7c:	f7ff fcaa 	bl	80035d4 <HAL_GetTick>
 8003c80:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	075b      	lsls	r3, r3, #29
 8003c88:	d423      	bmi.n	8003cd2 <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c96:	2300      	movs	r3, #0
 8003c98:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c9c:	e016      	b.n	8003ccc <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 8003c9e:	9b01      	ldr	r3, [sp, #4]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	e7d8      	b.n	8003c58 <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ca6:	f7ff fc95 	bl	80035d4 <HAL_GetTick>
 8003caa:	1b80      	subs	r0, r0, r6
 8003cac:	280a      	cmp	r0, #10
 8003cae:	d9dd      	bls.n	8003c6c <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	0718      	lsls	r0, r3, #28
 8003cb6:	d5d9      	bpl.n	8003c6c <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8003cb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8003cba:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	f023 0312 	bic.w	r3, r3, #18
 8003cc0:	f043 0310 	orr.w	r3, r3, #16
 8003cc4:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003ccc:	4628      	mov	r0, r5
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cd2:	f7ff fc7f 	bl	80035d4 <HAL_GetTick>
 8003cd6:	1b80      	subs	r0, r0, r6
 8003cd8:	280a      	cmp	r0, #10
 8003cda:	d9d2      	bls.n	8003c82 <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	075a      	lsls	r2, r3, #29
 8003ce2:	d5ce      	bpl.n	8003c82 <HAL_ADCEx_Calibration_Start+0x72>
 8003ce4:	e7e8      	b.n	8003cb8 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 8003ce6:	2502      	movs	r5, #2
 8003ce8:	e7f0      	b.n	8003ccc <HAL_ADCEx_Calibration_Start+0xbc>
 8003cea:	bf00      	nop
 8003cec:	20000020 	.word	0x20000020

08003cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003cf2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d074      	beq.n	8003de4 <HAL_CAN_Init+0xf2>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003cfa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003cfe:	b90b      	cbnz	r3, 8003d04 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d00:	f003 fe9c 	bl	8007a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	6813      	ldr	r3, [r2, #0]
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0e:	f7ff fc61 	bl	80035d4 <HAL_GetTick>
 8003d12:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	07d1      	lsls	r1, r2, #31
 8003d1a:	d557      	bpl.n	8003dcc <HAL_CAN_Init+0xda>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f022 0202 	bic.w	r2, r2, #2
 8003d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d24:	f7ff fc56 	bl	80035d4 <HAL_GetTick>
 8003d28:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	0792      	lsls	r2, r2, #30
 8003d30:	d45a      	bmi.n	8003de8 <HAL_CAN_Init+0xf6>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d32:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d34:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d36:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	bf0c      	ite	eq
 8003d3c:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d40:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8003d44:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d46:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d48:	7e62      	ldrb	r2, [r4, #25]
 8003d4a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	bf0c      	ite	eq
 8003d50:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d54:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8003d58:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d5a:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d5c:	7ea2      	ldrb	r2, [r4, #26]
 8003d5e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	bf0c      	ite	eq
 8003d64:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d68:	f022 0220 	bicne.w	r2, r2, #32
 8003d6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d6e:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d70:	7ee2      	ldrb	r2, [r4, #27]
 8003d72:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	bf0c      	ite	eq
 8003d78:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d7c:	f042 0210 	orrne.w	r2, r2, #16
 8003d80:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d82:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d84:	7f22      	ldrb	r2, [r4, #28]
 8003d86:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	bf0c      	ite	eq
 8003d8c:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d90:	f022 0208 	bicne.w	r2, r2, #8
 8003d94:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d96:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d98:	7f62      	ldrb	r2, [r4, #29]
 8003d9a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	bf0c      	ite	eq
 8003da0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003da4:	f022 0204 	bicne.w	r2, r2, #4
 8003da8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003daa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	6962      	ldr	r2, [r4, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61cb      	str	r3, [r1, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dc2:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dc4:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003dc6:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8003dca:	e00c      	b.n	8003de6 <HAL_CAN_Init+0xf4>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dcc:	f7ff fc02 	bl	80035d4 <HAL_GetTick>
 8003dd0:	1b40      	subs	r0, r0, r5
 8003dd2:	280a      	cmp	r0, #10
 8003dd4:	d99e      	bls.n	8003d14 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ddc:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dde:	2305      	movs	r3, #5
 8003de0:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
}
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de8:	f7ff fbf4 	bl	80035d4 <HAL_GetTick>
 8003dec:	1b40      	subs	r0, r0, r5
 8003dee:	280a      	cmp	r0, #10
 8003df0:	d99b      	bls.n	8003d2a <HAL_CAN_Init+0x38>
 8003df2:	e7f0      	b.n	8003dd6 <HAL_CAN_Init+0xe4>

08003df4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003df4:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003df6:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dfa:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	2a01      	cmp	r2, #1
 8003e00:	d869      	bhi.n	8003ed6 <HAL_CAN_ConfigFilter+0xe2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e02:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e04:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e10:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e12:	f8d3 421c 	ldr.w	r4, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e16:	f002 021f 	and.w	r2, r2, #31
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e1e:	ea24 0402 	bic.w	r4, r4, r2
 8003e22:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e26:	69cc      	ldr	r4, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e28:	43d0      	mvns	r0, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e2a:	b9ac      	cbnz	r4, 8003e58 <HAL_CAN_ConfigFilter+0x64>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e2c:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8003e30:	4004      	ands	r4, r0
 8003e32:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e36:	68ce      	ldr	r6, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e38:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e3a:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e3c:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e3e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e42:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e46:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e48:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e4a:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e4c:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e4e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003e56:	6065      	str	r5, [r4, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e58:	69cc      	ldr	r4, [r1, #28]
 8003e5a:	2c01      	cmp	r4, #1
 8003e5c:	d115      	bne.n	8003e8a <HAL_CAN_ConfigFilter+0x96>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e5e:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8003e62:	4314      	orrs	r4, r2
 8003e64:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e68:	680e      	ldr	r6, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e6a:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e6c:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e6e:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e70:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e74:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e78:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e7a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e7c:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e7e:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e80:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e84:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003e88:	6065      	str	r5, [r4, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e8a:	698c      	ldr	r4, [r1, #24]
 8003e8c:	b9dc      	cbnz	r4, 8003ec6 <HAL_CAN_ConfigFilter+0xd2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e8e:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8003e92:	4004      	ands	r4, r0
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e94:	f8c3 4204 	str.w	r4, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e98:	690c      	ldr	r4, [r1, #16]
 8003e9a:	b9c4      	cbnz	r4, 8003ece <HAL_CAN_ConfigFilter+0xda>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e9c:	f8d3 4214 	ldr.w	r4, [r3, #532]	@ 0x214
 8003ea0:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ea2:	f8c3 0214 	str.w	r0, [r3, #532]	@ 0x214

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8003ea6:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ea8:	6a09      	ldr	r1, [r1, #32]
 8003eaa:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003eac:	bf02      	ittt	eq
 8003eae:	f8d3 121c 	ldreq.w	r1, [r3, #540]	@ 0x21c
 8003eb2:	430a      	orreq	r2, r1
 8003eb4:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003eb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ec6:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8003eca:	4314      	orrs	r4, r2
 8003ecc:	e7e2      	b.n	8003e94 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ece:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8003ed2:	4310      	orrs	r0, r2
 8003ed4:	e7e5      	b.n	8003ea2 <HAL_CAN_ConfigFilter+0xae>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ed6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003edc:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e7f0      	b.n	8003ec4 <HAL_CAN_ConfigFilter+0xd0>

08003ee2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ee2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ee4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003ee8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d11f      	bne.n	8003f2e <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003eee:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ef2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003efe:	f7ff fb69 	bl	80035d4 <HAL_GetTick>
 8003f02:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	f010 0001 	ands.w	r0, r0, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f0e:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f12:	f7ff fb5f 	bl	80035d4 <HAL_GetTick>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	280a      	cmp	r0, #10
 8003f1a:	d9f3      	bls.n	8003f04 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f22:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f24:	2305      	movs	r3, #5
 8003f26:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	e7f0      	b.n	8003f10 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f2e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f34:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003f36:	e7f8      	b.n	8003f2a <HAL_CAN_Start+0x48>

08003f38 <HAL_CAN_RequestSleep>:
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f38:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d806      	bhi.n	8003f50 <HAL_CAN_RequestSleep+0x18>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Request Sleep mode */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f42:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8003f44:	2000      	movs	r0, #0
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8003f4e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003f52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f56:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8003f58:	2001      	movs	r0, #1
  }
}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f5e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f62:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f64:	3d01      	subs	r5, #1
 8003f66:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f68:	68a4      	ldr	r4, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003f6a:	d845      	bhi.n	8003ff8 <HAL_CAN_AddTxMessage+0x9c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f6c:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8003f70:	d03c      	beq.n	8003fec <HAL_CAN_AddTxMessage+0x90>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f72:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f74:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f78:	40a5      	lsls	r5, r4
 8003f7a:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f7c:	688b      	ldr	r3, [r1, #8]
 8003f7e:	6806      	ldr	r6, [r0, #0]
 8003f80:	68cd      	ldr	r5, [r1, #12]
 8003f82:	f104 0718 	add.w	r7, r4, #24
 8003f86:	bb53      	cbnz	r3, 8003fde <HAL_CAN_AddTxMessage+0x82>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f88:	680b      	ldr	r3, [r1, #0]
 8003f8a:	ea45 5543 	orr.w	r5, r5, r3, lsl #21
 8003f8e:	013b      	lsls	r3, r7, #4
 8003f90:	50f5      	str	r5, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f92:	6803      	ldr	r3, [r0, #0]
 8003f94:	690d      	ldr	r5, [r1, #16]
 8003f96:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8003f9a:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f9c:	7d0b      	ldrb	r3, [r1, #20]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	ea4f 1304 	mov.w	r3, r4, lsl #4
 8003fa4:	d107      	bne.n	8003fb6 <HAL_CAN_AddTxMessage+0x5a>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fa6:	6801      	ldr	r1, [r0, #0]
 8003fa8:	4419      	add	r1, r3
 8003faa:	f8d1 4184 	ldr.w	r4, [r1, #388]	@ 0x184
 8003fae:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8003fb2:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fb6:	6801      	ldr	r1, [r0, #0]
 8003fb8:	6854      	ldr	r4, [r2, #4]
 8003fba:	4419      	add	r1, r3
 8003fbc:	f8c1 418c 	str.w	r4, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fc0:	6811      	ldr	r1, [r2, #0]
 8003fc2:	6802      	ldr	r2, [r0, #0]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	f8c2 1188 	str.w	r1, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fca:	6802      	ldr	r2, [r0, #0]

      /* Return function status */
      return HAL_OK;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	4413      	add	r3, r2
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fd0:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                           pHeader->IDE |
 8003fde:	432b      	orrs	r3, r5
 8003fe0:	684d      	ldr	r5, [r1, #4]
 8003fe2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fe6:	013d      	lsls	r5, r7, #4
 8003fe8:	5173      	str	r3, [r6, r5]
 8003fea:	e7d2      	b.n	8003f92 <HAL_CAN_AddTxMessage+0x36>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ff2:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7f1      	b.n	8003fdc <HAL_CAN_AddTxMessage+0x80>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ff8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003ffa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ffe:	e7f8      	b.n	8003ff2 <HAL_CAN_AddTxMessage+0x96>

08004000 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004000:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8004002:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004006:	3c01      	subs	r4, #1
 8004008:	2c01      	cmp	r4, #1
 800400a:	d879      	bhi.n	8004100 <HAL_CAN_GetRxMessage+0x100>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800400c:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800400e:	b941      	cbnz	r1, 8004022 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004010:	68e5      	ldr	r5, [r4, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004012:	07ad      	lsls	r5, r5, #30
 8004014:	d107      	bne.n	8004026 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004016:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800401c:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 800401e:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004022:	6925      	ldr	r5, [r4, #16]
 8004024:	e7f5      	b.n	8004012 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004026:	f101 051b 	add.w	r5, r1, #27
 800402a:	012e      	lsls	r6, r5, #4
 800402c:	59a4      	ldr	r4, [r4, r6]
 800402e:	f004 0404 	and.w	r4, r4, #4
 8004032:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004034:	6807      	ldr	r7, [r0, #0]
 8004036:	2c00      	cmp	r4, #0
 8004038:	d159      	bne.n	80040ee <HAL_CAN_GetRxMessage+0xee>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800403a:	59bc      	ldr	r4, [r7, r6]
 800403c:	0d64      	lsrs	r4, r4, #21
 800403e:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004040:	6806      	ldr	r6, [r0, #0]
 8004042:	012c      	lsls	r4, r5, #4
 8004044:	5934      	ldr	r4, [r6, r4]
 8004046:	f004 0402 	and.w	r4, r4, #2
 800404a:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800404c:	6806      	ldr	r6, [r0, #0]
 800404e:	010c      	lsls	r4, r1, #4
 8004050:	eb06 1601 	add.w	r6, r6, r1, lsl #4
 8004054:	f8d6 71b4 	ldr.w	r7, [r6, #436]	@ 0x1b4
 8004058:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 800405a:	bf4e      	itee	mi
 800405c:	2608      	movmi	r6, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800405e:	f8d6 61b4 	ldrpl.w	r6, [r6, #436]	@ 0x1b4
 8004062:	f006 060f 	andpl.w	r6, r6, #15
 8004066:	6116      	str	r6, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004068:	6806      	ldr	r6, [r0, #0]
 800406a:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800406e:	6876      	ldr	r6, [r6, #4]
 8004070:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8004074:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004076:	6806      	ldr	r6, [r0, #0]
 8004078:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800407c:	6875      	ldr	r5, [r6, #4]
 800407e:	0c2d      	lsrs	r5, r5, #16
 8004080:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004082:	6802      	ldr	r2, [r0, #0]
 8004084:	4422      	add	r2, r4
 8004086:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800408a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	4422      	add	r2, r4
 8004090:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8004094:	0a12      	lsrs	r2, r2, #8
 8004096:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004098:	6802      	ldr	r2, [r0, #0]
 800409a:	4422      	add	r2, r4
 800409c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80040a0:	0c12      	lsrs	r2, r2, #16
 80040a2:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80040a4:	6802      	ldr	r2, [r0, #0]
 80040a6:	4422      	add	r2, r4
 80040a8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80040ac:	0e12      	lsrs	r2, r2, #24
 80040ae:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80040b0:	6802      	ldr	r2, [r0, #0]
 80040b2:	4422      	add	r2, r4
 80040b4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80040b8:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80040ba:	6802      	ldr	r2, [r0, #0]
 80040bc:	4422      	add	r2, r4
 80040be:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80040c2:	0a12      	lsrs	r2, r2, #8
 80040c4:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80040c6:	6802      	ldr	r2, [r0, #0]
 80040c8:	4422      	add	r2, r4
 80040ca:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80040ce:	0c12      	lsrs	r2, r2, #16
 80040d0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	4422      	add	r2, r4
 80040d6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80040da:	0e12      	lsrs	r2, r2, #24
 80040dc:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040de:	6803      	ldr	r3, [r0, #0]
 80040e0:	b949      	cbnz	r1, 80040f6 <HAL_CAN_GetRxMessage+0xf6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	f042 0220 	orr.w	r2, r2, #32
 80040e8:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80040ea:	2000      	movs	r0, #0
 80040ec:	e798      	b.n	8004020 <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040ee:	59bc      	ldr	r4, [r7, r6]
 80040f0:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80040f2:	6054      	str	r4, [r2, #4]
 80040f4:	e7a4      	b.n	8004040 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	f042 0220 	orr.w	r2, r2, #32
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e7f4      	b.n	80040ea <HAL_CAN_GetRxMessage+0xea>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004100:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004102:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004106:	e789      	b.n	800401c <HAL_CAN_GetRxMessage+0x1c>

08004108 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004108:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800410c:	3b01      	subs	r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d805      	bhi.n	800411e <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004112:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8004114:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004116:	6953      	ldr	r3, [r2, #20]
 8004118:	4319      	orrs	r1, r3
 800411a:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800411c:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800411e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004124:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8004126:	2001      	movs	r0, #1
  }
}
 8004128:	4770      	bx	lr

0800412a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 800412a:	4770      	bx	lr

0800412c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 800412c:	4770      	bx	lr

0800412e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8004130:	4770      	bx	lr

08004132 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8004132:	4770      	bx	lr

08004134 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8004134:	4770      	bx	lr

08004136 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8004136:	4770      	bx	lr

08004138 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8004138:	4770      	bx	lr

0800413a <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 800413a:	4770      	bx	lr

0800413c <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 800413c:	4770      	bx	lr

0800413e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 800413e:	4770      	bx	lr

08004140 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_IRQHandler>:
{
 8004142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004146:	6803      	ldr	r3, [r0, #0]
{
 8004148:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800414a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800414c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004150:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004154:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004158:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800415c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004160:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004162:	d027      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004164:	f018 0f01 	tst.w	r8, #1
 8004168:	d007      	beq.n	800417a <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800416a:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800416c:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004170:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004172:	f000 80a7 	beq.w	80042c4 <HAL_CAN_IRQHandler+0x182>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004176:	f7ff ffd8 	bl	800412a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800417a:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800417c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004180:	d00a      	beq.n	8004198 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004186:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004188:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800418c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800418e:	f000 80a8 	beq.w	80042e2 <HAL_CAN_IRQHandler+0x1a0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004192:	4628      	mov	r0, r5
 8004194:	f7ff ffca 	bl	800412c <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004198:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 800419c:	d00a      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800419e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041a2:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80041a4:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80041a8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80041aa:	f000 80aa 	beq.w	8004302 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7ff ffbd 	bl	800412e <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041b4:	0732      	lsls	r2, r6, #28
 80041b6:	d507      	bpl.n	80041c8 <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041b8:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041bc:	bf1f      	itttt	ne
 80041be:	2210      	movne	r2, #16
 80041c0:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041c2:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041c6:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041c8:	0773      	lsls	r3, r6, #29
 80041ca:	d508      	bpl.n	80041de <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041cc:	f01b 0f08 	tst.w	fp, #8
 80041d0:	d005      	beq.n	80041de <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041d2:	2208      	movs	r2, #8
 80041d4:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041d6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041d8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041da:	f7ff ffac 	bl	8004136 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041de:	07b0      	lsls	r0, r6, #30
 80041e0:	d506      	bpl.n	80041f0 <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	0799      	lsls	r1, r3, #30
 80041e8:	d002      	beq.n	80041f0 <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7fe feac 	bl	8002f48 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041f0:	0672      	lsls	r2, r6, #25
 80041f2:	d507      	bpl.n	8004204 <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041f4:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041f8:	bf1f      	itttt	ne
 80041fa:	2210      	movne	r2, #16
 80041fc:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041fe:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004202:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004204:	06b3      	lsls	r3, r6, #26
 8004206:	d508      	bpl.n	800421a <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004208:	f01a 0f08 	tst.w	sl, #8
 800420c:	d005      	beq.n	800421a <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800420e:	2208      	movs	r2, #8
 8004210:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004212:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004214:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004216:	f7ff ff90 	bl	800413a <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800421a:	06f0      	lsls	r0, r6, #27
 800421c:	d506      	bpl.n	800422c <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	0799      	lsls	r1, r3, #30
 8004224:	d002      	beq.n	800422c <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004226:	4628      	mov	r0, r5
 8004228:	f7ff ff86 	bl	8004138 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800422c:	03b2      	lsls	r2, r6, #14
 800422e:	d508      	bpl.n	8004242 <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004230:	f019 0f10 	tst.w	r9, #16
 8004234:	d005      	beq.n	8004242 <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004236:	2210      	movs	r2, #16
 8004238:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 800423a:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800423c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800423e:	f7ff ff7d 	bl	800413c <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004242:	03f3      	lsls	r3, r6, #15
 8004244:	d508      	bpl.n	8004258 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004246:	f019 0f08 	tst.w	r9, #8
 800424a:	d005      	beq.n	8004258 <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800424c:	2208      	movs	r2, #8
 800424e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004250:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004252:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004254:	f7ff ff73 	bl	800413e <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004258:	0430      	lsls	r0, r6, #16
 800425a:	d52a      	bpl.n	80042b2 <HAL_CAN_IRQHandler+0x170>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800425c:	f019 0f04 	tst.w	r9, #4
 8004260:	d024      	beq.n	80042ac <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004262:	05f1      	lsls	r1, r6, #23
 8004264:	d503      	bpl.n	800426e <HAL_CAN_IRQHandler+0x12c>
 8004266:	07fa      	lsls	r2, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 8004268:	bf48      	it	mi
 800426a:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800426e:	05b3      	lsls	r3, r6, #22
 8004270:	d503      	bpl.n	800427a <HAL_CAN_IRQHandler+0x138>
 8004272:	07b8      	lsls	r0, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 8004274:	bf48      	it	mi
 8004276:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800427a:	0571      	lsls	r1, r6, #21
 800427c:	d503      	bpl.n	8004286 <HAL_CAN_IRQHandler+0x144>
 800427e:	077a      	lsls	r2, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 8004280:	bf48      	it	mi
 8004282:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004286:	0533      	lsls	r3, r6, #20
 8004288:	d510      	bpl.n	80042ac <HAL_CAN_IRQHandler+0x16a>
 800428a:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 800428e:	d00d      	beq.n	80042ac <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d056      	beq.n	8004342 <HAL_CAN_IRQHandler+0x200>
 8004294:	d845      	bhi.n	8004322 <HAL_CAN_IRQHandler+0x1e0>
 8004296:	2b20      	cmp	r3, #32
 8004298:	d04d      	beq.n	8004336 <HAL_CAN_IRQHandler+0x1f4>
 800429a:	2b30      	cmp	r3, #48	@ 0x30
 800429c:	d04e      	beq.n	800433c <HAL_CAN_IRQHandler+0x1fa>
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d046      	beq.n	8004330 <HAL_CAN_IRQHandler+0x1ee>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80042a2:	682a      	ldr	r2, [r5, #0]
 80042a4:	6993      	ldr	r3, [r2, #24]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042ac:	2204      	movs	r2, #4
 80042ae:	682b      	ldr	r3, [r5, #0]
 80042b0:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042b2:	b12c      	cbz	r4, 80042c0 <HAL_CAN_IRQHandler+0x17e>
    hcan->ErrorCode |= errorcode;
 80042b4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 80042b6:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80042b8:	4323      	orrs	r3, r4
 80042ba:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 80042bc:	f7ff ff40 	bl	8004140 <HAL_CAN_ErrorCallback>
}
 80042c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042c4:	f018 0f04 	tst.w	r8, #4
 80042c8:	d105      	bne.n	80042d6 <HAL_CAN_IRQHandler+0x194>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042ca:	f018 0f08 	tst.w	r8, #8
 80042ce:	d105      	bne.n	80042dc <HAL_CAN_IRQHandler+0x19a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042d0:	f7ff ff2e 	bl	8004130 <HAL_CAN_TxMailbox0AbortCallback>
 80042d4:	e751      	b.n	800417a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042d6:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80042da:	e74f      	b.n	800417c <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042dc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80042e0:	e74c      	b.n	800417c <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042e2:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 80042e6:	d002      	beq.n	80042ee <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042e8:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 80042ec:	e754      	b.n	8004198 <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042ee:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 80042f2:	d002      	beq.n	80042fa <HAL_CAN_IRQHandler+0x1b8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042f4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80042f8:	e74e      	b.n	8004198 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042fa:	4628      	mov	r0, r5
 80042fc:	f7ff ff19 	bl	8004132 <HAL_CAN_TxMailbox1AbortCallback>
 8004300:	e74a      	b.n	8004198 <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004302:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 8004306:	d002      	beq.n	800430e <HAL_CAN_IRQHandler+0x1cc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004308:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800430c:	e752      	b.n	80041b4 <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800430e:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 8004312:	d002      	beq.n	800431a <HAL_CAN_IRQHandler+0x1d8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004314:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8004318:	e74c      	b.n	80041b4 <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800431a:	4628      	mov	r0, r5
 800431c:	f7ff ff0a 	bl	8004134 <HAL_CAN_TxMailbox2AbortCallback>
 8004320:	e748      	b.n	80041b4 <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 8004322:	2b50      	cmp	r3, #80	@ 0x50
 8004324:	d010      	beq.n	8004348 <HAL_CAN_IRQHandler+0x206>
 8004326:	2b60      	cmp	r3, #96	@ 0x60
 8004328:	d1bb      	bne.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_CRC;
 800432a:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 800432e:	e7b8      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_STF;
 8004330:	f044 0408 	orr.w	r4, r4, #8
            break;
 8004334:	e7b5      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004336:	f044 0410 	orr.w	r4, r4, #16
            break;
 800433a:	e7b2      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_ACK;
 800433c:	f044 0420 	orr.w	r4, r4, #32
            break;
 8004340:	e7af      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BR;
 8004342:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 8004346:	e7ac      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BD;
 8004348:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 800434c:	e7a9      	b.n	80042a2 <HAL_CAN_IRQHandler+0x160>

0800434e <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 800434e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 8004350:	4770      	bx	lr
	...

08004354 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004354:	4907      	ldr	r1, [pc, #28]	@ (8004374 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004356:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800435a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004362:	0412      	lsls	r2, r2, #16
 8004364:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800436c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004370:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004372:	4770      	bx	lr
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004378:	b530      	push	{r4, r5, lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800437a:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <HAL_NVIC_SetPriority+0x58>)
 800437c:	68dc      	ldr	r4, [r3, #12]
 800437e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004382:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004386:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004388:	2b04      	cmp	r3, #4
 800438a:	bf28      	it	cs
 800438c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004394:	bf94      	ite	ls
 8004396:	2400      	movls	r4, #0
 8004398:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439a:	fa05 f303 	lsl.w	r3, r5, r3
 800439e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a2:	40a5      	lsls	r5, r4
 80043a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80043aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	bfac      	ite	ge
 80043b2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	4a07      	ldrlt	r2, [pc, #28]	@ (80043d4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	bfab      	itete	ge
 80043c0:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	e000ed14 	.word	0xe000ed14

080043d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043d8:	2800      	cmp	r0, #0
 80043da:	db07      	blt.n	80043ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043dc:	2301      	movs	r3, #1
 80043de:	0941      	lsrs	r1, r0, #5
 80043e0:	4a03      	ldr	r2, [pc, #12]	@ (80043f0 <HAL_NVIC_EnableIRQ+0x18>)
 80043e2:	f000 001f 	and.w	r0, r0, #31
 80043e6:	4083      	lsls	r3, r0
 80043e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000e100 	.word	0xe000e100

080043f4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043f4:	2800      	cmp	r0, #0
 80043f6:	db0c      	blt.n	8004412 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f8:	2201      	movs	r2, #1
 80043fa:	4906      	ldr	r1, [pc, #24]	@ (8004414 <HAL_NVIC_DisableIRQ+0x20>)
 80043fc:	0943      	lsrs	r3, r0, #5
 80043fe:	f000 001f 	and.w	r0, r0, #31
 8004402:	4082      	lsls	r2, r0
 8004404:	3320      	adds	r3, #32
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800440a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800440e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004412:	4770      	bx	lr
 8004414:	e000e100 	.word	0xe000e100

08004418 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004418:	2800      	cmp	r0, #0
 800441a:	db08      	blt.n	800442e <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441c:	2201      	movs	r2, #1
 800441e:	0943      	lsrs	r3, r0, #5
 8004420:	4903      	ldr	r1, [pc, #12]	@ (8004430 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004422:	f000 001f 	and.w	r0, r0, #31
 8004426:	4082      	lsls	r2, r0
 8004428:	3360      	adds	r3, #96	@ 0x60
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800442e:	4770      	bx	lr
 8004430:	e000e100 	.word	0xe000e100

08004434 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004434:	4603      	mov	r3, r0
{
 8004436:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8004438:	b340      	cbz	r0, 800448c <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800443a:	2114      	movs	r1, #20
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <HAL_DMA_Init+0x5c>)
 8004440:	4402      	add	r2, r0
 8004442:	fbb2 f2f1 	udiv	r2, r2, r1
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <HAL_DMA_Init+0x60>)
 800444c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004454:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8004458:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445a:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 800445c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445e:	4322      	orrs	r2, r4
 8004460:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004462:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004466:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004468:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800446a:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446e:	4322      	orrs	r2, r4
 8004470:	699c      	ldr	r4, [r3, #24]
 8004472:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004474:	69dc      	ldr	r4, [r3, #28]
 8004476:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8004478:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800447a:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800447e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004480:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004482:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8004486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 800448a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
 800448e:	e7fc      	b.n	800448a <HAL_DMA_Init+0x56>
 8004490:	bffdfff8 	.word	0xbffdfff8
 8004494:	40020000 	.word	0x40020000

08004498 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004498:	4603      	mov	r3, r0
{
 800449a:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800449c:	b328      	cbz	r0, 80044ea <HAL_DMA_DeInit+0x52>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800449e:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 80044a0:	4c13      	ldr	r4, [pc, #76]	@ (80044f0 <HAL_DMA_DeInit+0x58>)
  __HAL_DMA_DISABLE(hdma);
 80044a2:	680a      	ldr	r2, [r1, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 80044aa:	6802      	ldr	r2, [r0, #0]
 80044ac:	2000      	movs	r0, #0
 80044ae:	6010      	str	r0, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	6050      	str	r0, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	6090      	str	r0, [r2, #8]
  hdma->Instance->CMAR = 0U;
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	60d0      	str	r0, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <HAL_DMA_DeInit+0x5c>)
  hdma->DmaBaseAddress = DMA1;
 80044c0:	63dc      	str	r4, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044c2:	440a      	add	r2, r1
 80044c4:	2114      	movs	r1, #20
 80044c6:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80044ca:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80044d0:	fa01 f202 	lsl.w	r2, r1, r2
 80044d4:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 80044d6:	e9c3 000a 	strd	r0, r0, [r3, #40]	@ 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 80044da:	e9c3 000c 	strd	r0, r0, [r3, #48]	@ 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044de:	6398      	str	r0, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044e0:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 80044e4:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

  return HAL_OK;
}
 80044e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044ea:	2001      	movs	r0, #1
 80044ec:	e7fc      	b.n	80044e8 <HAL_DMA_DeInit+0x50>
 80044ee:	bf00      	nop
 80044f0:	40020000 	.word	0x40020000
 80044f4:	bffdfff8 	.word	0xbffdfff8

080044f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044fa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80044fe:	2c01      	cmp	r4, #1
 8004500:	d03d      	beq.n	800457e <HAL_DMA_Start_IT+0x86>
 8004502:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004504:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8004508:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800450c:	2d01      	cmp	r5, #1
 800450e:	b2ec      	uxtb	r4, r5
 8004510:	f04f 0500 	mov.w	r5, #0
 8004514:	d131      	bne.n	800457a <HAL_DMA_Start_IT+0x82>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004516:	2602      	movs	r6, #2
 8004518:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800451c:	6806      	ldr	r6, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800451e:	6385      	str	r5, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8004520:	6835      	ldr	r5, [r6, #0]
 8004522:	f025 0501 	bic.w	r5, r5, #1
 8004526:	6035      	str	r5, [r6, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004528:	e9d0 560f 	ldrd	r5, r6, [r0, #60]	@ 0x3c
 800452c:	40b4      	lsls	r4, r6
 800452e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004530:	6804      	ldr	r4, [r0, #0]
 8004532:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004534:	6843      	ldr	r3, [r0, #4]
 8004536:	2b10      	cmp	r3, #16
 8004538:	6803      	ldr	r3, [r0, #0]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800453a:	bf0b      	itete	eq
 800453c:	609a      	streq	r2, [r3, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800453e:	6099      	strne	r1, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004540:	6803      	ldreq	r3, [r0, #0]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004542:	6803      	ldrne	r3, [r0, #0]
    hdma->Instance->CMAR = SrcAddress;
 8004544:	bf0c      	ite	eq
 8004546:	60d9      	streq	r1, [r3, #12]
    hdma->Instance->CMAR = DstAddress;
 8004548:	60da      	strne	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800454a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800454c:	6803      	ldr	r3, [r0, #0]
    if(NULL != hdma->XferHalfCpltCallback)
 800454e:	b152      	cbz	r2, 8004566 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	f042 020e 	orr.w	r2, r2, #14
 8004556:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004558:	6802      	ldr	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]
}
 8004564:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f022 0204 	bic.w	r2, r2, #4
 800456c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800456e:	6802      	ldr	r2, [r0, #0]
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f043 030a 	orr.w	r3, r3, #10
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e7ee      	b.n	8004558 <HAL_DMA_Start_IT+0x60>
    __HAL_UNLOCK(hdma); 
 800457a:	f880 5020 	strb.w	r5, [r0, #32]
  __HAL_LOCK(hdma);
 800457e:	2002      	movs	r0, #2
 8004580:	e7f0      	b.n	8004564 <HAL_DMA_Start_IT+0x6c>

08004582 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004582:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8004586:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004588:	2a02      	cmp	r2, #2
 800458a:	d006      	beq.n	800459a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458c:	2204      	movs	r2, #4
 800458e:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8004590:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004598:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800459a:	6801      	ldr	r1, [r0, #0]
 800459c:	680a      	ldr	r2, [r1, #0]
 800459e:	f022 020e 	bic.w	r2, r2, #14
 80045a2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80045a4:	6801      	ldr	r1, [r0, #0]
 80045a6:	680a      	ldr	r2, [r1, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045ae:	2101      	movs	r1, #1
 80045b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	6042      	str	r2, [r0, #4]
  return status; 
 80045ba:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80045bc:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80045c0:	e7e7      	b.n	8004592 <HAL_DMA_Abort+0x10>
	...

080045c4 <HAL_DMA_IRQHandler>:
{
 80045c4:	b430      	push	{r4, r5}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045c6:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045c8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045ca:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045cc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045ce:	40ac      	lsls	r4, r5
  uint32_t source_it = hdma->Instance->CCR;
 80045d0:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045d2:	420c      	tst	r4, r1
  uint32_t source_it = hdma->Instance->CCR;
 80045d4:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045d6:	d033      	beq.n	8004640 <HAL_DMA_IRQHandler+0x7c>
 80045d8:	0754      	lsls	r4, r2, #29
 80045da:	d531      	bpl.n	8004640 <HAL_DMA_IRQHandler+0x7c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	0695      	lsls	r5, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e0:	bf5e      	ittt	pl
 80045e2:	681a      	ldrpl	r2, [r3, #0]
 80045e4:	f022 0204 	bicpl.w	r2, r2, #4
 80045e8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045ea:	6803      	ldr	r3, [r0, #0]
 80045ec:	4a3f      	ldr	r2, [pc, #252]	@ (80046ec <HAL_DMA_IRQHandler+0x128>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d019      	beq.n	8004626 <HAL_DMA_IRQHandler+0x62>
 80045f2:	3214      	adds	r2, #20
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_DMA_IRQHandler+0x66>
 80045f8:	3214      	adds	r2, #20
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d017      	beq.n	800462e <HAL_DMA_IRQHandler+0x6a>
 80045fe:	3214      	adds	r2, #20
 8004600:	4293      	cmp	r3, r2
 8004602:	d017      	beq.n	8004634 <HAL_DMA_IRQHandler+0x70>
 8004604:	3214      	adds	r2, #20
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <HAL_DMA_IRQHandler+0x76>
 800460a:	3214      	adds	r2, #20
 800460c:	4293      	cmp	r3, r2
 800460e:	bf14      	ite	ne
 8004610:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8004614:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8004618:	4a35      	ldr	r2, [pc, #212]	@ (80046f0 <HAL_DMA_IRQHandler+0x12c>)
 800461a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800461c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 800461e:	2b00      	cmp	r3, #0
 8004620:	d061      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x122>
}
 8004622:	bc30      	pop	{r4, r5}
      hdma->XferErrorCallback(hdma);
 8004624:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004626:	2304      	movs	r3, #4
 8004628:	e7f6      	b.n	8004618 <HAL_DMA_IRQHandler+0x54>
 800462a:	2340      	movs	r3, #64	@ 0x40
 800462c:	e7f4      	b.n	8004618 <HAL_DMA_IRQHandler+0x54>
 800462e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004632:	e7f1      	b.n	8004618 <HAL_DMA_IRQHandler+0x54>
 8004634:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004638:	e7ee      	b.n	8004618 <HAL_DMA_IRQHandler+0x54>
 800463a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800463e:	e7eb      	b.n	8004618 <HAL_DMA_IRQHandler+0x54>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004640:	2402      	movs	r4, #2
 8004642:	40ac      	lsls	r4, r5
 8004644:	420c      	tst	r4, r1
 8004646:	d036      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xf2>
 8004648:	0794      	lsls	r4, r2, #30
 800464a:	d534      	bpl.n	80046b6 <HAL_DMA_IRQHandler+0xf2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	0691      	lsls	r1, r2, #26
 8004650:	d406      	bmi.n	8004660 <HAL_DMA_IRQHandler+0x9c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	f022 020a 	bic.w	r2, r2, #10
 8004658:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800465a:	2301      	movs	r3, #1
 800465c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004660:	6803      	ldr	r3, [r0, #0]
 8004662:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <HAL_DMA_IRQHandler+0x128>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d019      	beq.n	800469c <HAL_DMA_IRQHandler+0xd8>
 8004668:	3214      	adds	r2, #20
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_DMA_IRQHandler+0xdc>
 800466e:	3214      	adds	r2, #20
 8004670:	4293      	cmp	r3, r2
 8004672:	d017      	beq.n	80046a4 <HAL_DMA_IRQHandler+0xe0>
 8004674:	3214      	adds	r2, #20
 8004676:	4293      	cmp	r3, r2
 8004678:	d017      	beq.n	80046aa <HAL_DMA_IRQHandler+0xe6>
 800467a:	3214      	adds	r2, #20
 800467c:	4293      	cmp	r3, r2
 800467e:	d017      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xec>
 8004680:	3214      	adds	r2, #20
 8004682:	4293      	cmp	r3, r2
 8004684:	bf14      	ite	ne
 8004686:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 800468a:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_DMA_IRQHandler+0x12c>)
 8004690:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004692:	2300      	movs	r3, #0
 8004694:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004698:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800469a:	e7c0      	b.n	800461e <HAL_DMA_IRQHandler+0x5a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800469c:	2302      	movs	r3, #2
 800469e:	e7f6      	b.n	800468e <HAL_DMA_IRQHandler+0xca>
 80046a0:	2320      	movs	r3, #32
 80046a2:	e7f4      	b.n	800468e <HAL_DMA_IRQHandler+0xca>
 80046a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046a8:	e7f1      	b.n	800468e <HAL_DMA_IRQHandler+0xca>
 80046aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046ae:	e7ee      	b.n	800468e <HAL_DMA_IRQHandler+0xca>
 80046b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046b4:	e7eb      	b.n	800468e <HAL_DMA_IRQHandler+0xca>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80046b6:	2408      	movs	r4, #8
 80046b8:	40ac      	lsls	r4, r5
 80046ba:	420c      	tst	r4, r1
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x122>
 80046be:	0712      	lsls	r2, r2, #28
 80046c0:	d511      	bpl.n	80046e6 <HAL_DMA_IRQHandler+0x122>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	f022 020e 	bic.w	r2, r2, #14
 80046c8:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046ca:	2301      	movs	r3, #1
 80046cc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80046ce:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80046d0:	fa03 f202 	lsl.w	r2, r3, r2
 80046d4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046d6:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80046d8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80046dc:	2300      	movs	r3, #0
 80046de:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80046e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80046e4:	e79b      	b.n	800461e <HAL_DMA_IRQHandler+0x5a>
}
 80046e6:	bc30      	pop	{r4, r5}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40020008 	.word	0x40020008
 80046f0:	40020000 	.word	0x40020000

080046f4 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80046f4:	4a11      	ldr	r2, [pc, #68]	@ (800473c <FLASH_SetErrorCode+0x48>)
 80046f6:	68d3      	ldr	r3, [r2, #12]
 80046f8:	f013 0310 	ands.w	r3, r3, #16
 80046fc:	d005      	beq.n	800470a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046fe:	4910      	ldr	r1, [pc, #64]	@ (8004740 <FLASH_SetErrorCode+0x4c>)
 8004700:	69cb      	ldr	r3, [r1, #28]
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004708:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800470a:	68d2      	ldr	r2, [r2, #12]
 800470c:	0750      	lsls	r0, r2, #29
 800470e:	d506      	bpl.n	800471e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004710:	490b      	ldr	r1, [pc, #44]	@ (8004740 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004712:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004716:	69ca      	ldr	r2, [r1, #28]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800471e:	4a07      	ldr	r2, [pc, #28]	@ (800473c <FLASH_SetErrorCode+0x48>)
 8004720:	69d1      	ldr	r1, [r2, #28]
 8004722:	07c9      	lsls	r1, r1, #31
 8004724:	d508      	bpl.n	8004738 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004726:	4806      	ldr	r0, [pc, #24]	@ (8004740 <FLASH_SetErrorCode+0x4c>)
 8004728:	69c1      	ldr	r1, [r0, #28]
 800472a:	f041 0104 	orr.w	r1, r1, #4
 800472e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004730:	69d1      	ldr	r1, [r2, #28]
 8004732:	f021 0101 	bic.w	r1, r1, #1
 8004736:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004738:	60d3      	str	r3, [r2, #12]
}  
 800473a:	4770      	bx	lr
 800473c:	40022000 	.word	0x40022000
 8004740:	20000da0 	.word	0x20000da0

08004744 <HAL_FLASH_EndOfOperationCallback>:
}
 8004744:	4770      	bx	lr

08004746 <HAL_FLASH_OperationErrorCallback>:
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 8004746:	4770      	bx	lr

08004748 <HAL_FLASH_IRQHandler>:
{
 8004748:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800474a:	4b42      	ldr	r3, [pc, #264]	@ (8004854 <HAL_FLASH_IRQHandler+0x10c>)
 800474c:	4c42      	ldr	r4, [pc, #264]	@ (8004858 <HAL_FLASH_IRQHandler+0x110>)
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	f012 0f10 	tst.w	r2, #16
 8004754:	d102      	bne.n	800475c <HAL_FLASH_IRQHandler+0x14>
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	075a      	lsls	r2, r3, #29
 800475a:	d50a      	bpl.n	8004772 <HAL_FLASH_IRQHandler+0x2a>
    pFlash.Address = 0xFFFFFFFFU;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 8004760:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8004762:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8004764:	f7ff ffc6 	bl	80046f4 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004768:	4628      	mov	r0, r5
 800476a:	f7ff ffec 	bl	8004746 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800476e:	2300      	movs	r3, #0
 8004770:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004772:	4d38      	ldr	r5, [pc, #224]	@ (8004854 <HAL_FLASH_IRQHandler+0x10c>)
 8004774:	68eb      	ldr	r3, [r5, #12]
 8004776:	069b      	lsls	r3, r3, #26
 8004778:	d518      	bpl.n	80047ac <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800477a:	2320      	movs	r3, #32
 800477c:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800477e:	7823      	ldrb	r3, [r4, #0]
 8004780:	b1a3      	cbz	r3, 80047ac <HAL_FLASH_IRQHandler+0x64>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8004782:	7823      	ldrb	r3, [r4, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d127      	bne.n	80047d8 <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	b1db      	cbz	r3, 80047ca <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8004792:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004794:	f7ff ffd6 	bl	8004744 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8004798:	68a0      	ldr	r0, [r4, #8]
 800479a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
          pFlash.Address = addresstmp;
 800479e:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80047a0:	692b      	ldr	r3, [r5, #16]
 80047a2:	f023 0302 	bic.w	r3, r3, #2
 80047a6:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 80047a8:	f000 f858 	bl	800485c <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80047ac:	7823      	ldrb	r3, [r4, #0]
 80047ae:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80047b2:	b94b      	cbnz	r3, 80047c8 <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <HAL_FLASH_IRQHandler+0x10c>)
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	f022 0207 	bic.w	r2, r2, #7
 80047bc:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	f422 52a0 	bic.w	r2, r2, #5120	@ 0x1400
 80047c4:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80047c6:	7621      	strb	r1, [r4, #24]
}
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80047d0:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80047d2:	f7ff ffb7 	bl	8004744 <HAL_FLASH_EndOfOperationCallback>
 80047d6:	e7e9      	b.n	80047ac <HAL_FLASH_IRQHandler+0x64>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80047d8:	7823      	ldrb	r3, [r4, #0]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d109      	bne.n	80047f2 <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80047de:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80047e0:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80047e2:	f023 0304 	bic.w	r3, r3, #4
 80047e6:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80047e8:	f7ff ffac 	bl	8004744 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	7023      	strb	r3, [r4, #0]
 80047f0:	e7dc      	b.n	80047ac <HAL_FLASH_IRQHandler+0x64>
        pFlash.DataRemaining--;
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	b1d3      	cbz	r3, 8004832 <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2U;
 80047fc:	68a3      	ldr	r3, [r4, #8]
 80047fe:	3302      	adds	r3, #2
 8004800:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8004802:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8004804:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004808:	0c02      	lsrs	r2, r0, #16
 800480a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800480e:	0c0b      	lsrs	r3, r1, #16
 8004810:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004814:	692b      	ldr	r3, [r5, #16]
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800481c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004820:	2300      	movs	r3, #0
 8004822:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004824:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8004826:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 800482e:	8032      	strh	r2, [r6, #0]
}
 8004830:	e7bc      	b.n	80047ac <HAL_FLASH_IRQHandler+0x64>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8004832:	7823      	ldrb	r3, [r4, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d106      	bne.n	8004846 <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004838:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800483a:	f7ff ff83 	bl	8004744 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	e7d2      	b.n	80047ec <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8004846:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8004848:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800484a:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800484c:	bf0c      	ite	eq
 800484e:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8004850:	3806      	subne	r0, #6
 8004852:	e7f2      	b.n	800483a <HAL_FLASH_IRQHandler+0xf2>
 8004854:	40022000 	.word	0x40022000
 8004858:	20000da0 	.word	0x20000da0

0800485c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800485c:	2200      	movs	r2, #0
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <FLASH_PageErase+0x1c>)
 8004860:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004862:	4b06      	ldr	r3, [pc, #24]	@ (800487c <FLASH_PageErase+0x20>)
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	f042 0202 	orr.w	r2, r2, #2
 800486a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800486c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004874:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004876:	4770      	bx	lr
 8004878:	20000da0 	.word	0x20000da0
 800487c:	40022000 	.word	0x40022000

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004884:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004886:	4615      	mov	r5, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004888:	4e79      	ldr	r6, [pc, #484]	@ (8004a70 <HAL_GPIO_Init+0x1f0>)
 800488a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a74 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 800488c:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 8004a78 <HAL_GPIO_Init+0x1f8>
 8004890:	4f7a      	ldr	r7, [pc, #488]	@ (8004a7c <HAL_GPIO_Init+0x1fc>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004892:	f8d1 e000 	ldr.w	lr, [r1]
 8004896:	fa3e f405 	lsrs.w	r4, lr, r5
 800489a:	d102      	bne.n	80048a2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800489c:	b003      	add	sp, #12
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80048a2:	f04f 0801 	mov.w	r8, #1
 80048a6:	fa08 f805 	lsl.w	r8, r8, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048aa:	ea0e 0408 	and.w	r4, lr, r8
    if (iocurrent == ioposition)
 80048ae:	ea38 0e0e 	bics.w	lr, r8, lr
 80048b2:	f040 80a1 	bne.w	80049f8 <HAL_GPIO_Init+0x178>
      switch (GPIO_Init->Mode)
 80048b6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80048ba:	f1be 0f03 	cmp.w	lr, #3
 80048be:	d809      	bhi.n	80048d4 <HAL_GPIO_Init+0x54>
 80048c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80048c4:	f1be 0f02 	cmp.w	lr, #2
 80048c8:	f200 80a6 	bhi.w	8004a18 <HAL_GPIO_Init+0x198>
 80048cc:	e8df f00e 	tbb	[pc, lr]
 80048d0:	bdb8      	.short	0xbdb8
 80048d2:	c3          	.byte	0xc3
 80048d3:	00          	.byte	0x00
 80048d4:	f1be 0f12 	cmp.w	lr, #18
 80048d8:	f000 80ba 	beq.w	8004a50 <HAL_GPIO_Init+0x1d0>
 80048dc:	f200 808e 	bhi.w	80049fc <HAL_GPIO_Init+0x17c>
 80048e0:	f1be 0f11 	cmp.w	lr, #17
 80048e4:	f000 80ae 	beq.w	8004a44 <HAL_GPIO_Init+0x1c4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048e8:	2cff      	cmp	r4, #255	@ 0xff
 80048ea:	bf98      	it	ls
 80048ec:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048ee:	f04f 090f 	mov.w	r9, #15
 80048f2:	ea4f 0e85 	mov.w	lr, r5, lsl #2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048f6:	bf84      	itt	hi
 80048f8:	f100 0a04 	addhi.w	sl, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048fc:	f1ae 0e20 	subhi.w	lr, lr, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004900:	f8da 8000 	ldr.w	r8, [sl]
 8004904:	fa09 fb0e 	lsl.w	fp, r9, lr
 8004908:	ea28 080b 	bic.w	r8, r8, fp
 800490c:	fa02 fe0e 	lsl.w	lr, r2, lr
 8004910:	ea48 080e 	orr.w	r8, r8, lr
 8004914:	f8ca 8000 	str.w	r8, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004918:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800491c:	f01e 5f80 	tst.w	lr, #268435456	@ 0x10000000
 8004920:	d06a      	beq.n	80049f8 <HAL_GPIO_Init+0x178>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004922:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8004926:	f025 0803 	bic.w	r8, r5, #3
 800492a:	f04e 0e01 	orr.w	lr, lr, #1
 800492e:	f8c6 e018 	str.w	lr, [r6, #24]
 8004932:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8004936:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 800493a:	f00e 0e01 	and.w	lr, lr, #1
 800493e:	f8cd e004 	str.w	lr, [sp, #4]
 8004942:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004946:	f005 0a03 	and.w	sl, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800494a:	f8dd e004 	ldr.w	lr, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800494e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004952:	f8d8 e008 	ldr.w	lr, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004956:	fa09 f90a 	lsl.w	r9, r9, sl
 800495a:	ea2e 0909 	bic.w	r9, lr, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800495e:	f8df e120 	ldr.w	lr, [pc, #288]	@ 8004a80 <HAL_GPIO_Init+0x200>
 8004962:	4570      	cmp	r0, lr
 8004964:	d07b      	beq.n	8004a5e <HAL_GPIO_Init+0x1de>
 8004966:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800496a:	4570      	cmp	r0, lr
 800496c:	d07a      	beq.n	8004a64 <HAL_GPIO_Init+0x1e4>
 800496e:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 8004972:	4570      	cmp	r0, lr
 8004974:	d079      	beq.n	8004a6a <HAL_GPIO_Init+0x1ea>
 8004976:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800497a:	4570      	cmp	r0, lr
 800497c:	bf14      	ite	ne
 800497e:	f04f 0e04 	movne.w	lr, #4
 8004982:	f04f 0e03 	moveq.w	lr, #3
 8004986:	fa0e fe0a 	lsl.w	lr, lr, sl
 800498a:	ea4e 0e09 	orr.w	lr, lr, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800498e:	f8c8 e008 	str.w	lr, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004992:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8004996:	f41e 1f80 	tst.w	lr, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800499a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800499e:	bf14      	ite	ne
 80049a0:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049a4:	ea2e 0e04 	biceq.w	lr, lr, r4
 80049a8:	f8c3 e008 	str.w	lr, [r3, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ac:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80049b0:	f41e 1f00 	tst.w	lr, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80049b4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80049b8:	bf14      	ite	ne
 80049ba:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049be:	ea2e 0e04 	biceq.w	lr, lr, r4
 80049c2:	f8c3 e00c 	str.w	lr, [r3, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049c6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80049ca:	f41e 3f00 	tst.w	lr, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80049ce:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80049d2:	bf14      	ite	ne
 80049d4:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049d8:	ea2e 0e04 	biceq.w	lr, lr, r4
 80049dc:	f8c3 e004 	str.w	lr, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049e0:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80049e4:	f41e 3f80 	tst.w	lr, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80049e8:	f8d3 e000 	ldr.w	lr, [r3]
 80049ec:	bf14      	ite	ne
 80049ee:	ea4e 0404 	orrne.w	r4, lr, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049f2:	ea2e 0404 	biceq.w	r4, lr, r4
 80049f6:	601c      	str	r4, [r3, #0]
	position++;
 80049f8:	3501      	adds	r5, #1
 80049fa:	e74a      	b.n	8004892 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80049fc:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8004a84 <HAL_GPIO_Init+0x204>
 8004a00:	45ce      	cmp	lr, r9
 8004a02:	d009      	beq.n	8004a18 <HAL_GPIO_Init+0x198>
 8004a04:	d814      	bhi.n	8004a30 <HAL_GPIO_Init+0x1b0>
 8004a06:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8004a0a:	45ce      	cmp	lr, r9
 8004a0c:	d004      	beq.n	8004a18 <HAL_GPIO_Init+0x198>
 8004a0e:	45e6      	cmp	lr, ip
 8004a10:	d002      	beq.n	8004a18 <HAL_GPIO_Init+0x198>
 8004a12:	45be      	cmp	lr, r7
 8004a14:	f47f af68 	bne.w	80048e8 <HAL_GPIO_Init+0x68>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a18:	688a      	ldr	r2, [r1, #8]
 8004a1a:	b1f2      	cbz	r2, 8004a5a <HAL_GPIO_Init+0x1da>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a1c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8004a1e:	bf08      	it	eq
 8004a20:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a24:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8004a28:	bf18      	it	ne
 8004a2a:	f8c0 8014 	strne.w	r8, [r0, #20]
 8004a2e:	e75b      	b.n	80048e8 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 8004a30:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8004a88 <HAL_GPIO_Init+0x208>
 8004a34:	45ce      	cmp	lr, r9
 8004a36:	d0ef      	beq.n	8004a18 <HAL_GPIO_Init+0x198>
 8004a38:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8004a3c:	45ce      	cmp	lr, r9
 8004a3e:	e7e9      	b.n	8004a14 <HAL_GPIO_Init+0x194>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a40:	68ca      	ldr	r2, [r1, #12]
          break;
 8004a42:	e751      	b.n	80048e8 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a44:	68ca      	ldr	r2, [r1, #12]
 8004a46:	3204      	adds	r2, #4
          break;
 8004a48:	e74e      	b.n	80048e8 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a4a:	68ca      	ldr	r2, [r1, #12]
 8004a4c:	3208      	adds	r2, #8
          break;
 8004a4e:	e74b      	b.n	80048e8 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a50:	68ca      	ldr	r2, [r1, #12]
 8004a52:	320c      	adds	r2, #12
          break;
 8004a54:	e748      	b.n	80048e8 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 8004a56:	2200      	movs	r2, #0
 8004a58:	e746      	b.n	80048e8 <HAL_GPIO_Init+0x68>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	e744      	b.n	80048e8 <HAL_GPIO_Init+0x68>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a5e:	f04f 0e00 	mov.w	lr, #0
 8004a62:	e790      	b.n	8004986 <HAL_GPIO_Init+0x106>
 8004a64:	f04f 0e01 	mov.w	lr, #1
 8004a68:	e78d      	b.n	8004986 <HAL_GPIO_Init+0x106>
 8004a6a:	f04f 0e02 	mov.w	lr, #2
 8004a6e:	e78a      	b.n	8004986 <HAL_GPIO_Init+0x106>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010400 	.word	0x40010400
 8004a78:	10210000 	.word	0x10210000
 8004a7c:	10110000 	.word	0x10110000
 8004a80:	40010800 	.word	0x40010800
 8004a84:	10220000 	.word	0x10220000
 8004a88:	10310000 	.word	0x10310000

08004a8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004a90:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8004a94:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a96:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004a9a:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a9e:	eb00 030b 	add.w	r3, r0, fp
 8004aa2:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b60 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8004aa6:	fa31 f402 	lsrs.w	r4, r1, r2
 8004aaa:	d102      	bne.n	8004ab2 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8004aac:	b003      	add	sp, #12
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ab2:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8004ab6:	400f      	ands	r7, r1
 8004ab8:	d049      	beq.n	8004b4e <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8004aba:	f022 0403 	bic.w	r4, r2, #3
 8004abe:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004ac2:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004ac6:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8004aca:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004acc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004ad0:	fa08 f90c 	lsl.w	r9, r8, ip
 8004ad4:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ad8:	4d22      	ldr	r5, [pc, #136]	@ (8004b64 <HAL_GPIO_DeInit+0xd8>)
 8004ada:	42a8      	cmp	r0, r5
 8004adc:	d039      	beq.n	8004b52 <HAL_GPIO_DeInit+0xc6>
 8004ade:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004ae2:	42a8      	cmp	r0, r5
 8004ae4:	d037      	beq.n	8004b56 <HAL_GPIO_DeInit+0xca>
 8004ae6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004aea:	42a8      	cmp	r0, r5
 8004aec:	d035      	beq.n	8004b5a <HAL_GPIO_DeInit+0xce>
 8004aee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004af2:	42a8      	cmp	r0, r5
 8004af4:	bf0c      	ite	eq
 8004af6:	2503      	moveq	r5, #3
 8004af8:	2504      	movne	r5, #4
 8004afa:	fa05 f50c 	lsl.w	r5, r5, ip
 8004afe:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004b00:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b04:	d10f      	bne.n	8004b26 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004b06:	681d      	ldr	r5, [r3, #0]
 8004b08:	4035      	ands	r5, r6
 8004b0a:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004b0c:	685d      	ldr	r5, [r3, #4]
 8004b0e:	4035      	ands	r5, r6
 8004b10:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004b12:	68dd      	ldr	r5, [r3, #12]
 8004b14:	4035      	ands	r5, r6
 8004b16:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004b18:	689d      	ldr	r5, [r3, #8]
 8004b1a:	4035      	ands	r5, r6
 8004b1c:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004b1e:	68a5      	ldr	r5, [r4, #8]
 8004b20:	ea25 0509 	bic.w	r5, r5, r9
 8004b24:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b26:	2fff      	cmp	r7, #255	@ 0xff
 8004b28:	bf94      	ite	ls
 8004b2a:	4607      	movls	r7, r0
 8004b2c:	9f01      	ldrhi	r7, [sp, #4]
 8004b2e:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004b32:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b34:	bf88      	it	hi
 8004b36:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004b38:	fa08 fc04 	lsl.w	ip, r8, r4
 8004b3c:	ea25 050c 	bic.w	r5, r5, ip
 8004b40:	fa0b f404 	lsl.w	r4, fp, r4
 8004b44:	4325      	orrs	r5, r4
 8004b46:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004b48:	68c4      	ldr	r4, [r0, #12]
 8004b4a:	4034      	ands	r4, r6
 8004b4c:	60c4      	str	r4, [r0, #12]
    position++;
 8004b4e:	3201      	adds	r2, #1
 8004b50:	e7a9      	b.n	8004aa6 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b52:	2500      	movs	r5, #0
 8004b54:	e7d1      	b.n	8004afa <HAL_GPIO_DeInit+0x6e>
 8004b56:	2501      	movs	r5, #1
 8004b58:	e7cf      	b.n	8004afa <HAL_GPIO_DeInit+0x6e>
 8004b5a:	2502      	movs	r5, #2
 8004b5c:	e7cd      	b.n	8004afa <HAL_GPIO_DeInit+0x6e>
 8004b5e:	bf00      	nop
 8004b60:	40010400 	.word	0x40010400
 8004b64:	40010800 	.word	0x40010800

08004b68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b68:	6883      	ldr	r3, [r0, #8]
 8004b6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004b6c:	bf14      	ite	ne
 8004b6e:	2001      	movne	r0, #1
 8004b70:	2000      	moveq	r0, #0
 8004b72:	4770      	bx	lr

08004b74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b74:	b10a      	cbz	r2, 8004b7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b76:	6101      	str	r1, [r0, #16]
  }
}
 8004b78:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b7a:	0409      	lsls	r1, r1, #16
 8004b7c:	e7fb      	b.n	8004b76 <HAL_GPIO_WritePin+0x2>
	...

08004b80 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b80:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <HAL_PWR_EnterSLEEPMode+0x1c>)

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b82:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b84:	6913      	ldr	r3, [r2, #16]
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b8c:	d101      	bne.n	8004b92 <HAL_PWR_EnterSLEEPMode+0x12>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004b8e:	bf30      	wfi
 8004b90:	4770      	bx	lr
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b92:	bf40      	sev
    __WFE();
 8004b94:	bf20      	wfe
    __WFE();
 8004b96:	bf20      	wfe
  }
}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004ba0:	4a02      	ldr	r2, [pc, #8]	@ (8004bac <HAL_PWR_EnableSleepOnExit+0xc>)
 8004ba2:	6913      	ldr	r3, [r2, #16]
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	6113      	str	r3, [r2, #16]
}
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_PWR_PVD_IRQHandler>:
{
 8004bb4:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004bb6:	4c05      	ldr	r4, [pc, #20]	@ (8004bcc <HAL_PWR_PVD_IRQHandler+0x18>)
 8004bb8:	6963      	ldr	r3, [r4, #20]
 8004bba:	03db      	lsls	r3, r3, #15
 8004bbc:	d504      	bpl.n	8004bc8 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8004bbe:	f7ff fff7 	bl	8004bb0 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004bc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bc6:	6163      	str	r3, [r4, #20]
}
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	bf00      	nop
 8004bcc:	40010400 	.word	0x40010400

08004bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	b338      	cbz	r0, 8004c28 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd8:	6803      	ldr	r3, [r0, #0]
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d410      	bmi.n	8004c00 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	079f      	lsls	r7, r3, #30
 8004be2:	d459      	bmi.n	8004c98 <HAL_RCC_OscConfig+0xc8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	0719      	lsls	r1, r3, #28
 8004be8:	f100 8090 	bmi.w	8004d0c <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	075a      	lsls	r2, r3, #29
 8004bf0:	f100 80bc 	bmi.w	8004d6c <HAL_RCC_OscConfig+0x19c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf4:	69e3      	ldr	r3, [r4, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 8124 	bne.w	8004e44 <HAL_RCC_OscConfig+0x274>
        }
      }
    }
  }

  return HAL_OK;
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e02b      	b.n	8004c58 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c00:	4d8c      	ldr	r5, [pc, #560]	@ (8004e34 <HAL_RCC_OscConfig+0x264>)
 8004c02:	686b      	ldr	r3, [r5, #4]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d007      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c0c:	686b      	ldr	r3, [r5, #4]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d10a      	bne.n	8004c2c <HAL_RCC_OscConfig+0x5c>
 8004c16:	686b      	ldr	r3, [r5, #4]
 8004c18:	03de      	lsls	r6, r3, #15
 8004c1a:	d507      	bpl.n	8004c2c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	039d      	lsls	r5, r3, #14
 8004c20:	d5dd      	bpl.n	8004bde <HAL_RCC_OscConfig+0xe>
 8004c22:	6863      	ldr	r3, [r4, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1da      	bne.n	8004bde <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
 8004c2a:	e015      	b.n	8004c58 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c32:	d114      	bne.n	8004c5e <HAL_RCC_OscConfig+0x8e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	b1fb      	cbz	r3, 8004c80 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 8004c40:	f7fe fcc8 	bl	80035d4 <HAL_GetTick>
 8004c44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	0398      	lsls	r0, r3, #14
 8004c4a:	d4c8      	bmi.n	8004bde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fe fcc2 	bl	80035d4 <HAL_GetTick>
 8004c50:	1b80      	subs	r0, r0, r6
 8004c52:	2864      	cmp	r0, #100	@ 0x64
 8004c54:	d9f7      	bls.n	8004c46 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8004c56:	2003      	movs	r0, #3
}
 8004c58:	b002      	add	sp, #8
 8004c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5e:	b93b      	cbnz	r3, 8004c70 <HAL_RCC_OscConfig+0xa0>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c6e:	e7e4      	b.n	8004c3a <HAL_RCC_OscConfig+0x6a>
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	d1f4      	bne.n	8004c62 <HAL_RCC_OscConfig+0x92>
 8004c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	e7d9      	b.n	8004c34 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 8004c80:	f7fe fca8 	bl	80035d4 <HAL_GetTick>
 8004c84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	0399      	lsls	r1, r3, #14
 8004c8a:	d5a8      	bpl.n	8004bde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fe fca2 	bl	80035d4 <HAL_GetTick>
 8004c90:	1b80      	subs	r0, r0, r6
 8004c92:	2864      	cmp	r0, #100	@ 0x64
 8004c94:	d9f7      	bls.n	8004c86 <HAL_RCC_OscConfig+0xb6>
 8004c96:	e7de      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c98:	4d66      	ldr	r5, [pc, #408]	@ (8004e34 <HAL_RCC_OscConfig+0x264>)
 8004c9a:	686b      	ldr	r3, [r5, #4]
 8004c9c:	f013 0f0c 	tst.w	r3, #12
 8004ca0:	d007      	beq.n	8004cb2 <HAL_RCC_OscConfig+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ca2:	686b      	ldr	r3, [r5, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d110      	bne.n	8004cce <HAL_RCC_OscConfig+0xfe>
 8004cac:	686b      	ldr	r3, [r5, #4]
 8004cae:	03da      	lsls	r2, r3, #15
 8004cb0:	d40d      	bmi.n	8004cce <HAL_RCC_OscConfig+0xfe>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	079b      	lsls	r3, r3, #30
 8004cb6:	d502      	bpl.n	8004cbe <HAL_RCC_OscConfig+0xee>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d1b4      	bne.n	8004c28 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	682b      	ldr	r3, [r5, #0]
 8004cc0:	6962      	ldr	r2, [r4, #20]
 8004cc2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cc6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	e78a      	b.n	8004be4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cce:	6922      	ldr	r2, [r4, #16]
 8004cd0:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <HAL_RCC_OscConfig+0x268>)
 8004cd2:	b16a      	cbz	r2, 8004cf0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_ENABLE();
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fc7c 	bl	80035d4 <HAL_GetTick>
 8004cdc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	079f      	lsls	r7, r3, #30
 8004ce2:	d4ec      	bmi.n	8004cbe <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fc76 	bl	80035d4 <HAL_GetTick>
 8004ce8:	1b80      	subs	r0, r0, r6
 8004cea:	2802      	cmp	r0, #2
 8004cec:	d9f7      	bls.n	8004cde <HAL_RCC_OscConfig+0x10e>
 8004cee:	e7b2      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8004cf0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004cf2:	f7fe fc6f 	bl	80035d4 <HAL_GetTick>
 8004cf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	0798      	lsls	r0, r3, #30
 8004cfc:	f57f af72 	bpl.w	8004be4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fe fc68 	bl	80035d4 <HAL_GetTick>
 8004d04:	1b80      	subs	r0, r0, r6
 8004d06:	2802      	cmp	r0, #2
 8004d08:	d9f6      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x128>
 8004d0a:	e7a4      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0c:	69a2      	ldr	r2, [r4, #24]
 8004d0e:	4e49      	ldr	r6, [pc, #292]	@ (8004e34 <HAL_RCC_OscConfig+0x264>)
 8004d10:	4b49      	ldr	r3, [pc, #292]	@ (8004e38 <HAL_RCC_OscConfig+0x268>)
 8004d12:	b1e2      	cbz	r2, 8004d4e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8004d14:	2201      	movs	r2, #1
 8004d16:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004d1a:	f7fe fc5b 	bl	80035d4 <HAL_GetTick>
 8004d1e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d20:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004d22:	079b      	lsls	r3, r3, #30
 8004d24:	d50d      	bpl.n	8004d42 <HAL_RCC_OscConfig+0x172>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d26:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004d2a:	4b44      	ldr	r3, [pc, #272]	@ (8004e3c <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d32:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004d34:	bf00      	nop
  }
  while (Delay --);
 8004d36:	9b01      	ldr	r3, [sp, #4]
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	9201      	str	r2, [sp, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f9      	bne.n	8004d34 <HAL_RCC_OscConfig+0x164>
 8004d40:	e754      	b.n	8004bec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d42:	f7fe fc47 	bl	80035d4 <HAL_GetTick>
 8004d46:	1b40      	subs	r0, r0, r5
 8004d48:	2802      	cmp	r0, #2
 8004d4a:	d9e9      	bls.n	8004d20 <HAL_RCC_OscConfig+0x150>
 8004d4c:	e783      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8004d4e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004d52:	f7fe fc3f 	bl	80035d4 <HAL_GetTick>
 8004d56:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004d5a:	079f      	lsls	r7, r3, #30
 8004d5c:	f57f af46 	bpl.w	8004bec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fe fc38 	bl	80035d4 <HAL_GetTick>
 8004d64:	1b40      	subs	r0, r0, r5
 8004d66:	2802      	cmp	r0, #2
 8004d68:	d9f6      	bls.n	8004d58 <HAL_RCC_OscConfig+0x188>
 8004d6a:	e774      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6c:	4d31      	ldr	r5, [pc, #196]	@ (8004e34 <HAL_RCC_OscConfig+0x264>)
 8004d6e:	69eb      	ldr	r3, [r5, #28]
 8004d70:	00d8      	lsls	r0, r3, #3
 8004d72:	d427      	bmi.n	8004dc4 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8004d74:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	69eb      	ldr	r3, [r5, #28]
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	61eb      	str	r3, [r5, #28]
 8004d7e:	69eb      	ldr	r3, [r5, #28]
 8004d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	4e2d      	ldr	r6, [pc, #180]	@ (8004e40 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	05d9      	lsls	r1, r3, #23
 8004d8e:	d51b      	bpl.n	8004dc8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d129      	bne.n	8004dea <HAL_RCC_OscConfig+0x21a>
 8004d96:	6a2b      	ldr	r3, [r5, #32]
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	622b      	str	r3, [r5, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d038      	beq.n	8004e16 <HAL_RCC_OscConfig+0x246>
      tickstart = HAL_GetTick();
 8004da4:	f7fe fc16 	bl	80035d4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004dac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dae:	6a2b      	ldr	r3, [r5, #32]
 8004db0:	079b      	lsls	r3, r3, #30
 8004db2:	d52a      	bpl.n	8004e0a <HAL_RCC_OscConfig+0x23a>
    if (pwrclkchanged == SET)
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	f43f af1d 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	69eb      	ldr	r3, [r5, #28]
 8004dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	61eb      	str	r3, [r5, #28]
 8004dc2:	e717      	b.n	8004bf4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004dc4:	2700      	movs	r7, #0
 8004dc6:	e7df      	b.n	8004d88 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc8:	6833      	ldr	r3, [r6, #0]
 8004dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004dd0:	f7fe fc00 	bl	80035d4 <HAL_GetTick>
 8004dd4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd6:	6833      	ldr	r3, [r6, #0]
 8004dd8:	05da      	lsls	r2, r3, #23
 8004dda:	d4d9      	bmi.n	8004d90 <HAL_RCC_OscConfig+0x1c0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ddc:	f7fe fbfa 	bl	80035d4 <HAL_GetTick>
 8004de0:	eba0 0008 	sub.w	r0, r0, r8
 8004de4:	2864      	cmp	r0, #100	@ 0x64
 8004de6:	d9f6      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x206>
 8004de8:	e735      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dea:	b93b      	cbnz	r3, 8004dfc <HAL_RCC_OscConfig+0x22c>
 8004dec:	6a2b      	ldr	r3, [r5, #32]
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	622b      	str	r3, [r5, #32]
 8004df4:	6a2b      	ldr	r3, [r5, #32]
 8004df6:	f023 0304 	bic.w	r3, r3, #4
 8004dfa:	e7cf      	b.n	8004d9c <HAL_RCC_OscConfig+0x1cc>
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	6a2b      	ldr	r3, [r5, #32]
 8004e00:	d1f5      	bne.n	8004dee <HAL_RCC_OscConfig+0x21e>
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	622b      	str	r3, [r5, #32]
 8004e08:	e7c5      	b.n	8004d96 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fe fbe3 	bl	80035d4 <HAL_GetTick>
 8004e0e:	1b80      	subs	r0, r0, r6
 8004e10:	4540      	cmp	r0, r8
 8004e12:	d9cc      	bls.n	8004dae <HAL_RCC_OscConfig+0x1de>
 8004e14:	e71f      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
 8004e16:	f7fe fbdd 	bl	80035d4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004e1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	6a2b      	ldr	r3, [r5, #32]
 8004e22:	0798      	lsls	r0, r3, #30
 8004e24:	d5c6      	bpl.n	8004db4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fe fbd5 	bl	80035d4 <HAL_GetTick>
 8004e2a:	1b80      	subs	r0, r0, r6
 8004e2c:	4540      	cmp	r0, r8
 8004e2e:	d9f7      	bls.n	8004e20 <HAL_RCC_OscConfig+0x250>
 8004e30:	e711      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	42420000 	.word	0x42420000
 8004e3c:	20000020 	.word	0x20000020
 8004e40:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	4d2b      	ldr	r5, [pc, #172]	@ (8004ef4 <HAL_RCC_OscConfig+0x324>)
 8004e46:	686a      	ldr	r2, [r5, #4]
 8004e48:	f002 020c 	and.w	r2, r2, #12
 8004e4c:	2a08      	cmp	r2, #8
 8004e4e:	d03f      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x300>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e50:	2200      	movs	r2, #0
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <HAL_RCC_OscConfig+0x328>)
        __HAL_RCC_PLL_DISABLE();
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e58:	d12d      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2e6>
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fbbb 	bl	80035d4 <HAL_GetTick>
 8004e5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	0199      	lsls	r1, r3, #6
 8004e64:	d421      	bmi.n	8004eaa <HAL_RCC_OscConfig+0x2da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e66:	6a23      	ldr	r3, [r4, #32]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2aa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e6e:	686b      	ldr	r3, [r5, #4]
 8004e70:	68a2      	ldr	r2, [r4, #8]
 8004e72:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e7a:	686a      	ldr	r2, [r5, #4]
 8004e7c:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8004e80:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004e84:	430b      	orrs	r3, r1
 8004e86:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004e88:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <HAL_RCC_OscConfig+0x328>)
 8004e8e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004e90:	f7fe fba0 	bl	80035d4 <HAL_GetTick>
 8004e94:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	019a      	lsls	r2, r3, #6
 8004e9a:	f53f aeaf 	bmi.w	8004bfc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fe fb99 	bl	80035d4 <HAL_GetTick>
 8004ea2:	1b00      	subs	r0, r0, r4
 8004ea4:	2802      	cmp	r0, #2
 8004ea6:	d9f6      	bls.n	8004e96 <HAL_RCC_OscConfig+0x2c6>
 8004ea8:	e6d5      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fe fb93 	bl	80035d4 <HAL_GetTick>
 8004eae:	1b80      	subs	r0, r0, r6
 8004eb0:	2802      	cmp	r0, #2
 8004eb2:	d9d5      	bls.n	8004e60 <HAL_RCC_OscConfig+0x290>
 8004eb4:	e6cf      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fb8d 	bl	80035d4 <HAL_GetTick>
 8004eba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	f57f ae9c 	bpl.w	8004bfc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fe fb86 	bl	80035d4 <HAL_GetTick>
 8004ec8:	1b00      	subs	r0, r0, r4
 8004eca:	2802      	cmp	r0, #2
 8004ecc:	d9f6      	bls.n	8004ebc <HAL_RCC_OscConfig+0x2ec>
 8004ece:	e6c2      	b.n	8004c56 <HAL_RCC_OscConfig+0x86>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f43f aea9 	beq.w	8004c28 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004ed6:	6868      	ldr	r0, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed8:	6a23      	ldr	r3, [r4, #32]
 8004eda:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	f47f aea2 	bne.w	8004c28 <HAL_RCC_OscConfig+0x58>
 8004ee4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ee6:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	1ac0      	subs	r0, r0, r3
 8004eec:	bf18      	it	ne
 8004eee:	2001      	movne	r0, #1
 8004ef0:	e6b2      	b.n	8004c58 <HAL_RCC_OscConfig+0x88>
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	42420000 	.word	0x42420000

08004efc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004efc:	4a0d      	ldr	r2, [pc, #52]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0x38>)
 8004efe:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004f00:	f003 010c 	and.w	r1, r3, #12
 8004f04:	2908      	cmp	r1, #8
 8004f06:	d112      	bne.n	8004f2e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f08:	480b      	ldr	r0, [pc, #44]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f0a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f0e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f10:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f12:	d509      	bpl.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f14:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f16:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f18:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f1c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x44>)
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f22:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f26:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x48>)
 8004f2a:	4358      	muls	r0, r3
 8004f2c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004f2e:	4803      	ldr	r0, [pc, #12]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	080085ea 	.word	0x080085ea
 8004f3c:	007a1200 	.word	0x007a1200
 8004f40:	080085e8 	.word	0x080085e8
 8004f44:	003d0900 	.word	0x003d0900

08004f48 <HAL_RCC_ClockConfig>:
{
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004f4e:	4604      	mov	r4, r0
 8004f50:	b910      	cbnz	r0, 8004f58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004f52:	2001      	movs	r0, #1
}
 8004f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4a46      	ldr	r2, [pc, #280]	@ (8005074 <HAL_RCC_ClockConfig+0x12c>)
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	428b      	cmp	r3, r1
 8004f62:	d32a      	bcc.n	8004fba <HAL_RCC_ClockConfig+0x72>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	0798      	lsls	r0, r3, #30
 8004f68:	d432      	bmi.n	8004fd0 <HAL_RCC_ClockConfig+0x88>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	07da      	lsls	r2, r3, #31
 8004f6e:	d445      	bmi.n	8004ffc <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f70:	4a40      	ldr	r2, [pc, #256]	@ (8005074 <HAL_RCC_ClockConfig+0x12c>)
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	42ab      	cmp	r3, r5
 8004f7a:	d867      	bhi.n	800504c <HAL_RCC_ClockConfig+0x104>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	4d3e      	ldr	r5, [pc, #248]	@ (8005078 <HAL_RCC_ClockConfig+0x130>)
 8004f80:	f013 0f04 	tst.w	r3, #4
 8004f84:	d16e      	bne.n	8005064 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	d506      	bpl.n	8004f9a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f8c:	686b      	ldr	r3, [r5, #4]
 8004f8e:	6922      	ldr	r2, [r4, #16]
 8004f90:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004f94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f98:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f9a:	f7ff ffaf 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004f9e:	686b      	ldr	r3, [r5, #4]
 8004fa0:	4a36      	ldr	r2, [pc, #216]	@ (800507c <HAL_RCC_ClockConfig+0x134>)
 8004fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	40d8      	lsrs	r0, r3
 8004faa:	4b35      	ldr	r3, [pc, #212]	@ (8005080 <HAL_RCC_ClockConfig+0x138>)
 8004fac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004fae:	4b35      	ldr	r3, [pc, #212]	@ (8005084 <HAL_RCC_ClockConfig+0x13c>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f003 f92b 	bl	800820c <HAL_InitTick>
  return HAL_OK;
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e7cc      	b.n	8004f54 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	428b      	cmp	r3, r1
 8004fcc:	d1c1      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xa>
 8004fce:	e7c9      	b.n	8004f64 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	f013 0f04 	tst.w	r3, #4
 8004fd4:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <HAL_RCC_ClockConfig+0x130>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd6:	bf1e      	ittt	ne
 8004fd8:	685a      	ldrne	r2, [r3, #4]
 8004fda:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004fde:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	0711      	lsls	r1, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe4:	bf42      	ittt	mi
 8004fe6:	685a      	ldrmi	r2, [r3, #4]
 8004fe8:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004fec:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	68a1      	ldr	r1, [r4, #8]
 8004ff2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e7b6      	b.n	8004f6a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffc:	6862      	ldr	r2, [r4, #4]
 8004ffe:	4e1e      	ldr	r6, [pc, #120]	@ (8005078 <HAL_RCC_ClockConfig+0x130>)
 8005000:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005004:	d11a      	bne.n	800503c <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	d0a2      	beq.n	8004f52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	4313      	orrs	r3, r2
 8005018:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800501a:	f7fe fadb 	bl	80035d4 <HAL_GetTick>
 800501e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005020:	6873      	ldr	r3, [r6, #4]
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800502c:	d0a0      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502e:	f7fe fad1 	bl	80035d4 <HAL_GetTick>
 8005032:	1bc0      	subs	r0, r0, r7
 8005034:	4540      	cmp	r0, r8
 8005036:	d9f3      	bls.n	8005020 <HAL_RCC_ClockConfig+0xd8>
        return HAL_TIMEOUT;
 8005038:	2003      	movs	r0, #3
 800503a:	e78b      	b.n	8004f54 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503c:	2a02      	cmp	r2, #2
 800503e:	d102      	bne.n	8005046 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005040:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005044:	e7e1      	b.n	800500a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	f013 0f02 	tst.w	r3, #2
 800504a:	e7de      	b.n	800500a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504c:	6813      	ldr	r3, [r2, #0]
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	432b      	orrs	r3, r5
 8005054:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	42ab      	cmp	r3, r5
 800505e:	f47f af78 	bne.w	8004f52 <HAL_RCC_ClockConfig+0xa>
 8005062:	e78b      	b.n	8004f7c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005064:	686b      	ldr	r3, [r5, #4]
 8005066:	68e2      	ldr	r2, [r4, #12]
 8005068:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800506c:	4313      	orrs	r3, r2
 800506e:	606b      	str	r3, [r5, #4]
 8005070:	e789      	b.n	8004f86 <HAL_RCC_ClockConfig+0x3e>
 8005072:	bf00      	nop
 8005074:	40022000 	.word	0x40022000
 8005078:	40021000 	.word	0x40021000
 800507c:	080086c0 	.word	0x080086c0
 8005080:	20000020 	.word	0x20000020
 8005084:	20000018 	.word	0x20000018

08005088 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005088:	4b04      	ldr	r3, [pc, #16]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x14>)
 800508a:	4a05      	ldr	r2, [pc, #20]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	4a03      	ldr	r2, [pc, #12]	@ (80050a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005096:	6810      	ldr	r0, [r2, #0]
}
 8005098:	40d8      	lsrs	r0, r3
 800509a:	4770      	bx	lr
 800509c:	40021000 	.word	0x40021000
 80050a0:	080086b8 	.word	0x080086b8
 80050a4:	20000020 	.word	0x20000020

080050a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80050aa:	4a05      	ldr	r2, [pc, #20]	@ (80050c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	4a03      	ldr	r2, [pc, #12]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80050b6:	6810      	ldr	r0, [r2, #0]
}
 80050b8:	40d8      	lsrs	r0, r3
 80050ba:	4770      	bx	lr
 80050bc:	40021000 	.word	0x40021000
 80050c0:	080086b8 	.word	0x080086b8
 80050c4:	20000020 	.word	0x20000020

080050c8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050c8:	230f      	movs	r3, #15
 80050ca:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_RCC_GetClockConfig+0x34>)
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	f002 0203 	and.w	r2, r2, #3
 80050d4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80050dc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80050e4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050ee:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050f0:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_RCC_GetClockConfig+0x38>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	600b      	str	r3, [r1, #0]
}
 80050fa:	4770      	bx	lr
 80050fc:	40021000 	.word	0x40021000
 8005100:	40022000 	.word	0x40022000

08005104 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005108:	6803      	ldr	r3, [r0, #0]
{
 800510a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800510c:	07d8      	lsls	r0, r3, #31
 800510e:	d521      	bpl.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005110:	4c36      	ldr	r4, [pc, #216]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005112:	69e3      	ldr	r3, [r4, #28]
 8005114:	00d9      	lsls	r1, r3, #3
 8005116:	d42c      	bmi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8005118:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	69e3      	ldr	r3, [r4, #28]
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005120:	61e3      	str	r3, [r4, #28]
 8005122:	69e3      	ldr	r3, [r4, #28]
 8005124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	4f30      	ldr	r7, [pc, #192]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	05da      	lsls	r2, r3, #23
 8005132:	d520      	bpl.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x72>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005134:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005136:	686a      	ldr	r2, [r5, #4]
 8005138:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800513c:	d12f      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x9a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513e:	6a23      	ldr	r3, [r4, #32]
 8005140:	686a      	ldr	r2, [r5, #4]
 8005142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005146:	4313      	orrs	r3, r2
 8005148:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800514a:	b11e      	cbz	r6, 8005154 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514c:	69e3      	ldr	r3, [r4, #28]
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005152:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	079a      	lsls	r2, r3, #30
 8005158:	d506      	bpl.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800515a:	4a24      	ldr	r2, [pc, #144]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800515c:	68a9      	ldr	r1, [r5, #8]
 800515e:	6853      	ldr	r3, [r2, #4]
 8005160:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005164:	430b      	orrs	r3, r1
 8005166:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	06db      	lsls	r3, r3, #27
 800516c:	d436      	bmi.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800516e:	2000      	movs	r0, #0
 8005170:	e012      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x94>
    FlagStatus pwrclkchanged = RESET;
 8005172:	2600      	movs	r6, #0
 8005174:	e7da      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800517e:	f7fe fa29 	bl	80035d4 <HAL_GetTick>
 8005182:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	05db      	lsls	r3, r3, #23
 8005188:	d4d4      	bmi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518a:	f7fe fa23 	bl	80035d4 <HAL_GetTick>
 800518e:	eba0 0008 	sub.w	r0, r0, r8
 8005192:	2864      	cmp	r0, #100	@ 0x64
 8005194:	d9f6      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x80>
          return HAL_TIMEOUT;
 8005196:	2003      	movs	r0, #3
}
 8005198:	b002      	add	sp, #8
 800519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800519e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d0cb      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80051a6:	2001      	movs	r0, #1
 80051a8:	4a12      	ldr	r2, [pc, #72]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051aa:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ac:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051ba:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 80051bc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051be:	d5be      	bpl.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80051c0:	f7fe fa08 	bl	80035d4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80051c8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	6a23      	ldr	r3, [r4, #32]
 80051cc:	0799      	lsls	r1, r3, #30
 80051ce:	d4b6      	bmi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fe fa00 	bl	80035d4 <HAL_GetTick>
 80051d4:	1bc0      	subs	r0, r0, r7
 80051d6:	4540      	cmp	r0, r8
 80051d8:	d9f7      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80051da:	e7dc      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x92>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051dc:	4a03      	ldr	r2, [pc, #12]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80051de:	68e9      	ldr	r1, [r5, #12]
 80051e0:	6853      	ldr	r3, [r2, #4]
 80051e2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	e7c0      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	42420000 	.word	0x42420000

080051f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80051f8:	2802      	cmp	r0, #2
{
 80051fa:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80051fc:	d044      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80051fe:	2810      	cmp	r0, #16
 8005200:	d003      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8005202:	2801      	cmp	r0, #1
 8005204:	d022      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8005206:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8005208:	e034      	b.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 800520a:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800520c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8005214:	d02e      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005216:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800521a:	4822      	ldr	r0, [pc, #136]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800521c:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800521e:	bf48      	it	mi
 8005220:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005222:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005224:	bf41      	itttt	mi
 8005226:	4920      	ldrmi	r1, [pc, #128]	@ (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005228:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800522c:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800522e:	4a1f      	ldrmi	r2, [pc, #124]	@ (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005230:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005232:	bf4c      	ite	mi
 8005234:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005238:	4a1d      	ldrpl	r2, [pc, #116]	@ (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800523a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800523c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005240:	d418      	bmi.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8005242:	2303      	movs	r3, #3
 8005244:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005246:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800524a:	e013      	b.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800524c:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8005250:	4a13      	ldr	r2, [pc, #76]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005252:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005254:	4019      	ands	r1, r3
 8005256:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 800525a:	d01e      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800525c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005264:	d107      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8005266:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800526a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 800526c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8005270:	bf18      	it	ne
 8005272:	4618      	movne	r0, r3
}
 8005274:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800527a:	d1c4      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 800527c:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800527e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005282:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005286:	e7f3      	b.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005288:	f7ff ff0e 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 800528c:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	e7d5      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 800529a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800529e:	e7e9      	b.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80052a0:	40021000 	.word	0x40021000
 80052a4:	080085fc 	.word	0x080085fc
 80052a8:	080085fa 	.word	0x080085fa
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	003d0900 	.word	0x003d0900

080052b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	6a02      	ldr	r2, [r0, #32]
{
 80052b8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80052ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80052ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80052d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d4:	4d0a      	ldr	r5, [pc, #40]	@ (8005300 <TIM_OC1_SetConfig+0x4c>)
 80052d6:	42a8      	cmp	r0, r5
 80052d8:	d10b      	bne.n	80052f2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80052dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80052e0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e2:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80052ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	684a      	ldr	r2, [r1, #4]
 80052f8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	6203      	str	r3, [r0, #32]
}
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00

08005304 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005304:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005306:	6a02      	ldr	r2, [r0, #32]
{
 8005308:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800530a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800530e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005312:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005314:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005316:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800531a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800531e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005322:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005326:	4d0b      	ldr	r5, [pc, #44]	@ (8005354 <TIM_OC3_SetConfig+0x50>)
 8005328:	42a8      	cmp	r0, r5
 800532a:	d10d      	bne.n	8005348 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800532e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005332:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005336:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800533e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005344:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005348:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800534c:	684a      	ldr	r2, [r1, #4]
 800534e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	6203      	str	r3, [r0, #32]
}
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	40012c00 	.word	0x40012c00

08005358 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005358:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535a:	6a02      	ldr	r2, [r0, #32]
{
 800535c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005362:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800536a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005372:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005374:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005378:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	4d06      	ldr	r5, [pc, #24]	@ (8005398 <TIM_OC4_SetConfig+0x40>)
 800537e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	bf02      	ittt	eq
 8005382:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005384:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005388:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005390:	684a      	ldr	r2, [r1, #4]
 8005392:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	6203      	str	r3, [r0, #32]
}
 8005396:	bd30      	pop	{r4, r5, pc}
 8005398:	40012c00 	.word	0x40012c00

0800539c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_TriggerHalfCpltCallback>:
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80053b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d121      	bne.n	80053fc <HAL_TIM_Base_Start_IT+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ba:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c0:	68d3      	ldr	r3, [r2, #12]
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	6803      	ldr	r3, [r0, #0]
 80053ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <HAL_TIM_Base_Start_IT+0x50>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00a      	beq.n	80053e6 <HAL_TIM_Base_Start_IT+0x36>
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d4:	d007      	beq.n	80053e6 <HAL_TIM_Base_Start_IT+0x36>
 80053d6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_Base_Start_IT+0x36>
 80053de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_Base_Start_IT+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	2a06      	cmp	r2, #6
 80053ee:	d003      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80053f8:	2000      	movs	r0, #0
 80053fa:	4770      	bx	lr
    return HAL_ERROR;
 80053fc:	2001      	movs	r0, #1
}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00

08005404 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 8005406:	f241 1211 	movw	r2, #4369	@ 0x1111
{
 800540a:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 8005410:	6803      	ldr	r3, [r0, #0]
{
 8005412:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8005414:	6a19      	ldr	r1, [r3, #32]
 8005416:	4211      	tst	r1, r2
 8005418:	d108      	bne.n	800542c <HAL_TIM_PWM_DeInit+0x28>
 800541a:	f240 4244 	movw	r2, #1092	@ 0x444
 800541e:	6a19      	ldr	r1, [r3, #32]
 8005420:	4211      	tst	r1, r2
 8005422:	bf02      	ittt	eq
 8005424:	681a      	ldreq	r2, [r3, #0]
 8005426:	f022 0201 	biceq.w	r2, r2, #1
 800542a:	601a      	streq	r2, [r3, #0]
  if (htim->PWM_MspDeInitCallback == NULL)
 800542c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800542e:	b90b      	cbnz	r3, 8005434 <HAL_TIM_PWM_DeInit+0x30>
    htim->PWM_MspDeInitCallback = HAL_TIM_PWM_MspDeInit;
 8005430:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <HAL_TIM_PWM_DeInit+0x68>)
 8005432:	6663      	str	r3, [r4, #100]	@ 0x64
  htim->PWM_MspDeInitCallback(htim);
 8005434:	4620      	mov	r0, r4
 8005436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005438:	4798      	blx	r3
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800543a:	2000      	movs	r0, #0
 800543c:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  __HAL_UNLOCK(htim);
 8005440:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005444:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 8005448:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 800544c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8005450:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005454:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 8005458:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 800545c:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8005460:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_RESET;
 8005464:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
}
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	08008521 	.word	0x08008521

08005470 <HAL_TIM_IRQHandler>:
{
 8005470:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005472:	6803      	ldr	r3, [r0, #0]
{
 8005474:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	0791      	lsls	r1, r2, #30
 800547a:	d511      	bpl.n	80054a0 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	0792      	lsls	r2, r2, #30
 8005480:	d50e      	bpl.n	80054a0 <HAL_TIM_IRQHandler+0x30>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005482:	f06f 0202 	mvn.w	r2, #2
 8005486:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005488:	2301      	movs	r3, #1
 800548a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800548c:	6803      	ldr	r3, [r0, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	079b      	lsls	r3, r3, #30
 8005492:	f000 8083 	beq.w	800559c <HAL_TIM_IRQHandler+0x12c>
          htim->IC_CaptureCallback(htim);
 8005496:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          htim->PWM_PulseFinishedCallback(htim);
 800549a:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549c:	2300      	movs	r3, #0
 800549e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	0750      	lsls	r0, r2, #29
 80054a6:	d512      	bpl.n	80054ce <HAL_TIM_IRQHandler+0x5e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	0751      	lsls	r1, r2, #29
 80054ac:	d50f      	bpl.n	80054ce <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ae:	f06f 0204 	mvn.w	r2, #4
 80054b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b4:	2302      	movs	r3, #2
 80054b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80054c0:	d073      	beq.n	80055aa <HAL_TIM_IRQHandler+0x13a>
        htim->IC_CaptureCallback(htim);
 80054c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 80054c6:	4620      	mov	r0, r4
 80054c8:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	2300      	movs	r3, #0
 80054cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	0712      	lsls	r2, r2, #28
 80054d4:	d511      	bpl.n	80054fa <HAL_TIM_IRQHandler+0x8a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	0710      	lsls	r0, r2, #28
 80054da:	d50e      	bpl.n	80054fa <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054dc:	f06f 0208 	mvn.w	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	2304      	movs	r3, #4
 80054e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	0799      	lsls	r1, r3, #30
 80054ec:	d064      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x148>
        htim->IC_CaptureCallback(htim);
 80054ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 80054f2:	4620      	mov	r0, r4
 80054f4:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	2300      	movs	r3, #0
 80054f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	06d2      	lsls	r2, r2, #27
 8005500:	d512      	bpl.n	8005528 <HAL_TIM_IRQHandler+0xb8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	06d0      	lsls	r0, r2, #27
 8005506:	d50f      	bpl.n	8005528 <HAL_TIM_IRQHandler+0xb8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005508:	f06f 0210 	mvn.w	r2, #16
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800550e:	2308      	movs	r3, #8
 8005510:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800551a:	d054      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x156>
        htim->IC_CaptureCallback(htim);
 800551c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 8005520:	4620      	mov	r0, r4
 8005522:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005524:	2300      	movs	r3, #0
 8005526:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	07d1      	lsls	r1, r2, #31
 800552e:	d509      	bpl.n	8005544 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	07d2      	lsls	r2, r2, #31
 8005534:	d506      	bpl.n	8005544 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005536:	f06f 0201 	mvn.w	r2, #1
 800553a:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 800553c:	4620      	mov	r0, r4
 800553e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005542:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	0610      	lsls	r0, r2, #24
 800554a:	d509      	bpl.n	8005560 <HAL_TIM_IRQHandler+0xf0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	0611      	lsls	r1, r2, #24
 8005550:	d506      	bpl.n	8005560 <HAL_TIM_IRQHandler+0xf0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005552:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005556:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8005558:	4620      	mov	r0, r4
 800555a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800555e:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	0652      	lsls	r2, r2, #25
 8005566:	d509      	bpl.n	800557c <HAL_TIM_IRQHandler+0x10c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	0650      	lsls	r0, r2, #25
 800556c:	d506      	bpl.n	800557c <HAL_TIM_IRQHandler+0x10c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005572:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8005574:	4620      	mov	r0, r4
 8005576:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800557a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	0691      	lsls	r1, r2, #26
 8005582:	d527      	bpl.n	80055d4 <HAL_TIM_IRQHandler+0x164>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	0692      	lsls	r2, r2, #26
 8005588:	d524      	bpl.n	80055d4 <HAL_TIM_IRQHandler+0x164>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800558a:	f06f 0220 	mvn.w	r2, #32
 800558e:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8005590:	4620      	mov	r0, r4
 8005592:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
}
 8005596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      htim->CommutationCallback(htim);
 800559a:	4718      	bx	r3
          htim->OC_DelayElapsedCallback(htim);
 800559c:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 80055a0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80055a2:	4620      	mov	r0, r4
 80055a4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80055a8:	e777      	b.n	800549a <HAL_TIM_IRQHandler+0x2a>
        htim->OC_DelayElapsedCallback(htim);
 80055aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80055ae:	4620      	mov	r0, r4
 80055b0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80055b2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80055b6:	e786      	b.n	80054c6 <HAL_TIM_IRQHandler+0x56>
        htim->OC_DelayElapsedCallback(htim);
 80055b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80055bc:	4620      	mov	r0, r4
 80055be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80055c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80055c4:	e795      	b.n	80054f2 <HAL_TIM_IRQHandler+0x82>
        htim->OC_DelayElapsedCallback(htim);
 80055c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80055ca:	4620      	mov	r0, r4
 80055cc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80055ce:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80055d2:	e7a5      	b.n	8005520 <HAL_TIM_IRQHandler+0xb0>
}
 80055d4:	bd10      	pop	{r4, pc}
	...

080055d8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80055da:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	4290      	cmp	r0, r2
 80055de:	d00a      	beq.n	80055f6 <TIM_Base_SetConfig+0x1e>
 80055e0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0x1e>
 80055e6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80055ea:	4290      	cmp	r0, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0x1e>
 80055ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055f2:	4290      	cmp	r0, r2
 80055f4:	d115      	bne.n	8005622 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80055f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80055fc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	4a11      	ldr	r2, [pc, #68]	@ (8005644 <TIM_Base_SetConfig+0x6c>)
 8005600:	4290      	cmp	r0, r2
 8005602:	d00a      	beq.n	800561a <TIM_Base_SetConfig+0x42>
 8005604:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0x42>
 800560a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800560e:	4290      	cmp	r0, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0x42>
 8005612:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005616:	4290      	cmp	r0, r2
 8005618:	d103      	bne.n	8005622 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800561c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005620:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005622:	694a      	ldr	r2, [r1, #20]
 8005624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005628:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800562a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	688b      	ldr	r3, [r1, #8]
 800562e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005634:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <TIM_Base_SetConfig+0x6c>)
 8005636:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005638:	bf04      	itt	eq
 800563a:	690b      	ldreq	r3, [r1, #16]
 800563c:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800563e:	2301      	movs	r3, #1
 8005640:	6143      	str	r3, [r0, #20]
}
 8005642:	4770      	bx	lr
 8005644:	40012c00 	.word	0x40012c00

08005648 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005648:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564a:	6a02      	ldr	r2, [r0, #32]
{
 800564c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564e:	f022 0210 	bic.w	r2, r2, #16
 8005652:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005654:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005656:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800565a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005662:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005664:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800566c:	4d0b      	ldr	r5, [pc, #44]	@ (800569c <TIM_OC2_SetConfig+0x54>)
 800566e:	42a8      	cmp	r0, r5
 8005670:	d10d      	bne.n	800568e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005672:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005678:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005680:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005684:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800568e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005690:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005692:	684a      	ldr	r2, [r1, #4]
 8005694:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005696:	6203      	str	r3, [r0, #32]
}
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00

080056a0 <HAL_TIM_PWM_ConfigChannel>:
{
 80056a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80056a2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80056a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d05b      	beq.n	8005764 <HAL_TIM_PWM_ConfigChannel+0xc4>
 80056ac:	2001      	movs	r0, #1
  switch (Channel)
 80056ae:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80056b0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 80056b4:	d043      	beq.n	800573e <HAL_TIM_PWM_ConfigChannel+0x9e>
 80056b6:	d806      	bhi.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80056b8:	b1d2      	cbz	r2, 80056f0 <HAL_TIM_PWM_ConfigChannel+0x50>
 80056ba:	2a04      	cmp	r2, #4
 80056bc:	d02c      	beq.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_UNLOCK(htim);
 80056be:	2300      	movs	r3, #0
 80056c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80056c6:	2a0c      	cmp	r2, #12
 80056c8:	d1f9      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f7ff fe44 	bl	8005358 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	69d3      	ldr	r3, [r2, #28]
 80056d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	69d3      	ldr	r3, [r2, #28]
 80056de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056e2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	6909      	ldr	r1, [r1, #16]
 80056e8:	69d3      	ldr	r3, [r2, #28]
 80056ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056ee:	e037      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0xc0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	f7ff fddf 	bl	80052b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	6993      	ldr	r3, [r2, #24]
 80056fa:	f043 0308 	orr.w	r3, r3, #8
 80056fe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	6993      	ldr	r3, [r2, #24]
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	6909      	ldr	r1, [r1, #16]
 800570e:	6993      	ldr	r3, [r2, #24]
 8005710:	430b      	orrs	r3, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005712:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2000      	movs	r0, #0
 8005716:	e7d2      	b.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	f7ff ff95 	bl	8005648 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	6993      	ldr	r3, [r2, #24]
 8005722:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005726:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	6993      	ldr	r3, [r2, #24]
 800572c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005730:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	6909      	ldr	r1, [r1, #16]
 8005736:	6993      	ldr	r3, [r2, #24]
 8005738:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800573c:	e7e9      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	f7ff fde0 	bl	8005304 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	69d3      	ldr	r3, [r2, #28]
 8005748:	f043 0308 	orr.w	r3, r3, #8
 800574c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	69d3      	ldr	r3, [r2, #28]
 8005752:	f023 0304 	bic.w	r3, r3, #4
 8005756:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	6909      	ldr	r1, [r1, #16]
 800575c:	69d3      	ldr	r3, [r2, #28]
 800575e:	430b      	orrs	r3, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005760:	61d3      	str	r3, [r2, #28]
      break;
 8005762:	e7d7      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8005764:	2002      	movs	r0, #2
 8005766:	e7ad      	b.n	80056c4 <HAL_TIM_PWM_ConfigChannel+0x24>

08005768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005768:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005772:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005776:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005778:	6082      	str	r2, [r0, #8]
}
 800577a:	bd10      	pop	{r4, pc}

0800577c <HAL_TIM_ConfigClockSource>:
{
 800577c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800577e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8005782:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005784:	2b01      	cmp	r3, #1
 8005786:	f04f 0002 	mov.w	r0, #2
 800578a:	f000 809a 	beq.w	80058c2 <HAL_TIM_ConfigClockSource+0x146>
 800578e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005794:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005796:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800579a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	2b60      	cmp	r3, #96	@ 0x60
 80057aa:	d057      	beq.n	800585c <HAL_TIM_ConfigClockSource+0xe0>
 80057ac:	d836      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0xa0>
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d06e      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0x114>
 80057b2:	d818      	bhi.n	80057e6 <HAL_TIM_ConfigClockSource+0x6a>
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d00d      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0x58>
 80057b8:	d80a      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x54>
 80057ba:	f033 0110 	bics.w	r1, r3, #16
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80057c6:	2300      	movs	r3, #0
 80057c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80057cc:	4610      	mov	r0, r2
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d1f5      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d4:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80057d6:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057dc:	4313      	orrs	r3, r2
 80057de:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80057e2:	608b      	str	r3, [r1, #8]
}
 80057e4:	e02d      	b.n	8005842 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80057e6:	2b50      	cmp	r3, #80	@ 0x50
 80057e8:	d1ea      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ec:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80057ee:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80057f0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8005800:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005802:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005806:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800580e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005810:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005816:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800581a:	e011      	b.n	8005840 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005820:	d00f      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0xc6>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005826:	d00e      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xca>
 8005828:	2b70      	cmp	r3, #112	@ 0x70
 800582a:	d1c9      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	68cb      	ldr	r3, [r1, #12]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005834:	f7ff ff98 	bl	8005768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005840:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2200      	movs	r2, #0
 8005844:	e7bc      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	68cb      	ldr	r3, [r1, #12]
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800584e:	f7ff ff8b 	bl	8005768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	6893      	ldr	r3, [r2, #8]
 8005856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800585a:	e7f1      	b.n	8005840 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800585c:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800585e:	6848      	ldr	r0, [r1, #4]
  tmpccer = TIMx->CCER;
 8005860:	6a1a      	ldr	r2, [r3, #32]
                               sClockSourceConfig->ClockFilter);
 8005862:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005864:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005866:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586a:	f021 0110 	bic.w	r1, r1, #16
 800586e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005870:	6999      	ldr	r1, [r3, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005872:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005876:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800587e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005882:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005884:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800588e:	e7d7      	b.n	8005840 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005890:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005892:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005894:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005896:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005898:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80058a6:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80058b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80058b6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058bc:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80058c0:	e7be      	b.n	8005840 <HAL_TIM_ConfigClockSource+0xc4>
  __HAL_LOCK(htim);
 80058c2:	4602      	mov	r2, r0
 80058c4:	e782      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x50>

080058c6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c8:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ca:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058cc:	f001 011f 	and.w	r1, r1, #31
 80058d0:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80058d2:	ea23 0304 	bic.w	r3, r3, r4
 80058d6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d8:	6a03      	ldr	r3, [r0, #32]
 80058da:	408a      	lsls	r2, r1
 80058dc:	431a      	orrs	r2, r3
 80058de:	6202      	str	r2, [r0, #32]
}
 80058e0:	bd10      	pop	{r4, pc}
	...

080058e4 <HAL_TIM_OC_Start>:
{
 80058e4:	b510      	push	{r4, lr}
 80058e6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058e8:	b929      	cbnz	r1, 80058f6 <HAL_TIM_OC_Start+0x12>
 80058ea:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d01e      	beq.n	8005930 <HAL_TIM_OC_Start+0x4c>
    return HAL_ERROR;
 80058f2:	2001      	movs	r0, #1
 80058f4:	e042      	b.n	800597c <HAL_TIM_OC_Start+0x98>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f6:	2904      	cmp	r1, #4
 80058f8:	d107      	bne.n	800590a <HAL_TIM_OC_Start+0x26>
 80058fa:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d1f7      	bne.n	80058f2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	2302      	movs	r3, #2
 8005904:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8005908:	e015      	b.n	8005936 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800590a:	2908      	cmp	r1, #8
 800590c:	bf0c      	ite	eq
 800590e:	f890 3040 	ldrbeq.w	r3, [r0, #64]	@ 0x40
 8005912:	f890 3041 	ldrbne.w	r3, [r0, #65]	@ 0x41
 8005916:	3b01      	subs	r3, #1
 8005918:	bf18      	it	ne
 800591a:	2301      	movne	r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e8      	bne.n	80058f2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	2302      	movs	r3, #2
 8005922:	2908      	cmp	r1, #8
 8005924:	bf0c      	ite	eq
 8005926:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 800592a:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800592e:	e002      	b.n	8005936 <HAL_TIM_OC_Start+0x52>
 8005930:	2302      	movs	r3, #2
 8005932:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005936:	2201      	movs	r2, #1
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	f7ff ffc4 	bl	80058c6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	4a0f      	ldr	r2, [pc, #60]	@ (8005980 <HAL_TIM_OC_Start+0x9c>)
 8005942:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8005944:	bf02      	ittt	eq
 8005946:	6c53      	ldreq	r3, [r2, #68]	@ 0x44
 8005948:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
 800594c:	6453      	streq	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_TIM_OC_Start+0x84>
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005958:	d006      	beq.n	8005968 <HAL_TIM_OC_Start+0x84>
 800595a:	4a0a      	ldr	r2, [pc, #40]	@ (8005984 <HAL_TIM_OC_Start+0xa0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <HAL_TIM_OC_Start+0x84>
 8005960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005964:	4293      	cmp	r3, r2
 8005966:	d104      	bne.n	8005972 <HAL_TIM_OC_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	2a06      	cmp	r2, #6
 8005970:	d003      	beq.n	800597a <HAL_TIM_OC_Start+0x96>
      __HAL_TIM_ENABLE(htim);
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800597a:	2000      	movs	r0, #0
}
 800597c:	bd10      	pop	{r4, pc}
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400

08005988 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005988:	f7ff bfac 	b.w	80058e4 <HAL_TIM_OC_Start>

0800598c <HAL_TIM_OC_Stop_IT>:
  switch (Channel)
 800598c:	2908      	cmp	r1, #8
{
 800598e:	b538      	push	{r3, r4, r5, lr}
 8005990:	4604      	mov	r4, r0
 8005992:	460d      	mov	r5, r1
  switch (Channel)
 8005994:	d042      	beq.n	8005a1c <HAL_TIM_OC_Stop_IT+0x90>
 8005996:	d804      	bhi.n	80059a2 <HAL_TIM_OC_Stop_IT+0x16>
 8005998:	b151      	cbz	r1, 80059b0 <HAL_TIM_OC_Stop_IT+0x24>
 800599a:	2904      	cmp	r1, #4
 800599c:	d039      	beq.n	8005a12 <HAL_TIM_OC_Stop_IT+0x86>
 800599e:	2001      	movs	r0, #1
}
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80059a2:	290c      	cmp	r1, #12
 80059a4:	d1fb      	bne.n	800599e <HAL_TIM_OC_Stop_IT+0x12>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80059a6:	6802      	ldr	r2, [r0, #0]
 80059a8:	68d3      	ldr	r3, [r2, #12]
 80059aa:	f023 0310 	bic.w	r3, r3, #16
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_OC_Stop_IT+0x2c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059b0:	6802      	ldr	r2, [r0, #0]
 80059b2:	68d3      	ldr	r3, [r2, #12]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80059b8:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059ba:	4629      	mov	r1, r5
 80059bc:	2200      	movs	r2, #0
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	f7ff ff81 	bl	80058c6 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <HAL_TIM_OC_Stop_IT+0xb4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10d      	bne.n	80059e8 <HAL_TIM_OC_Stop_IT+0x5c>
      __HAL_TIM_MOE_DISABLE(htim);
 80059cc:	f241 1211 	movw	r2, #4369	@ 0x1111
 80059d0:	6a19      	ldr	r1, [r3, #32]
 80059d2:	4211      	tst	r1, r2
 80059d4:	d108      	bne.n	80059e8 <HAL_TIM_OC_Stop_IT+0x5c>
 80059d6:	f240 4244 	movw	r2, #1092	@ 0x444
 80059da:	6a19      	ldr	r1, [r3, #32]
 80059dc:	4211      	tst	r1, r2
 80059de:	bf02      	ittt	eq
 80059e0:	6c5a      	ldreq	r2, [r3, #68]	@ 0x44
 80059e2:	f422 4200 	biceq.w	r2, r2, #32768	@ 0x8000
 80059e6:	645a      	streq	r2, [r3, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 80059e8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	6a19      	ldr	r1, [r3, #32]
 80059f0:	4211      	tst	r1, r2
 80059f2:	d108      	bne.n	8005a06 <HAL_TIM_OC_Stop_IT+0x7a>
 80059f4:	f240 4244 	movw	r2, #1092	@ 0x444
 80059f8:	6a19      	ldr	r1, [r3, #32]
 80059fa:	4211      	tst	r1, r2
 80059fc:	bf02      	ittt	eq
 80059fe:	681a      	ldreq	r2, [r3, #0]
 8005a00:	f022 0201 	biceq.w	r2, r2, #1
 8005a04:	601a      	streq	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a06:	2301      	movs	r3, #1
 8005a08:	b96d      	cbnz	r5, 8005a26 <HAL_TIM_OC_Stop_IT+0x9a>
 8005a0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  switch (Channel)
 8005a0e:	2000      	movs	r0, #0
 8005a10:	e7c6      	b.n	80059a0 <HAL_TIM_OC_Stop_IT+0x14>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a12:	6802      	ldr	r2, [r0, #0]
 8005a14:	68d3      	ldr	r3, [r2, #12]
 8005a16:	f023 0304 	bic.w	r3, r3, #4
 8005a1a:	e7cd      	b.n	80059b8 <HAL_TIM_OC_Stop_IT+0x2c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a1c:	6802      	ldr	r2, [r0, #0]
 8005a1e:	68d3      	ldr	r3, [r2, #12]
 8005a20:	f023 0308 	bic.w	r3, r3, #8
 8005a24:	e7c8      	b.n	80059b8 <HAL_TIM_OC_Stop_IT+0x2c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	2d04      	cmp	r5, #4
 8005a28:	d102      	bne.n	8005a30 <HAL_TIM_OC_Stop_IT+0xa4>
 8005a2a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005a2e:	e7ee      	b.n	8005a0e <HAL_TIM_OC_Stop_IT+0x82>
 8005a30:	2d08      	cmp	r5, #8
 8005a32:	bf0c      	ite	eq
 8005a34:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8005a38:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8005a3c:	e7e7      	b.n	8005a0e <HAL_TIM_OC_Stop_IT+0x82>
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00

08005a44 <HAL_TIM_PWM_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005a44:	f7ff bfa2 	b.w	800598c <HAL_TIM_OC_Stop_IT>

08005a48 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005a48:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <TIM_ResetCallback+0x50>)
 8005a4a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <TIM_ResetCallback+0x54>)
 8005a50:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005a54:	4b12      	ldr	r3, [pc, #72]	@ (8005aa0 <TIM_ResetCallback+0x58>)
 8005a56:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <TIM_ResetCallback+0x5c>)
 8005a5c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005a60:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <TIM_ResetCallback+0x60>)
 8005a62:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005a66:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <TIM_ResetCallback+0x64>)
 8005a68:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005a6c:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <TIM_ResetCallback+0x68>)
 8005a6e:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <TIM_ResetCallback+0x6c>)
 8005a74:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <TIM_ResetCallback+0x70>)
 8005a7a:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <TIM_ResetCallback+0x74>)
 8005a80:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005a84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <TIM_ResetCallback+0x78>)
 8005a86:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <TIM_ResetCallback+0x7c>)
 8005a8c:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005a90:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <TIM_ResetCallback+0x80>)
 8005a92:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
}
 8005a96:	4770      	bx	lr
 8005a98:	080081a5 	.word	0x080081a5
 8005a9c:	0800539d 	.word	0x0800539d
 8005aa0:	080053a9 	.word	0x080053a9
 8005aa4:	080053ab 	.word	0x080053ab
 8005aa8:	080053a1 	.word	0x080053a1
 8005aac:	080053a3 	.word	0x080053a3
 8005ab0:	0800539f 	.word	0x0800539f
 8005ab4:	080053a5 	.word	0x080053a5
 8005ab8:	080053a7 	.word	0x080053a7
 8005abc:	080053ad 	.word	0x080053ad
 8005ac0:	08005c5b 	.word	0x08005c5b
 8005ac4:	08005c5d 	.word	0x08005c5d
 8005ac8:	08005c5f 	.word	0x08005c5f

08005acc <HAL_TIM_Base_Init>:
{
 8005acc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005ace:	4604      	mov	r4, r0
 8005ad0:	b368      	cbz	r0, 8005b2e <HAL_TIM_Base_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ad6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ada:	b953      	cbnz	r3, 8005af2 <HAL_TIM_Base_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8005adc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8005ae0:	f7ff ffb2 	bl	8005a48 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8005ae4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005ae6:	b90b      	cbnz	r3, 8005aec <HAL_TIM_Base_Init+0x20>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <HAL_TIM_Base_Init+0x68>)
 8005aea:	6483      	str	r3, [r0, #72]	@ 0x48
    htim->Base_MspInitCallback(htim);
 8005aec:	4620      	mov	r0, r4
 8005aee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005af0:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8005af2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005af6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afa:	1d21      	adds	r1, r4, #4
 8005afc:	f7ff fd6c 	bl	80055d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b00:	2301      	movs	r3, #1
  return HAL_OK;
 8005b02:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b04:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b0c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b10:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b14:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b20:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b24:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005b2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b2e:	2001      	movs	r0, #1
 8005b30:	e7fc      	b.n	8005b2c <HAL_TIM_Base_Init+0x60>
 8005b32:	bf00      	nop
 8005b34:	08008405 	.word	0x08008405

08005b38 <HAL_TIM_PWM_Init>:
{
 8005b38:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b368      	cbz	r0, 8005b9a <HAL_TIM_PWM_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005b42:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005b46:	b953      	cbnz	r3, 8005b5e <HAL_TIM_PWM_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8005b48:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8005b4c:	f7ff ff7c 	bl	8005a48 <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8005b50:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005b52:	b90b      	cbnz	r3, 8005b58 <HAL_TIM_PWM_Init+0x20>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005b54:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_TIM_PWM_Init+0x68>)
 8005b56:	6603      	str	r3, [r0, #96]	@ 0x60
    htim->PWM_MspInitCallback(htim);
 8005b58:	4620      	mov	r0, r4
 8005b5a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005b5c:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b60:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b66:	1d21      	adds	r1, r4, #4
 8005b68:	f7ff fd36 	bl	80055d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6c:	2301      	movs	r3, #1
  return HAL_OK;
 8005b6e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b70:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b78:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b7c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b90:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005b98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	e7fc      	b.n	8005b98 <HAL_TIM_PWM_Init+0x60>
 8005b9e:	bf00      	nop
 8005ba0:	080083dd 	.word	0x080083dd

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
{
 8005baa:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005bac:	2a01      	cmp	r2, #1
 8005bae:	f04f 0002 	mov.w	r0, #2
 8005bb2:	d026      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005bb4:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb6:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc8:	432a      	orrs	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8005bca:	68a0      	ldr	r0, [r4, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bcc:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4c0c      	ldr	r4, [pc, #48]	@ (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005bd2:	42a2      	cmp	r2, r4
 8005bd4:	d00a      	beq.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005bd6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005bda:	d007      	beq.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005bdc:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8005be0:	42a2      	cmp	r2, r4
 8005be2:	d003      	beq.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005be4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005be8:	42a2      	cmp	r2, r4
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bec:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8005bf8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005bfe:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005c02:	bd30      	pop	{r4, r5, pc}
 8005c04:	40012c00 	.word	0x40012c00

08005c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c08:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8005c0c:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d021      	beq.n	8005c56 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005c12:	2301      	movs	r3, #1
 8005c14:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c18:	68cb      	ldr	r3, [r1, #12]
 8005c1a:	6888      	ldr	r0, [r1, #8]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c20:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c22:	6848      	ldr	r0, [r1, #4]
 8005c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c28:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c2a:	6808      	ldr	r0, [r1, #0]
 8005c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c30:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c32:	6908      	ldr	r0, [r1, #16]
 8005c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c38:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c3a:	6948      	ldr	r0, [r1, #20]
 8005c3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c40:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005c42:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c44:	69c9      	ldr	r1, [r1, #28]
 8005c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c4a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8005c4c:	6811      	ldr	r1, [r2, #0]
 8005c4e:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005c50:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005c54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c56:	2002      	movs	r0, #2
}
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005c5e:	4770      	bx	lr

08005c60 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005c60:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005c62:	f001 fb73 	bl	800734c <pvTimerGetTimerID>

  if (callb != NULL) {
 8005c66:	b120      	cbz	r0, 8005c72 <TimerCallback+0x12>
    callb->func (callb->arg);
 8005c68:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 8005c70:	4718      	bx	r3
}
 8005c72:	bd10      	pop	{r4, pc}

08005c74 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c74:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8005c78:	b113      	cbz	r3, 8005c80 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8005c7a:	f06f 0005 	mvn.w	r0, #5
 8005c7e:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f8      	bne.n	8005c7a <osKernelInitialize+0x6>
 8005c88:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <osKernelInitialize+0x34>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	2802      	cmp	r0, #2
 8005c8e:	d106      	bne.n	8005c9e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c90:	f3ef 8311 	mrs	r3, BASEPRI
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <osKernelInitialize+0x6>
      stat = osError;
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005c9c:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1fa      	bne.n	8005c98 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ca6:	4770      	bx	lr
 8005ca8:	20001318 	.word	0x20001318

08005cac <osKernelStart>:
osStatus_t osKernelStart (void) {
 8005cac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cae:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8005cb2:	b113      	cbz	r3, 8005cba <osKernelStart+0xe>
    stat = osErrorISR;
 8005cb4:	f06f 0005 	mvn.w	r0, #5
}
 8005cb8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cba:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d1f8      	bne.n	8005cb4 <osKernelStart+0x8>
 8005cc2:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <osKernelStart+0x3c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	2a02      	cmp	r2, #2
 8005cc8:	d106      	bne.n	8005cd8 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cca:	f3ef 8311 	mrs	r3, BASEPRI
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <osKernelStart+0x8>
      stat = osError;
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005cd6:	e7ef      	b.n	8005cb8 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8005cd8:	2a01      	cmp	r2, #1
 8005cda:	d1fa      	bne.n	8005cd2 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8005cdc:	2202      	movs	r2, #2
 8005cde:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ce0:	f000 fdd6 	bl	8006890 <vTaskStartScheduler>
      stat = osOK;
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	e7e7      	b.n	8005cb8 <osKernelStart+0xc>
 8005ce8:	20001318 	.word	0x20001318

08005cec <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cee:	4614      	mov	r4, r2
  hTask = NULL;
 8005cf0:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	460b      	mov	r3, r1
  hTask = NULL;
 8005cf6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf8:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8005cfc:	bb52      	cbnz	r2, 8005d54 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfe:	f3ef 8210 	mrs	r2, PRIMASK
 8005d02:	bb3a      	cbnz	r2, 8005d54 <osThreadNew+0x68>
 8005d04:	4a26      	ldr	r2, [pc, #152]	@ (8005da0 <osThreadNew+0xb4>)
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	2a02      	cmp	r2, #2
 8005d0a:	d102      	bne.n	8005d12 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8005d10:	bb02      	cbnz	r2, 8005d54 <osThreadNew+0x68>
 8005d12:	b1f8      	cbz	r0, 8005d54 <osThreadNew+0x68>
    empty = '\0';
 8005d14:	2200      	movs	r2, #0
 8005d16:	f88d 2013 	strb.w	r2, [sp, #19]
    if (attr != NULL) {
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d030      	beq.n	8005d80 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	b909      	cbnz	r1, 8005d26 <osThreadNew+0x3a>
    name  = &empty;
 8005d22:	f10d 0113 	add.w	r1, sp, #19
      if (attr->priority != osPriorityNone) {
 8005d26:	69a5      	ldr	r5, [r4, #24]
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	bf08      	it	eq
 8005d2c:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d2e:	1e6a      	subs	r2, r5, #1
 8005d30:	2a37      	cmp	r2, #55	@ 0x37
 8005d32:	46ac      	mov	ip, r5
 8005d34:	d82a      	bhi.n	8005d8c <osThreadNew+0xa0>
 8005d36:	6862      	ldr	r2, [r4, #4]
 8005d38:	07d2      	lsls	r2, r2, #31
 8005d3a:	d427      	bmi.n	8005d8c <osThreadNew+0xa0>
      if (attr->stack_size > 0U) {
 8005d3c:	6966      	ldr	r6, [r4, #20]
 8005d3e:	b166      	cbz	r6, 8005d5a <osThreadNew+0x6e>
        stack = attr->stack_size / sizeof(StackType_t);
 8005d40:	08b2      	lsrs	r2, r6, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d42:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8005d46:	b157      	cbz	r7, 8005d5e <osThreadNew+0x72>
 8005d48:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 8005d4c:	d902      	bls.n	8005d54 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d4e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d50:	b104      	cbz	r4, 8005d54 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d52:	b9ee      	cbnz	r6, 8005d90 <osThreadNew+0xa4>
  return ((osThreadId_t)hTask);
 8005d54:	9805      	ldr	r0, [sp, #20]
}
 8005d56:	b007      	add	sp, #28
 8005d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	e7f1      	b.n	8005d42 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d5e:	f1be 0f00 	cmp.w	lr, #0
 8005d62:	d1f7      	bne.n	8005d54 <osThreadNew+0x68>
      if (mem == 0) {
 8005d64:	6924      	ldr	r4, [r4, #16]
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	d1f4      	bne.n	8005d54 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d6a:	ac05      	add	r4, sp, #20
 8005d6c:	e9cd c400 	strd	ip, r4, [sp]
 8005d70:	b292      	uxth	r2, r2
 8005d72:	f000 fd14 	bl	800679e <xTaskCreate>
 8005d76:	2801      	cmp	r0, #1
          hTask = NULL;
 8005d78:	bf1c      	itt	ne
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	9305      	strne	r3, [sp, #20]
 8005d7e:	e7e9      	b.n	8005d54 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8005d80:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8005d84:	2280      	movs	r2, #128	@ 0x80
    name  = &empty;
 8005d86:	f10d 0113 	add.w	r1, sp, #19
 8005d8a:	e7ee      	b.n	8005d6a <osThreadNew+0x7e>
        return (NULL);
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e7e2      	b.n	8005d56 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d90:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005d94:	9500      	str	r5, [sp, #0]
 8005d96:	f000 fccb 	bl	8006730 <xTaskCreateStatic>
 8005d9a:	9005      	str	r0, [sp, #20]
 8005d9c:	e7da      	b.n	8005d54 <osThreadNew+0x68>
 8005d9e:	bf00      	nop
 8005da0:	20001318 	.word	0x20001318

08005da4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da6:	4606      	mov	r6, r0
 8005da8:	460d      	mov	r5, r1
 8005daa:	4617      	mov	r7, r2
 8005dac:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8005db2:	b113      	cbz	r3, 8005dba <osTimerNew+0x16>
  hTimer = NULL;
 8005db4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8005db6:	b003      	add	sp, #12
 8005db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dba:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (func != NULL)) {
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f8      	bne.n	8005db4 <osTimerNew+0x10>
 8005dc2:	4b16      	ldr	r3, [pc, #88]	@ (8005e1c <osTimerNew+0x78>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d103      	bne.n	8005dd2 <osTimerNew+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dca:	f3ef 8311 	mrs	r3, BASEPRI
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f0      	bne.n	8005db4 <osTimerNew+0x10>
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0ee      	beq.n	8005db4 <osTimerNew+0x10>
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005dd6:	2008      	movs	r0, #8
 8005dd8:	f001 fc50 	bl	800767c <pvPortMalloc>
    if (callb != NULL) {
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d0e8      	beq.n	8005db4 <osTimerNew+0x10>
      if (type == osTimerOnce) {
 8005de2:	1e2a      	subs	r2, r5, #0
 8005de4:	bf18      	it	ne
 8005de6:	2201      	movne	r2, #1
      callb->arg  = argument;
 8005de8:	e9c0 6700 	strd	r6, r7, [r0]
      if (attr != NULL) {
 8005dec:	b17c      	cbz	r4, 8005e0e <osTimerNew+0x6a>
        if (attr->name != NULL) {
 8005dee:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005df0:	e9d4 1402 	ldrd	r1, r4, [r4, #8]
 8005df4:	b141      	cbz	r1, 8005e08 <osTimerNew+0x64>
 8005df6:	2c2f      	cmp	r4, #47	@ 0x2f
 8005df8:	d9dc      	bls.n	8005db4 <osTimerNew+0x10>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005dfa:	9101      	str	r1, [sp, #4]
 8005dfc:	4908      	ldr	r1, [pc, #32]	@ (8005e20 <osTimerNew+0x7c>)
 8005dfe:	9100      	str	r1, [sp, #0]
 8005e00:	2101      	movs	r1, #1
 8005e02:	f001 f91a 	bl	800703a <xTimerCreateStatic>
 8005e06:	e7d6      	b.n	8005db6 <osTimerNew+0x12>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d1d3      	bne.n	8005db4 <osTimerNew+0x10>
 8005e0c:	4604      	mov	r4, r0
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005e0e:	4904      	ldr	r1, [pc, #16]	@ (8005e20 <osTimerNew+0x7c>)
 8005e10:	4620      	mov	r0, r4
 8005e12:	9100      	str	r1, [sp, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	f001 f8e9 	bl	8006fec <xTimerCreate>
  return ((osTimerId_t)hTimer);
 8005e1a:	e7cc      	b.n	8005db6 <osTimerNew+0x12>
 8005e1c:	20001318 	.word	0x20001318
 8005e20:	08005c61 	.word	0x08005c61

08005e24 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005e24:	b507      	push	{r0, r1, r2, lr}
 8005e26:	460a      	mov	r2, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e28:	f3ef 8305 	mrs	r3, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e2c:	b123      	cbz	r3, 8005e38 <osTimerStart+0x14>
    stat = osErrorISR;
 8005e2e:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8005e32:	b003      	add	sp, #12
 8005e34:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e38:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f6      	bne.n	8005e2e <osTimerStart+0xa>
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <osTimerStart+0x4c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d103      	bne.n	8005e50 <osTimerStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e48:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ee      	bne.n	8005e2e <osTimerStart+0xa>
  else if (hTimer == NULL) {
 8005e50:	b150      	cbz	r0, 8005e68 <osTimerStart+0x44>
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005e52:	2300      	movs	r3, #0
 8005e54:	2104      	movs	r1, #4
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	f001 f92c 	bl	80070b4 <xTimerGenericCommand>
      stat = osOK;
 8005e5c:	2801      	cmp	r0, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	f06f 0002 	mvnne.w	r0, #2
 8005e64:	2000      	moveq	r0, #0
 8005e66:	e7e4      	b.n	8005e32 <osTimerStart+0xe>
    stat = osErrorParameter;
 8005e68:	f06f 0003 	mvn.w	r0, #3
 8005e6c:	e7e1      	b.n	8005e32 <osTimerStart+0xe>
 8005e6e:	bf00      	nop
 8005e70:	20001318 	.word	0x20001318

08005e74 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e74:	4b03      	ldr	r3, [pc, #12]	@ (8005e84 <vApplicationGetIdleTaskMemory+0x10>)
 8005e76:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e78:	4b03      	ldr	r3, [pc, #12]	@ (8005e88 <vApplicationGetIdleTaskMemory+0x14>)
 8005e7a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	6013      	str	r3, [r2, #0]
}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	2000126c 	.word	0x2000126c
 8005e88:	2000106c 	.word	0x2000106c

08005e8c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e8c:	4b03      	ldr	r3, [pc, #12]	@ (8005e9c <vApplicationGetTimerTaskMemory+0x10>)
 8005e8e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e90:	4b03      	ldr	r3, [pc, #12]	@ (8005ea0 <vApplicationGetTimerTaskMemory+0x14>)
 8005e92:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e94:	2380      	movs	r3, #128	@ 0x80
 8005e96:	6013      	str	r3, [r2, #0]
}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000fc0 	.word	0x20000fc0
 8005ea0:	20000dc0 	.word	0x20000dc0

08005ea4 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea8:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eac:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eb8:	4770      	bx	lr

08005eba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ebe:	4770      	bx	lr

08005ec0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ec0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ec2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ec8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ecc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005ece:	6803      	ldr	r3, [r0, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	6003      	str	r3, [r0, #0]
}
 8005ed4:	4770      	bx	lr

08005ed6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ed6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ed8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eda:	1c63      	adds	r3, r4, #1
 8005edc:	d10a      	bne.n	8005ef4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ede:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ee4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ee8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005eea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005eec:	6803      	ldr	r3, [r0, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	6003      	str	r3, [r0, #0]
}
 8005ef2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef4:	f100 0208 	add.w	r2, r0, #8
 8005ef8:	4613      	mov	r3, r2
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	6815      	ldr	r5, [r2, #0]
 8005efe:	42a5      	cmp	r5, r4
 8005f00:	d9fa      	bls.n	8005ef8 <vListInsert+0x22>
 8005f02:	e7ed      	b.n	8005ee0 <vListInsert+0xa>

08005f04 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f04:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f06:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8005f0a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f14:	bf04      	itt	eq
 8005f16:	6882      	ldreq	r2, [r0, #8]
 8005f18:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	3a01      	subs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f24:	6818      	ldr	r0, [r3, #0]
}
 8005f26:	4770      	bx	lr

08005f28 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f2c:	f001 fa7a 	bl	8007424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f30:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f32:	f001 fa97 	bl	8007464 <vPortExitCritical>

	return xReturn;
}
 8005f36:	fab4 f084 	clz	r0, r4
 8005f3a:	0940      	lsrs	r0, r0, #5
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <prvCopyDataToQueue>:
{
 8005f3e:	b570      	push	{r4, r5, r6, lr}
 8005f40:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f42:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8005f44:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f46:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f48:	b942      	cbnz	r2, 8005f5c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f4a:	6806      	ldr	r6, [r0, #0]
 8005f4c:	b99e      	cbnz	r6, 8005f76 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f4e:	6840      	ldr	r0, [r0, #4]
 8005f50:	f000 ff8c 	bl	8006e6c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005f54:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f56:	3501      	adds	r5, #1
 8005f58:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005f5c:	b96e      	cbnz	r6, 8005f7a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f5e:	6880      	ldr	r0, [r0, #8]
 8005f60:	f002 fb28 	bl	80085b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005f68:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f6c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f70:	bf24      	itt	cs
 8005f72:	6823      	ldrcs	r3, [r4, #0]
 8005f74:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005f76:	2000      	movs	r0, #0
 8005f78:	e7ed      	b.n	8005f56 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7a:	68c0      	ldr	r0, [r0, #12]
 8005f7c:	f002 fb1a 	bl	80085b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005f82:	68e3      	ldr	r3, [r4, #12]
 8005f84:	4251      	negs	r1, r2
 8005f86:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f88:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f8a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f8c:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f8e:	bf3e      	ittt	cc
 8005f90:	6863      	ldrcc	r3, [r4, #4]
 8005f92:	185b      	addcc	r3, r3, r1
 8005f94:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005f96:	2e02      	cmp	r6, #2
 8005f98:	d1ed      	bne.n	8005f76 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f9a:	b10d      	cbz	r5, 8005fa0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005f9c:	3d01      	subs	r5, #1
 8005f9e:	e7ea      	b.n	8005f76 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	e7d8      	b.n	8005f56 <prvCopyDataToQueue+0x18>

08005fa4 <prvCopyDataFromQueue>:
{
 8005fa4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8005fa8:	4608      	mov	r0, r1
 8005faa:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fac:	b162      	cbz	r2, 8005fc8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fae:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fb0:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fb2:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fb4:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fb6:	bf28      	it	cs
 8005fb8:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005fba:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fbc:	bf28      	it	cs
 8005fbe:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fc0:	68d9      	ldr	r1, [r3, #12]
}
 8005fc2:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fc4:	f002 baf6 	b.w	80085b4 <memcpy>
}
 8005fc8:	bc10      	pop	{r4}
 8005fca:	4770      	bx	lr

08005fcc <prvUnlockQueue>:
{
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005fd0:	f001 fa28 	bl	8007424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005fd4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005fdc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	dc14      	bgt.n	800600c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe2:	23ff      	movs	r3, #255	@ 0xff
 8005fe4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005fe8:	f001 fa3c 	bl	8007464 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005fec:	f001 fa1a 	bl	8007424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff0:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff4:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	dc12      	bgt.n	8006024 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005ffe:	23ff      	movs	r3, #255	@ 0xff
 8006000:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8006004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006008:	f001 ba2c 	b.w	8007464 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800600c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0e7      	beq.n	8005fe2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006012:	4630      	mov	r0, r6
 8006014:	f000 fe8c 	bl	8006d30 <xTaskRemoveFromEventList>
 8006018:	b108      	cbz	r0, 800601e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800601a:	f000 ff11 	bl	8006e40 <vTaskMissedYield>
			--cTxLock;
 800601e:	3d01      	subs	r5, #1
 8006020:	b26d      	sxtb	r5, r5
 8006022:	e7dc      	b.n	8005fde <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0e9      	beq.n	8005ffe <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602a:	4630      	mov	r0, r6
 800602c:	f000 fe80 	bl	8006d30 <xTaskRemoveFromEventList>
 8006030:	b108      	cbz	r0, 8006036 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006032:	f000 ff05 	bl	8006e40 <vTaskMissedYield>
				--cRxLock;
 8006036:	3d01      	subs	r5, #1
 8006038:	b26d      	sxtb	r5, r5
 800603a:	e7de      	b.n	8005ffa <prvUnlockQueue+0x2e>

0800603c <xQueueGenericReset>:
{
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006040:	4604      	mov	r4, r0
 8006042:	b940      	cbnz	r0, 8006056 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	e7fe      	b.n	8006054 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006056:	f001 f9e5 	bl	8007424 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800605a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800605e:	434b      	muls	r3, r1
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006064:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006066:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006068:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800606a:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800606c:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800606e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006070:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006072:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006074:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006078:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800607c:	b9a5      	cbnz	r5, 80060a8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b173      	cbz	r3, 80060a0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006082:	f104 0010 	add.w	r0, r4, #16
 8006086:	f000 fe53 	bl	8006d30 <xTaskRemoveFromEventList>
 800608a:	b148      	cbz	r0, 80060a0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800608c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006094:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80060a0:	f001 f9e0 	bl	8007464 <vPortExitCritical>
}
 80060a4:	2001      	movs	r0, #1
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060a8:	f104 0010 	add.w	r0, r4, #16
 80060ac:	f7ff fefa 	bl	8005ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80060b4:	f7ff fef6 	bl	8005ea4 <vListInitialise>
 80060b8:	e7f2      	b.n	80060a0 <xQueueGenericReset+0x64>

080060ba <xQueueGenericCreateStatic>:
	{
 80060ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060bc:	460d      	mov	r5, r1
 80060be:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060c0:	b940      	cbnz	r0, 80060d4 <xQueueGenericCreateStatic+0x1a>
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	e7fe      	b.n	80060d2 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80060d4:	b943      	cbnz	r3, 80060e8 <xQueueGenericCreateStatic+0x2e>
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	e7fe      	b.n	80060e6 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060e8:	b14a      	cbz	r2, 80060fe <xQueueGenericCreateStatic+0x44>
 80060ea:	b991      	cbnz	r1, 8006112 <xQueueGenericCreateStatic+0x58>
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060fe:	b141      	cbz	r1, 8006112 <xQueueGenericCreateStatic+0x58>
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	e7fe      	b.n	8006110 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006112:	2350      	movs	r3, #80	@ 0x50
 8006114:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	2b50      	cmp	r3, #80	@ 0x50
 800611a:	d008      	beq.n	800612e <xQueueGenericCreateStatic+0x74>
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	e7fe      	b.n	800612c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800612e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006130:	2d00      	cmp	r5, #0
 8006132:	bf08      	it	eq
 8006134:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006136:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800613a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800613e:	4620      	mov	r0, r4
 8006140:	6022      	str	r2, [r4, #0]
 8006142:	f7ff ff7b 	bl	800603c <xQueueGenericReset>
	}
 8006146:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006148:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800614c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8006150:	b003      	add	sp, #12
 8006152:	bd30      	pop	{r4, r5, pc}

08006154 <xQueueGenericSend>:
{
 8006154:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006158:	460f      	mov	r7, r1
 800615a:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800615c:	4604      	mov	r4, r0
{
 800615e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006160:	b940      	cbnz	r0, 8006174 <xQueueGenericSend+0x20>
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	e7fe      	b.n	8006172 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006174:	b951      	cbnz	r1, 800618c <xQueueGenericSend+0x38>
 8006176:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006178:	b143      	cbz	r3, 800618c <xQueueGenericSend+0x38>
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	e7fe      	b.n	800618a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800618c:	2e02      	cmp	r6, #2
 800618e:	d10b      	bne.n	80061a8 <xQueueGenericSend+0x54>
 8006190:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d008      	beq.n	80061a8 <xQueueGenericSend+0x54>
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	e7fe      	b.n	80061a6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a8:	f000 fe50 	bl	8006e4c <xTaskGetSchedulerState>
 80061ac:	4605      	mov	r5, r0
 80061ae:	b330      	cbz	r0, 80061fe <xQueueGenericSend+0xaa>
 80061b0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80061b2:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80061b6:	f001 f935 	bl	8007424 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80061bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80061be:	429a      	cmp	r2, r3
 80061c0:	d301      	bcc.n	80061c6 <xQueueGenericSend+0x72>
 80061c2:	2e02      	cmp	r6, #2
 80061c4:	d127      	bne.n	8006216 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c6:	4632      	mov	r2, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	4620      	mov	r0, r4
 80061cc:	f7ff feb7 	bl	8005f3e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061d2:	b11b      	cbz	r3, 80061dc <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80061d8:	f000 fdaa 	bl	8006d30 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80061dc:	b148      	cbz	r0, 80061f2 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80061de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80061e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80061f2:	f001 f937 	bl	8007464 <vPortExitCritical>
				return pdPASS;
 80061f6:	2001      	movs	r0, #1
}
 80061f8:	b004      	add	sp, #16
 80061fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0d6      	beq.n	80061b2 <xQueueGenericSend+0x5e>
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	e7fe      	b.n	8006214 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	b91b      	cbnz	r3, 8006222 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800621a:	f001 f923 	bl	8007464 <vPortExitCritical>
					return errQUEUE_FULL;
 800621e:	2000      	movs	r0, #0
 8006220:	e7ea      	b.n	80061f8 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8006222:	b915      	cbnz	r5, 800622a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006224:	a802      	add	r0, sp, #8
 8006226:	f000 fdc3 	bl	8006db0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800622a:	f001 f91b 	bl	8007464 <vPortExitCritical>
		vTaskSuspendAll();
 800622e:	f000 fb7f 	bl	8006930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006232:	f001 f8f7 	bl	8007424 <vPortEnterCritical>
 8006236:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	bf08      	it	eq
 800623e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006242:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006246:	2bff      	cmp	r3, #255	@ 0xff
 8006248:	bf08      	it	eq
 800624a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800624e:	f001 f909 	bl	8007464 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006252:	a901      	add	r1, sp, #4
 8006254:	a802      	add	r0, sp, #8
 8006256:	f000 fdb7 	bl	8006dc8 <xTaskCheckForTimeOut>
 800625a:	bb38      	cbnz	r0, 80062ac <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800625c:	f001 f8e2 	bl	8007424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006260:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006262:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006264:	429a      	cmp	r2, r3
 8006266:	d10e      	bne.n	8006286 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006268:	f001 f8fc 	bl	8007464 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800626c:	9901      	ldr	r1, [sp, #4]
 800626e:	f104 0010 	add.w	r0, r4, #16
 8006272:	f000 fd23 	bl	8006cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006276:	4620      	mov	r0, r4
 8006278:	f7ff fea8 	bl	8005fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800627c:	f000 fc04 	bl	8006a88 <xTaskResumeAll>
 8006280:	b148      	cbz	r0, 8006296 <xQueueGenericSend+0x142>
 8006282:	2501      	movs	r5, #1
 8006284:	e797      	b.n	80061b6 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8006286:	f001 f8ed 	bl	8007464 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800628a:	4620      	mov	r0, r4
 800628c:	f7ff fe9e 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006290:	f000 fbfa 	bl	8006a88 <xTaskResumeAll>
 8006294:	e7f5      	b.n	8006282 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006296:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800629a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800629e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	e7ea      	b.n	8006282 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7ff fe8d 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b2:	f000 fbe9 	bl	8006a88 <xTaskResumeAll>
			return errQUEUE_FULL;
 80062b6:	e7b2      	b.n	800621e <xQueueGenericSend+0xca>

080062b8 <xQueueGenericSendFromISR>:
{
 80062b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062bc:	4689      	mov	r9, r1
 80062be:	4617      	mov	r7, r2
 80062c0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80062c2:	4604      	mov	r4, r0
 80062c4:	b940      	cbnz	r0, 80062d8 <xQueueGenericSendFromISR+0x20>
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	e7fe      	b.n	80062d6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062d8:	b951      	cbnz	r1, 80062f0 <xQueueGenericSendFromISR+0x38>
 80062da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80062dc:	b143      	cbz	r3, 80062f0 <xQueueGenericSendFromISR+0x38>
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	e7fe      	b.n	80062ee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062f0:	2e02      	cmp	r6, #2
 80062f2:	d10b      	bne.n	800630c <xQueueGenericSendFromISR+0x54>
 80062f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d008      	beq.n	800630c <xQueueGenericSendFromISR+0x54>
 80062fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	e7fe      	b.n	800630a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800630c:	f001 f962 	bl	80075d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006310:	f3ef 8811 	mrs	r8, BASEPRI
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006324:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006326:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006328:	429a      	cmp	r2, r3
 800632a:	d301      	bcc.n	8006330 <xQueueGenericSendFromISR+0x78>
 800632c:	2e02      	cmp	r6, #2
 800632e:	d11d      	bne.n	800636c <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006330:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006334:	4632      	mov	r2, r6
 8006336:	4649      	mov	r1, r9
 8006338:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800633a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800633c:	f7ff fdff 	bl	8005f3e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006340:	1c6b      	adds	r3, r5, #1
 8006342:	d10e      	bne.n	8006362 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006344:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006346:	b13b      	cbz	r3, 8006358 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006348:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800634c:	f000 fcf0 	bl	8006d30 <xTaskRemoveFromEventList>
 8006350:	b110      	cbz	r0, 8006358 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8006352:	b10f      	cbz	r7, 8006358 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8006358:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800635a:	f388 8811 	msr	BASEPRI, r8
}
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006362:	3501      	adds	r5, #1
 8006364:	b26d      	sxtb	r5, r5
 8006366:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800636a:	e7f5      	b.n	8006358 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800636c:	2000      	movs	r0, #0
 800636e:	e7f4      	b.n	800635a <xQueueGenericSendFromISR+0xa2>

08006370 <xQueueReceive>:
{
 8006370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006374:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8006376:	4604      	mov	r4, r0
{
 8006378:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800637a:	b940      	cbnz	r0, 800638e <xQueueReceive+0x1e>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	e7fe      	b.n	800638c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638e:	b951      	cbnz	r1, 80063a6 <xQueueReceive+0x36>
 8006390:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006392:	b143      	cbz	r3, 80063a6 <xQueueReceive+0x36>
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	e7fe      	b.n	80063a4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a6:	f000 fd51 	bl	8006e4c <xTaskGetSchedulerState>
 80063aa:	4605      	mov	r5, r0
 80063ac:	b318      	cbz	r0, 80063f6 <xQueueReceive+0x86>
 80063ae:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80063b0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80063b4:	f001 f836 	bl	8007424 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ba:	b347      	cbz	r7, 800640e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063bc:	4631      	mov	r1, r6
 80063be:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063c0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063c2:	f7ff fdef 	bl	8005fa4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063c6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	b173      	cbz	r3, 80063ea <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	f104 0010 	add.w	r0, r4, #16
 80063d0:	f000 fcae 	bl	8006d30 <xTaskRemoveFromEventList>
 80063d4:	b148      	cbz	r0, 80063ea <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80063d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80063da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80063ea:	f001 f83b 	bl	8007464 <vPortExitCritical>
				return pdPASS;
 80063ee:	2001      	movs	r0, #1
}
 80063f0:	b004      	add	sp, #16
 80063f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0d9      	beq.n	80063b0 <xQueueReceive+0x40>
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	e7fe      	b.n	800640c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	b91b      	cbnz	r3, 800641a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8006412:	f001 f827 	bl	8007464 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006416:	2000      	movs	r0, #0
 8006418:	e7ea      	b.n	80063f0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800641a:	b915      	cbnz	r5, 8006422 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800641c:	a802      	add	r0, sp, #8
 800641e:	f000 fcc7 	bl	8006db0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006422:	f001 f81f 	bl	8007464 <vPortExitCritical>
		vTaskSuspendAll();
 8006426:	f000 fa83 	bl	8006930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642a:	f000 fffb 	bl	8007424 <vPortEnterCritical>
 800642e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006432:	2bff      	cmp	r3, #255	@ 0xff
 8006434:	bf08      	it	eq
 8006436:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800643a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	bf08      	it	eq
 8006442:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006446:	f001 f80d 	bl	8007464 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800644a:	a901      	add	r1, sp, #4
 800644c:	a802      	add	r0, sp, #8
 800644e:	f000 fcbb 	bl	8006dc8 <xTaskCheckForTimeOut>
 8006452:	bb00      	cbnz	r0, 8006496 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fd67 	bl	8005f28 <prvIsQueueEmpty>
 800645a:	b1b0      	cbz	r0, 800648a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800645c:	9901      	ldr	r1, [sp, #4]
 800645e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006462:	f000 fc2b 	bl	8006cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fdb0 	bl	8005fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800646c:	f000 fb0c 	bl	8006a88 <xTaskResumeAll>
 8006470:	b948      	cbnz	r0, 8006486 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8006472:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	2501      	movs	r5, #1
 8006488:	e794      	b.n	80063b4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff fd9e 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006490:	f000 fafa 	bl	8006a88 <xTaskResumeAll>
 8006494:	e7f7      	b.n	8006486 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff fd98 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800649c:	f000 faf4 	bl	8006a88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff fd41 	bl	8005f28 <prvIsQueueEmpty>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0ed      	beq.n	8006486 <xQueueReceive+0x116>
 80064aa:	e7b4      	b.n	8006416 <xQueueReceive+0xa6>

080064ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064b4:	f000 ffb6 	bl	8007424 <vPortEnterCritical>
 80064b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80064bc:	2bff      	cmp	r3, #255	@ 0xff
 80064be:	bf04      	itt	eq
 80064c0:	2300      	moveq	r3, #0
 80064c2:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80064c6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80064ca:	2bff      	cmp	r3, #255	@ 0xff
 80064cc:	bf04      	itt	eq
 80064ce:	2300      	moveq	r3, #0
 80064d0:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80064d4:	f000 ffc6 	bl	8007464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80064da:	b92b      	cbnz	r3, 80064e8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064dc:	4632      	mov	r2, r6
 80064de:	4629      	mov	r1, r5
 80064e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80064e4:	f000 fc04 	bl	8006cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064e8:	4620      	mov	r0, r4
	}
 80064ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80064ee:	f7ff bd6d 	b.w	8005fcc <prvUnlockQueue>
	...

080064f4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064fa:	f000 ff93 	bl	8007424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064fe:	4b2e      	ldr	r3, [pc, #184]	@ (80065b8 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8006500:	4e2e      	ldr	r6, [pc, #184]	@ (80065bc <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4f2e      	ldr	r7, [pc, #184]	@ (80065c0 <prvAddNewTaskToReadyList+0xcc>)
 8006506:	3201      	adds	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800650a:	6835      	ldr	r5, [r6, #0]
 800650c:	2d00      	cmp	r5, #0
 800650e:	d148      	bne.n	80065a2 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006510:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d11c      	bne.n	8006552 <prvAddNewTaskToReadyList+0x5e>
 8006518:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800651a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800651e:	f7ff fcc1 	bl	8005ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006522:	2d38      	cmp	r5, #56	@ 0x38
 8006524:	f108 0814 	add.w	r8, r8, #20
 8006528:	d1f7      	bne.n	800651a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800652a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80065c4 <prvAddNewTaskToReadyList+0xd0>
	vListInitialise( &xDelayedTaskList2 );
 800652e:	4d26      	ldr	r5, [pc, #152]	@ (80065c8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8006530:	4640      	mov	r0, r8
 8006532:	f7ff fcb7 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006536:	4628      	mov	r0, r5
 8006538:	f7ff fcb4 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800653c:	4823      	ldr	r0, [pc, #140]	@ (80065cc <prvAddNewTaskToReadyList+0xd8>)
 800653e:	f7ff fcb1 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006542:	4823      	ldr	r0, [pc, #140]	@ (80065d0 <prvAddNewTaskToReadyList+0xdc>)
 8006544:	f7ff fcae 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006548:	4b22      	ldr	r3, [pc, #136]	@ (80065d4 <prvAddNewTaskToReadyList+0xe0>)
 800654a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800654e:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <prvAddNewTaskToReadyList+0xe4>)
 8006550:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006552:	2014      	movs	r0, #20
		uxTaskNumber++;
 8006554:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <prvAddNewTaskToReadyList+0xe8>)
 8006556:	6813      	ldr	r3, [r2, #0]
 8006558:	3301      	adds	r3, #1
 800655a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800655c:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800655e:	64a3      	str	r3, [r4, #72]	@ 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8006560:	6811      	ldr	r1, [r2, #0]
 8006562:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006564:	428b      	cmp	r3, r1
 8006566:	fb00 7003 	mla	r0, r0, r3, r7
 800656a:	f104 0104 	add.w	r1, r4, #4
 800656e:	bf88      	it	hi
 8006570:	6013      	strhi	r3, [r2, #0]
 8006572:	f7ff fca5 	bl	8005ec0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006576:	f000 ff75 	bl	8007464 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800657a:	4b1a      	ldr	r3, [pc, #104]	@ (80065e4 <prvAddNewTaskToReadyList+0xf0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b173      	cbz	r3, 800659e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006586:	429a      	cmp	r2, r3
 8006588:	d209      	bcs.n	800659e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800658a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
}
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80065a2:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <prvAddNewTaskToReadyList+0xf0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d1d2      	bne.n	8006552 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065ac:	6832      	ldr	r2, [r6, #0]
 80065ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065b0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80065b2:	bf98      	it	ls
 80065b4:	6034      	strls	r4, [r6, #0]
 80065b6:	e7cc      	b.n	8006552 <prvAddNewTaskToReadyList+0x5e>
 80065b8:	20001340 	.word	0x20001340
 80065bc:	200017fc 	.word	0x200017fc
 80065c0:	2000139c 	.word	0x2000139c
 80065c4:	20001388 	.word	0x20001388
 80065c8:	20001374 	.word	0x20001374
 80065cc:	20001358 	.word	0x20001358
 80065d0:	20001344 	.word	0x20001344
 80065d4:	20001370 	.word	0x20001370
 80065d8:	2000136c 	.word	0x2000136c
 80065dc:	20001324 	.word	0x20001324
 80065e0:	20001338 	.word	0x20001338
 80065e4:	20001334 	.word	0x20001334

080065e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	4606      	mov	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ec:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ee:	4d15      	ldr	r5, [pc, #84]	@ (8006644 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80065f0:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f2:	6828      	ldr	r0, [r5, #0]
{
 80065f4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f6:	3004      	adds	r0, #4
 80065f8:	f7ff fc84 	bl	8005f04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065fc:	1c73      	adds	r3, r6, #1
 80065fe:	d107      	bne.n	8006610 <prvAddCurrentTaskToDelayedList+0x28>
 8006600:	b137      	cbz	r7, 8006610 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006602:	6829      	ldr	r1, [r5, #0]
 8006604:	4810      	ldr	r0, [pc, #64]	@ (8006648 <prvAddCurrentTaskToDelayedList+0x60>)
 8006606:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660c:	f7ff bc58 	b.w	8005ec0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	19a4      	adds	r4, r4, r6
 8006614:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006616:	d307      	bcc.n	8006628 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <prvAddCurrentTaskToDelayedList+0x64>)
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	6829      	ldr	r1, [r5, #0]
}
 800661e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006622:	3104      	adds	r1, #4
 8006624:	f7ff bc57 	b.w	8005ed6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006628:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <prvAddCurrentTaskToDelayedList+0x68>)
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	6829      	ldr	r1, [r5, #0]
 800662e:	3104      	adds	r1, #4
 8006630:	f7ff fc51 	bl	8005ed6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006634:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800663a:	bf88      	it	hi
 800663c:	601c      	strhi	r4, [r3, #0]
}
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006640:	2000133c 	.word	0x2000133c
 8006644:	200017fc 	.word	0x200017fc
 8006648:	20001344 	.word	0x20001344
 800664c:	2000136c 	.word	0x2000136c
 8006650:	20001370 	.word	0x20001370
 8006654:	20001320 	.word	0x20001320

08006658 <prvIdleTask>:
{
 8006658:	b508      	push	{r3, lr}
			vApplicationIdleHook();
 800665a:	f001 fa9f 	bl	8007b9c <vApplicationIdleHook>
	for( ;; )
 800665e:	e7fc      	b.n	800665a <prvIdleTask+0x2>

08006660 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006660:	4a06      	ldr	r2, [pc, #24]	@ (800667c <prvResetNextTaskUnblockTime+0x1c>)
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	6819      	ldr	r1, [r3, #0]
 8006666:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <prvResetNextTaskUnblockTime+0x20>)
 8006668:	b919      	cbnz	r1, 8006672 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800666e:	601a      	str	r2, [r3, #0]
}
 8006670:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006676:	68d2      	ldr	r2, [r2, #12]
 8006678:	6852      	ldr	r2, [r2, #4]
 800667a:	e7f8      	b.n	800666e <prvResetNextTaskUnblockTime+0xe>
 800667c:	20001370 	.word	0x20001370
 8006680:	20001320 	.word	0x20001320

08006684 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	460d      	mov	r5, r1
 800668a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800668e:	0096      	lsls	r6, r2, #2
 8006690:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006692:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006694:	21a5      	movs	r1, #165	@ 0xa5
 8006696:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006698:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800669a:	f001 ff5f 	bl	800855c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800669e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80066a0:	3e04      	subs	r6, #4
 80066a2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80066a4:	f026 0607 	bic.w	r6, r6, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80066a8:	1e6b      	subs	r3, r5, #1
 80066aa:	6466      	str	r6, [r4, #68]	@ 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ac:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80066b0:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066b2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80066b6:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80066ba:	b109      	cbz	r1, 80066c0 <prvInitialiseNewTask.constprop.0+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066bc:	42ab      	cmp	r3, r5
 80066be:	d1f8      	bne.n	80066b2 <prvInitialiseNewTask.constprop.0+0x2e>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066c0:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066c2:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066c6:	2d37      	cmp	r5, #55	@ 0x37
 80066c8:	bf28      	it	cs
 80066ca:	2537      	movcs	r5, #55	@ 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066cc:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80066ce:	e9c4 5a14 	strd	r5, sl, [r4, #80]	@ 0x50
	pxNewTCB->uxPriority = uxPriority;
 80066d2:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066d4:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066d8:	f7ff fbef 	bl	8005eba <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066e0:	f104 0018 	add.w	r0, r4, #24
 80066e4:	f7ff fbe9 	bl	8005eba <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066e8:	224c      	movs	r2, #76	@ 0x4c
 80066ea:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 80066ec:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066f4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066f6:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066fa:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066fe:	f001 ff2d 	bl	800855c <memset>
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <prvInitialiseNewTask.constprop.0+0xa8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006704:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006706:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800670a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800670c:	33d0      	adds	r3, #208	@ 0xd0
 800670e:	6622      	str	r2, [r4, #96]	@ 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006710:	4630      	mov	r0, r6
 8006712:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006714:	6663      	str	r3, [r4, #100]	@ 0x64
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006716:	f000 fe5d 	bl	80073d4 <pxPortInitialiseStack>
 800671a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	d001      	beq.n	8006726 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006722:	f8c9 4000 	str.w	r4, [r9]
}
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672a:	bf00      	nop
 800672c:	200045c8 	.word	0x200045c8

08006730 <xTaskCreateStatic>:
	{
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006738:	b945      	cbnz	r5, 800674c <xTaskCreateStatic+0x1c>
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	e7fe      	b.n	800674a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800674c:	b944      	cbnz	r4, 8006760 <xTaskCreateStatic+0x30>
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	e7fe      	b.n	800675e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006760:	26ac      	movs	r6, #172	@ 0xac
 8006762:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006764:	9e05      	ldr	r6, [sp, #20]
 8006766:	2eac      	cmp	r6, #172	@ 0xac
 8006768:	d008      	beq.n	800677c <xTaskCreateStatic+0x4c>
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	e7fe      	b.n	800677a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800677c:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800677e:	2502      	movs	r5, #2
 8006780:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006784:	ad04      	add	r5, sp, #16
 8006786:	9501      	str	r5, [sp, #4]
 8006788:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800678a:	9402      	str	r4, [sp, #8]
 800678c:	9500      	str	r5, [sp, #0]
 800678e:	f7ff ff79 	bl	8006684 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff feae 	bl	80064f4 <prvAddNewTaskToReadyList>
	}
 8006798:	9804      	ldr	r0, [sp, #16]
 800679a:	b006      	add	sp, #24
 800679c:	bd70      	pop	{r4, r5, r6, pc}

0800679e <xTaskCreate>:
	{
 800679e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a2:	4607      	mov	r7, r0
 80067a4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a6:	0090      	lsls	r0, r2, #2
	{
 80067a8:	4688      	mov	r8, r1
 80067aa:	4616      	mov	r6, r2
 80067ac:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ae:	f000 ff65 	bl	800767c <pvPortMalloc>
			if( pxStack != NULL )
 80067b2:	4605      	mov	r5, r0
 80067b4:	b920      	cbnz	r0, 80067c0 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80067ba:	b005      	add	sp, #20
 80067bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067c0:	20ac      	movs	r0, #172	@ 0xac
 80067c2:	f000 ff5b 	bl	800767c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80067c6:	4604      	mov	r4, r0
 80067c8:	b198      	cbz	r0, 80067f2 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80067d2:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067d8:	4632      	mov	r2, r6
 80067da:	4641      	mov	r1, r8
 80067dc:	9002      	str	r0, [sp, #8]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4638      	mov	r0, r7
 80067e2:	464b      	mov	r3, r9
 80067e4:	f7ff ff4e 	bl	8006684 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff fe83 	bl	80064f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ee:	2001      	movs	r0, #1
 80067f0:	e7e3      	b.n	80067ba <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 ffd4 	bl	80077a0 <vPortFree>
		if( pxNewTCB != NULL )
 80067f8:	e7dd      	b.n	80067b6 <xTaskCreate+0x18>
	...

080067fc <vTaskResume>:
	{
 80067fc:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 80067fe:	4604      	mov	r4, r0
 8006800:	b940      	cbnz	r0, 8006814 <vTaskResume+0x18>
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	e7fe      	b.n	8006812 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006814:	4d19      	ldr	r5, [pc, #100]	@ (800687c <vTaskResume+0x80>)
 8006816:	682b      	ldr	r3, [r5, #0]
 8006818:	4283      	cmp	r3, r0
 800681a:	d02e      	beq.n	800687a <vTaskResume+0x7e>
			taskENTER_CRITICAL();
 800681c:	f000 fe02 	bl	8007424 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006820:	6962      	ldr	r2, [r4, #20]
 8006822:	4b17      	ldr	r3, [pc, #92]	@ (8006880 <vTaskResume+0x84>)
 8006824:	429a      	cmp	r2, r3
 8006826:	d124      	bne.n	8006872 <vTaskResume+0x76>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006828:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800682a:	4a16      	ldr	r2, [pc, #88]	@ (8006884 <vTaskResume+0x88>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d020      	beq.n	8006872 <vTaskResume+0x76>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006830:	b9fb      	cbnz	r3, 8006872 <vTaskResume+0x76>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006832:	1d26      	adds	r6, r4, #4
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff fb65 	bl	8005f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800683a:	2014      	movs	r0, #20
 800683c:	4a12      	ldr	r2, [pc, #72]	@ (8006888 <vTaskResume+0x8c>)
 800683e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006840:	6811      	ldr	r1, [r2, #0]
 8006842:	428b      	cmp	r3, r1
 8006844:	bf88      	it	hi
 8006846:	6013      	strhi	r3, [r2, #0]
 8006848:	4a10      	ldr	r2, [pc, #64]	@ (800688c <vTaskResume+0x90>)
 800684a:	4631      	mov	r1, r6
 800684c:	fb00 2003 	mla	r0, r0, r3, r2
 8006850:	f7ff fb36 	bl	8005ec0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d309      	bcc.n	8006872 <vTaskResume+0x76>
						taskYIELD_IF_USING_PREEMPTION();
 800685e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006866:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
	}
 8006872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8006876:	f000 bdf5 	b.w	8007464 <vPortExitCritical>
	}
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	200017fc 	.word	0x200017fc
 8006880:	20001344 	.word	0x20001344
 8006884:	20001358 	.word	0x20001358
 8006888:	20001338 	.word	0x20001338
 800688c:	2000139c 	.word	0x2000139c

08006890 <vTaskStartScheduler>:
{
 8006890:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006892:	2400      	movs	r4, #0
{
 8006894:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006896:	aa07      	add	r2, sp, #28
 8006898:	a906      	add	r1, sp, #24
 800689a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800689c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068a0:	f7ff fae8 	bl	8005e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a4:	9b05      	ldr	r3, [sp, #20]
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	9302      	str	r3, [sp, #8]
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	4919      	ldr	r1, [pc, #100]	@ (8006914 <vTaskStartScheduler+0x84>)
 80068ae:	e9cd 4300 	strd	r4, r3, [sp]
 80068b2:	4819      	ldr	r0, [pc, #100]	@ (8006918 <vTaskStartScheduler+0x88>)
 80068b4:	4623      	mov	r3, r4
 80068b6:	f7ff ff3b 	bl	8006730 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80068ba:	b340      	cbz	r0, 800690e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80068bc:	f000 fb64 	bl	8006f88 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80068c0:	2801      	cmp	r0, #1
 80068c2:	d119      	bne.n	80068f8 <vTaskStartScheduler+0x68>
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <vTaskStartScheduler+0x8c>)
 80068d6:	4a12      	ldr	r2, [pc, #72]	@ (8006920 <vTaskStartScheduler+0x90>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3358      	adds	r3, #88	@ 0x58
 80068dc:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <vTaskStartScheduler+0x94>)
 80068e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e6:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <vTaskStartScheduler+0x98>)
 80068e8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068ea:	4b10      	ldr	r3, [pc, #64]	@ (800692c <vTaskStartScheduler+0x9c>)
 80068ec:	601c      	str	r4, [r3, #0]
}
 80068ee:	b008      	add	sp, #32
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80068f4:	f000 be16 	b.w	8007524 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068f8:	3001      	adds	r0, #1
 80068fa:	d108      	bne.n	800690e <vTaskStartScheduler+0x7e>
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	e7fe      	b.n	800690c <vTaskStartScheduler+0x7c>
}
 800690e:	b008      	add	sp, #32
 8006910:	bd10      	pop	{r4, pc}
 8006912:	bf00      	nop
 8006914:	0800860c 	.word	0x0800860c
 8006918:	08006659 	.word	0x08006659
 800691c:	200017fc 	.word	0x200017fc
 8006920:	20000024 	.word	0x20000024
 8006924:	20001320 	.word	0x20001320
 8006928:	20001334 	.word	0x20001334
 800692c:	2000133c 	.word	0x2000133c

08006930 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006930:	4a02      	ldr	r2, [pc, #8]	@ (800693c <vTaskSuspendAll+0xc>)
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	6013      	str	r3, [r2, #0]
}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2000131c 	.word	0x2000131c

08006940 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006940:	4b01      	ldr	r3, [pc, #4]	@ (8006948 <xTaskGetTickCount+0x8>)
 8006942:	6818      	ldr	r0, [r3, #0]
}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	2000133c 	.word	0x2000133c

0800694c <xTaskIncrementTick>:
{
 800694c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006950:	4b42      	ldr	r3, [pc, #264]	@ (8006a5c <xTaskIncrementTick+0x110>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d177      	bne.n	8006a48 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006958:	4b41      	ldr	r3, [pc, #260]	@ (8006a60 <xTaskIncrementTick+0x114>)
 800695a:	681c      	ldr	r4, [r3, #0]
 800695c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800695e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006960:	b9bc      	cbnz	r4, 8006992 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006962:	4b40      	ldr	r3, [pc, #256]	@ (8006a64 <xTaskIncrementTick+0x118>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	b142      	cbz	r2, 800697c <xTaskIncrementTick+0x30>
 800696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	e7fe      	b.n	800697a <xTaskIncrementTick+0x2e>
 800697c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a68 <xTaskIncrementTick+0x11c>)
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6810      	ldr	r0, [r2, #0]
 8006982:	6018      	str	r0, [r3, #0]
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	4a39      	ldr	r2, [pc, #228]	@ (8006a6c <xTaskIncrementTick+0x120>)
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f7ff fe67 	bl	8006660 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006992:	4d37      	ldr	r5, [pc, #220]	@ (8006a70 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8006994:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	4e36      	ldr	r6, [pc, #216]	@ (8006a74 <xTaskIncrementTick+0x128>)
 800699c:	42a3      	cmp	r3, r4
 800699e:	4f36      	ldr	r7, [pc, #216]	@ (8006a78 <xTaskIncrementTick+0x12c>)
 80069a0:	d916      	bls.n	80069d0 <xTaskIncrementTick+0x84>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069a2:	2114      	movs	r1, #20
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069a8:	434a      	muls	r2, r1
 80069aa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80069ac:	2a02      	cmp	r2, #2
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80069ae:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <xTaskIncrementTick+0x130>)
				xSwitchRequired = pdTRUE;
 80069b0:	bf28      	it	cs
 80069b2:	f04f 0b01 	movcs.w	fp, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	b90a      	cbnz	r2, 80069be <xTaskIncrementTick+0x72>
				vApplicationTickHook();
 80069ba:	f001 f901 	bl	8007bc0 <vApplicationTickHook>
		if( xYieldPending != pdFALSE )
 80069be:	4a30      	ldr	r2, [pc, #192]	@ (8006a80 <xTaskIncrementTick+0x134>)
 80069c0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80069c2:	2a00      	cmp	r2, #0
}
 80069c4:	bf0c      	ite	eq
 80069c6:	4658      	moveq	r0, fp
 80069c8:	2001      	movne	r0, #1
 80069ca:	b003      	add	sp, #12
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006a64 <xTaskIncrementTick+0x118>
					prvAddTaskToReadyList( pxTCB );
 80069d4:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 8006a84 <xTaskIncrementTick+0x138>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d8:	f8d9 2000 	ldr.w	r2, [r9]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	b91a      	cbnz	r2, 80069e8 <xTaskIncrementTick+0x9c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	602a      	str	r2, [r5, #0]
					break;
 80069e6:	e7dc      	b.n	80069a2 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069e8:	f8d9 2000 	ldr.w	r2, [r9]
 80069ec:	68d2      	ldr	r2, [r2, #12]
 80069ee:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80069f6:	428c      	cmp	r4, r1
 80069f8:	d201      	bcs.n	80069fe <xTaskIncrementTick+0xb2>
						xNextTaskUnblockTime = xItemValue;
 80069fa:	6029      	str	r1, [r5, #0]
						break;
 80069fc:	e7d1      	b.n	80069a2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fe:	f108 0304 	add.w	r3, r8, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	f7ff fa7d 	bl	8005f04 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a0a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8006a0e:	b119      	cbz	r1, 8006a18 <xTaskIncrementTick+0xcc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a10:	f108 0018 	add.w	r0, r8, #24
 8006a14:	f7ff fa76 	bl	8005f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a18:	2314      	movs	r3, #20
 8006a1a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8006a1e:	f8da 1000 	ldr.w	r1, [sl]
 8006a22:	4288      	cmp	r0, r1
 8006a24:	bf88      	it	hi
 8006a26:	f8ca 0000 	strhi.w	r0, [sl]
 8006a2a:	f108 0104 	add.w	r1, r8, #4
 8006a2e:	fb03 6000 	mla	r0, r3, r0, r6
 8006a32:	f7ff fa45 	bl	8005ec0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a36:	6838      	ldr	r0, [r7, #0]
 8006a38:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006a3c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	bf28      	it	cs
 8006a42:	f04f 0b01 	movcs.w	fp, #1
 8006a46:	e7c7      	b.n	80069d8 <xTaskIncrementTick+0x8c>
		++uxPendedTicks;
 8006a48:	4a0c      	ldr	r2, [pc, #48]	@ (8006a7c <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 8006a4a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 8006a54:	f001 f8b4 	bl	8007bc0 <vApplicationTickHook>
 8006a58:	e7b1      	b.n	80069be <xTaskIncrementTick+0x72>
 8006a5a:	bf00      	nop
 8006a5c:	2000131c 	.word	0x2000131c
 8006a60:	2000133c 	.word	0x2000133c
 8006a64:	20001370 	.word	0x20001370
 8006a68:	2000136c 	.word	0x2000136c
 8006a6c:	20001328 	.word	0x20001328
 8006a70:	20001320 	.word	0x20001320
 8006a74:	2000139c 	.word	0x2000139c
 8006a78:	200017fc 	.word	0x200017fc
 8006a7c:	20001330 	.word	0x20001330
 8006a80:	2000132c 	.word	0x2000132c
 8006a84:	20001338 	.word	0x20001338

08006a88 <xTaskResumeAll>:
{
 8006a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006a8c:	4c30      	ldr	r4, [pc, #192]	@ (8006b50 <xTaskResumeAll+0xc8>)
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	b943      	cbnz	r3, 8006aa4 <xTaskResumeAll+0x1c>
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	e7fe      	b.n	8006aa2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006aa4:	f000 fcbe 	bl	8007424 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aae:	6824      	ldr	r4, [r4, #0]
 8006ab0:	b12c      	cbz	r4, 8006abe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006ab2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ab4:	f000 fcd6 	bl	8007464 <vPortExitCritical>
}
 8006ab8:	4620      	mov	r0, r4
 8006aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006abe:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <xTaskResumeAll+0xcc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f5      	beq.n	8006ab2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac6:	4d24      	ldr	r5, [pc, #144]	@ (8006b58 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8006ac8:	4e24      	ldr	r6, [pc, #144]	@ (8006b5c <xTaskResumeAll+0xd4>)
 8006aca:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8006b60 <xTaskResumeAll+0xd8>
 8006ace:	e01d      	b.n	8006b0c <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ad0:	68eb      	ldr	r3, [r5, #12]
 8006ad2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad6:	f104 0018 	add.w	r0, r4, #24
 8006ada:	f7ff fa13 	bl	8005f04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7ff fa10 	bl	8005f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae4:	2014      	movs	r0, #20
 8006ae6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	fb00 8003 	mla	r0, r0, r3, r8
 8006aee:	4293      	cmp	r3, r2
 8006af0:	4639      	mov	r1, r7
 8006af2:	bf88      	it	hi
 8006af4:	6033      	strhi	r3, [r6, #0]
 8006af6:	f7ff f9e3 	bl	8005ec0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <xTaskResumeAll+0xdc>)
 8006afc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8006b06:	2201      	movs	r2, #1
 8006b08:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <xTaskResumeAll+0xe0>)
 8006b0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1de      	bne.n	8006ad0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006b12:	b10c      	cbz	r4, 8006b18 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8006b14:	f7ff fda4 	bl	8006660 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b18:	4d14      	ldr	r5, [pc, #80]	@ (8006b6c <xTaskResumeAll+0xe4>)
 8006b1a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b1c:	b144      	cbz	r4, 8006b30 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8006b1e:	2701      	movs	r7, #1
 8006b20:	4e11      	ldr	r6, [pc, #68]	@ (8006b68 <xTaskResumeAll+0xe0>)
							if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f7ff ff13 	bl	800694c <xTaskIncrementTick>
 8006b26:	b100      	cbz	r0, 8006b2a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006b28:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b2a:	3c01      	subs	r4, #1
 8006b2c:	d1f9      	bne.n	8006b22 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8006b2e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006b30:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <xTaskResumeAll+0xe0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0bc      	beq.n	8006ab2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006b38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006b4c:	2401      	movs	r4, #1
 8006b4e:	e7b1      	b.n	8006ab4 <xTaskResumeAll+0x2c>
 8006b50:	2000131c 	.word	0x2000131c
 8006b54:	20001340 	.word	0x20001340
 8006b58:	20001358 	.word	0x20001358
 8006b5c:	20001338 	.word	0x20001338
 8006b60:	2000139c 	.word	0x2000139c
 8006b64:	200017fc 	.word	0x200017fc
 8006b68:	2000132c 	.word	0x2000132c
 8006b6c:	20001330 	.word	0x20001330

08006b70 <vTaskSwitchContext>:
{
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b72:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf0 <vTaskSwitchContext+0x80>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf4 <vTaskSwitchContext+0x84>)
 8006b78:	b112      	cbz	r2, 8006b80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
}
 8006b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8006b80:	4c1d      	ldr	r4, [pc, #116]	@ (8006bf8 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8006b82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d804      	bhi.n	8006b9a <vTaskSwitchContext+0x2a>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	6821      	ldr	r1, [r4, #0]
 8006b94:	3134      	adds	r1, #52	@ 0x34
 8006b96:	f001 f81b 	bl	8007bd0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b9a:	2714      	movs	r7, #20
 8006b9c:	4e17      	ldr	r6, [pc, #92]	@ (8006bfc <vTaskSwitchContext+0x8c>)
 8006b9e:	4918      	ldr	r1, [pc, #96]	@ (8006c00 <vTaskSwitchContext+0x90>)
 8006ba0:	6832      	ldr	r2, [r6, #0]
 8006ba2:	fb07 f302 	mul.w	r3, r7, r2
 8006ba6:	58cd      	ldr	r5, [r1, r3]
 8006ba8:	18c8      	adds	r0, r1, r3
 8006baa:	b1a5      	cbz	r5, 8006bd6 <vTaskSwitchContext+0x66>
 8006bac:	6845      	ldr	r5, [r0, #4]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	686d      	ldr	r5, [r5, #4]
 8006bb2:	440b      	add	r3, r1
 8006bb4:	6045      	str	r5, [r0, #4]
 8006bb6:	429d      	cmp	r5, r3
 8006bb8:	bf04      	itt	eq
 8006bba:	686b      	ldreq	r3, [r5, #4]
 8006bbc:	6043      	streq	r3, [r0, #4]
 8006bbe:	2314      	movs	r3, #20
 8006bc0:	fb03 1102 	mla	r1, r3, r2, r1
 8006bc4:	684b      	ldr	r3, [r1, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	6032      	str	r2, [r6, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	4a0d      	ldr	r2, [pc, #52]	@ (8006c04 <vTaskSwitchContext+0x94>)
 8006bd0:	3358      	adds	r3, #88	@ 0x58
 8006bd2:	6013      	str	r3, [r2, #0]
}
 8006bd4:	e7d3      	b.n	8006b7e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bd6:	b942      	cbnz	r2, 8006bea <vTaskSwitchContext+0x7a>
 8006bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	e7fe      	b.n	8006be8 <vTaskSwitchContext+0x78>
 8006bea:	3a01      	subs	r2, #1
 8006bec:	e7d9      	b.n	8006ba2 <vTaskSwitchContext+0x32>
 8006bee:	bf00      	nop
 8006bf0:	2000131c 	.word	0x2000131c
 8006bf4:	2000132c 	.word	0x2000132c
 8006bf8:	200017fc 	.word	0x200017fc
 8006bfc:	20001338 	.word	0x20001338
 8006c00:	2000139c 	.word	0x2000139c
 8006c04:	20000024 	.word	0x20000024

08006c08 <vTaskSuspend>:
	{
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4d26      	ldr	r5, [pc, #152]	@ (8006ca8 <vTaskSuspend+0xa0>)
		taskENTER_CRITICAL();
 8006c0e:	f000 fc09 	bl	8007424 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c12:	b904      	cbnz	r4, 8006c16 <vTaskSuspend+0xe>
 8006c14:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c16:	1d26      	adds	r6, r4, #4
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff f973 	bl	8005f04 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c20:	b11b      	cbz	r3, 8006c2a <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c22:	f104 0018 	add.w	r0, r4, #24
 8006c26:	f7ff f96d 	bl	8005f04 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	481f      	ldr	r0, [pc, #124]	@ (8006cac <vTaskSuspend+0xa4>)
 8006c2e:	f7ff f947 	bl	8005ec0 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006c32:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
		if( xSchedulerRunning != pdFALSE )
 8006c36:	4e1e      	ldr	r6, [pc, #120]	@ (8006cb0 <vTaskSuspend+0xa8>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006c38:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c3a:	bf04      	itt	eq
 8006c3c:	2300      	moveq	r3, #0
 8006c3e:	f884 30a8 	strbeq.w	r3, [r4, #168]	@ 0xa8
		taskEXIT_CRITICAL();
 8006c42:	f000 fc0f 	bl	8007464 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8006c46:	6833      	ldr	r3, [r6, #0]
 8006c48:	b12b      	cbz	r3, 8006c56 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
 8006c4a:	f000 fbeb 	bl	8007424 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8006c4e:	f7ff fd07 	bl	8006660 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8006c52:	f000 fc07 	bl	8007464 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	d117      	bne.n	8006c8c <vTaskSuspend+0x84>
			if( xSchedulerRunning != pdFALSE )
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	b1b3      	cbz	r3, 8006c8e <vTaskSuspend+0x86>
				configASSERT( uxSchedulerSuspended == 0 );
 8006c60:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <vTaskSuspend+0xac>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b143      	cbz	r3, 8006c78 <vTaskSuspend+0x70>
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	e7fe      	b.n	8006c76 <vTaskSuspend+0x6e>
				portYIELD_WITHIN_API();
 8006c78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	f3bf 8f6f 	isb	sy
	}
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006c8e:	4a07      	ldr	r2, [pc, #28]	@ (8006cac <vTaskSuspend+0xa4>)
 8006c90:	6811      	ldr	r1, [r2, #0]
 8006c92:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <vTaskSuspend+0xb0>)
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	4291      	cmp	r1, r2
 8006c98:	d101      	bne.n	8006c9e <vTaskSuspend+0x96>
					pxCurrentTCB = NULL;
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	e7f6      	b.n	8006c8c <vTaskSuspend+0x84>
	}
 8006c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8006ca2:	f7ff bf65 	b.w	8006b70 <vTaskSwitchContext>
 8006ca6:	bf00      	nop
 8006ca8:	200017fc 	.word	0x200017fc
 8006cac:	20001344 	.word	0x20001344
 8006cb0:	20001334 	.word	0x20001334
 8006cb4:	2000131c 	.word	0x2000131c
 8006cb8:	20001340 	.word	0x20001340

08006cbc <vTaskPlaceOnEventList>:
{
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006cc0:	b940      	cbnz	r0, 8006cd4 <vTaskPlaceOnEventList+0x18>
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	e7fe      	b.n	8006cd2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cd4:	4b05      	ldr	r3, [pc, #20]	@ (8006cec <vTaskPlaceOnEventList+0x30>)
 8006cd6:	6819      	ldr	r1, [r3, #0]
 8006cd8:	3118      	adds	r1, #24
 8006cda:	f7ff f8fc 	bl	8005ed6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cde:	4620      	mov	r0, r4
}
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	f7ff bc7f 	b.w	80065e8 <prvAddCurrentTaskToDelayedList>
 8006cea:	bf00      	nop
 8006cec:	200017fc 	.word	0x200017fc

08006cf0 <vTaskPlaceOnEventListRestricted>:
	{
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006cf6:	b940      	cbnz	r0, 8006d0a <vTaskPlaceOnEventListRestricted+0x1a>
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	e7fe      	b.n	8006d08 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d0a:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <vTaskPlaceOnEventListRestricted+0x3c>)
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	3118      	adds	r1, #24
 8006d10:	f7ff f8d6 	bl	8005ec0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006d14:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d16:	4621      	mov	r1, r4
 8006d18:	bf08      	it	eq
 8006d1a:	4628      	moveq	r0, r5
	}
 8006d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d20:	bf18      	it	ne
 8006d22:	f04f 30ff 	movne.w	r0, #4294967295
 8006d26:	f7ff bc5f 	b.w	80065e8 <prvAddCurrentTaskToDelayedList>
 8006d2a:	bf00      	nop
 8006d2c:	200017fc 	.word	0x200017fc

08006d30 <xTaskRemoveFromEventList>:
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d32:	68c3      	ldr	r3, [r0, #12]
 8006d34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d36:	b944      	cbnz	r4, 8006d4a <xTaskRemoveFromEventList+0x1a>
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	e7fe      	b.n	8006d48 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d4a:	f104 0518 	add.w	r5, r4, #24
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7ff f8d8 	bl	8005f04 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	4b10      	ldr	r3, [pc, #64]	@ (8006d98 <xTaskRemoveFromEventList+0x68>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	b9db      	cbnz	r3, 8006d92 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d5a:	1d25      	adds	r5, r4, #4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff f8d1 	bl	8005f04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d62:	4a0e      	ldr	r2, [pc, #56]	@ (8006d9c <xTaskRemoveFromEventList+0x6c>)
 8006d64:	2014      	movs	r0, #20
 8006d66:	6811      	ldr	r1, [r2, #0]
 8006d68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006d6a:	428b      	cmp	r3, r1
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	bf88      	it	hi
 8006d70:	6013      	strhi	r3, [r2, #0]
 8006d72:	4a0b      	ldr	r2, [pc, #44]	@ (8006da0 <xTaskRemoveFromEventList+0x70>)
 8006d74:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d78:	f7ff f8a2 	bl	8005ec0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d7c:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <xTaskRemoveFromEventList+0x74>)
 8006d7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006d86:	bf85      	ittet	hi
 8006d88:	2001      	movhi	r0, #1
 8006d8a:	4b07      	ldrhi	r3, [pc, #28]	@ (8006da8 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8006d8c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8006d8e:	6018      	strhi	r0, [r3, #0]
}
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d92:	4629      	mov	r1, r5
 8006d94:	4805      	ldr	r0, [pc, #20]	@ (8006dac <xTaskRemoveFromEventList+0x7c>)
 8006d96:	e7ef      	b.n	8006d78 <xTaskRemoveFromEventList+0x48>
 8006d98:	2000131c 	.word	0x2000131c
 8006d9c:	20001338 	.word	0x20001338
 8006da0:	2000139c 	.word	0x2000139c
 8006da4:	200017fc 	.word	0x200017fc
 8006da8:	2000132c 	.word	0x2000132c
 8006dac:	20001358 	.word	0x20001358

08006db0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db0:	4b03      	ldr	r3, [pc, #12]	@ (8006dc0 <vTaskInternalSetTimeOutState+0x10>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db6:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <vTaskInternalSetTimeOutState+0x14>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6043      	str	r3, [r0, #4]
}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20001328 	.word	0x20001328
 8006dc4:	2000133c 	.word	0x2000133c

08006dc8 <xTaskCheckForTimeOut>:
{
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b940      	cbnz	r0, 8006de2 <xTaskCheckForTimeOut+0x1a>
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	e7fe      	b.n	8006de0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006de2:	b941      	cbnz	r1, 8006df6 <xTaskCheckForTimeOut+0x2e>
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	e7fe      	b.n	8006df4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006df6:	f000 fb15 	bl	8007424 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006e38 <xTaskCheckForTimeOut+0x70>)
 8006dfc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	d010      	beq.n	8006e26 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e04:	480d      	ldr	r0, [pc, #52]	@ (8006e3c <xTaskCheckForTimeOut+0x74>)
 8006e06:	682e      	ldr	r6, [r5, #0]
 8006e08:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e0a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e0c:	4286      	cmp	r6, r0
 8006e0e:	d001      	beq.n	8006e14 <xTaskCheckForTimeOut+0x4c>
 8006e10:	428a      	cmp	r2, r1
 8006e12:	d90f      	bls.n	8006e34 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e14:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e16:	4283      	cmp	r3, r0
 8006e18:	d90a      	bls.n	8006e30 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e1e:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8006e20:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e22:	f7ff ffc5 	bl	8006db0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006e26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e28:	f000 fb1c 	bl	8007464 <vPortExitCritical>
}
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e34:	2401      	movs	r4, #1
 8006e36:	e7f7      	b.n	8006e28 <xTaskCheckForTimeOut+0x60>
 8006e38:	2000133c 	.word	0x2000133c
 8006e3c:	20001328 	.word	0x20001328

08006e40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e40:	2201      	movs	r2, #1
 8006e42:	4b01      	ldr	r3, [pc, #4]	@ (8006e48 <vTaskMissedYield+0x8>)
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	4770      	bx	lr
 8006e48:	2000132c 	.word	0x2000132c

08006e4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <xTaskGetSchedulerState+0x18>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	b133      	cbz	r3, 8006e60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e52:	4b05      	ldr	r3, [pc, #20]	@ (8006e68 <xTaskGetSchedulerState+0x1c>)
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	fab0 f080 	clz	r0, r0
 8006e5a:	0940      	lsrs	r0, r0, #5
 8006e5c:	0040      	lsls	r0, r0, #1
 8006e5e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e60:	2001      	movs	r0, #1
	}
 8006e62:	4770      	bx	lr
 8006e64:	20001334 	.word	0x20001334
 8006e68:	2000131c 	.word	0x2000131c

08006e6c <xTaskPriorityDisinherit>:
	{
 8006e6c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8006e6e:	b908      	cbnz	r0, 8006e74 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8006e70:	2000      	movs	r0, #0
	}
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006e74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee4 <xTaskPriorityDisinherit+0x78>)
 8006e76:	681c      	ldr	r4, [r3, #0]
 8006e78:	4284      	cmp	r4, r0
 8006e7a:	d008      	beq.n	8006e8e <xTaskPriorityDisinherit+0x22>
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	e7fe      	b.n	8006e8c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006e90:	b943      	cbnz	r3, 8006ea4 <xTaskPriorityDisinherit+0x38>
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ea4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ea6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
			( pxTCB->uxMutexesHeld )--;
 8006ea8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eaa:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006eac:	6563      	str	r3, [r4, #84]	@ 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eae:	d0df      	beq.n	8006e70 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1dd      	bne.n	8006e70 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb4:	1d25      	adds	r5, r4, #4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7ff f824 	bl	8005f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ebc:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ebe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ec4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ec6:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006eca:	6811      	ldr	r1, [r2, #0]
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf88      	it	hi
 8006ed0:	6013      	strhi	r3, [r2, #0]
 8006ed2:	4a06      	ldr	r2, [pc, #24]	@ (8006eec <xTaskPriorityDisinherit+0x80>)
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	fb00 2003 	mla	r0, r0, r3, r2
 8006eda:	f7fe fff1 	bl	8005ec0 <vListInsertEnd>
					xReturn = pdTRUE;
 8006ede:	2001      	movs	r0, #1
		return xReturn;
 8006ee0:	e7c7      	b.n	8006e72 <xTaskPriorityDisinherit+0x6>
 8006ee2:	bf00      	nop
 8006ee4:	200017fc 	.word	0x200017fc
 8006ee8:	20001338 	.word	0x20001338
 8006eec:	2000139c 	.word	0x2000139c

08006ef0 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8006ef0:	4291      	cmp	r1, r2
{
 8006ef2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ef4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ef6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006ef8:	d80a      	bhi.n	8006f10 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	6983      	ldr	r3, [r0, #24]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d20d      	bcs.n	8006f1e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <prvInsertTimerInActiveList+0x34>)
 8006f04:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	f7fe ffe5 	bl	8005ed6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006f0c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8006f0e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d201      	bcs.n	8006f18 <prvInsertTimerInActiveList+0x28>
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d202      	bcs.n	8006f1e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f18:	4b03      	ldr	r3, [pc, #12]	@ (8006f28 <prvInsertTimerInActiveList+0x38>)
 8006f1a:	1d01      	adds	r1, r0, #4
 8006f1c:	e7f3      	b.n	8006f06 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8006f1e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006f20:	e7f5      	b.n	8006f0e <prvInsertTimerInActiveList+0x1e>
 8006f22:	bf00      	nop
 8006f24:	200018d4 	.word	0x200018d4
 8006f28:	200018d8 	.word	0x200018d8

08006f2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006f2e:	4c0f      	ldr	r4, [pc, #60]	@ (8006f6c <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8006f30:	f000 fa78 	bl	8007424 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006f34:	6825      	ldr	r5, [r4, #0]
 8006f36:	b99d      	cbnz	r5, 8006f60 <prvCheckForValidListAndQueue+0x34>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f38:	4f0d      	ldr	r7, [pc, #52]	@ (8006f70 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 8006f3a:	4e0e      	ldr	r6, [pc, #56]	@ (8006f74 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7fe ffb1 	bl	8005ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7fe ffae 	bl	8005ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <prvCheckForValidListAndQueue+0x4c>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f4a:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8006f4c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f50:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006f52:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f54:	4a0a      	ldr	r2, [pc, #40]	@ (8006f80 <prvCheckForValidListAndQueue+0x54>)
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <prvCheckForValidListAndQueue+0x58>)
 8006f58:	9500      	str	r5, [sp, #0]
 8006f5a:	f7ff f8ae 	bl	80060ba <xQueueGenericCreateStatic>
 8006f5e:	6020      	str	r0, [r4, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8006f60:	b003      	add	sp, #12
 8006f62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006f66:	f000 ba7d 	b.w	8007464 <vPortExitCritical>
 8006f6a:	bf00      	nop
 8006f6c:	200018d0 	.word	0x200018d0
 8006f70:	200018f0 	.word	0x200018f0
 8006f74:	200018dc 	.word	0x200018dc
 8006f78:	200018d8 	.word	0x200018d8
 8006f7c:	200018d4 	.word	0x200018d4
 8006f80:	20001850 	.word	0x20001850
 8006f84:	20001800 	.word	0x20001800

08006f88 <xTimerCreateTimerTask>:
{
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006f8c:	f7ff ffce 	bl	8006f2c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006f90:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <xTimerCreateTimerTask+0x54>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	b1b3      	cbz	r3, 8006fc4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f96:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f98:	aa07      	add	r2, sp, #28
 8006f9a:	a906      	add	r1, sp, #24
 8006f9c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f9e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fa2:	f7fe ff73 	bl	8005e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fa6:	9b05      	ldr	r3, [sp, #20]
 8006fa8:	9a07      	ldr	r2, [sp, #28]
 8006faa:	9302      	str	r3, [sp, #8]
 8006fac:	9b06      	ldr	r3, [sp, #24]
 8006fae:	490c      	ldr	r1, [pc, #48]	@ (8006fe0 <xTimerCreateTimerTask+0x58>)
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	2335      	movs	r3, #53	@ 0x35
 8006fb4:	480b      	ldr	r0, [pc, #44]	@ (8006fe4 <xTimerCreateTimerTask+0x5c>)
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f7ff fbb9 	bl	8006730 <xTaskCreateStatic>
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe8 <xTimerCreateTimerTask+0x60>)
 8006fc0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006fc2:	b940      	cbnz	r0, 8006fd6 <xTimerCreateTimerTask+0x4e>
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006fd4:	e7fe      	b.n	8006fd4 <xTimerCreateTimerTask+0x4c>
}
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	b008      	add	sp, #32
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	200018d0 	.word	0x200018d0
 8006fe0:	08008611 	.word	0x08008611
 8006fe4:	080071a9 	.word	0x080071a9
 8006fe8:	200018cc 	.word	0x200018cc

08006fec <xTimerCreate>:
	{
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006ff2:	2030      	movs	r0, #48	@ 0x30
	{
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	4617      	mov	r7, r2
 8006ff8:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006ffa:	f000 fb3f 	bl	800767c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006ffe:	4604      	mov	r4, r0
 8007000:	b1c0      	cbz	r0, 8007034 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007002:	b945      	cbnz	r5, 8007016 <xTimerCreate+0x2a>
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	e7fe      	b.n	8007014 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8007016:	f7ff ff89 	bl	8006f2c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800701a:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800701c:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007020:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8007022:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8007026:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007028:	1d20      	adds	r0, r4, #4
 800702a:	f7fe ff46 	bl	8005eba <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	}
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800703a <xTimerCreateStatic>:
	{
 800703a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800703e:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007040:	2330      	movs	r3, #48	@ 0x30
 8007042:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007044:	9b01      	ldr	r3, [sp, #4]
	{
 8007046:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8007048:	2b30      	cmp	r3, #48	@ 0x30
	{
 800704a:	460d      	mov	r5, r1
 800704c:	4617      	mov	r7, r2
 800704e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8007050:	d008      	beq.n	8007064 <xTimerCreateStatic+0x2a>
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	e7fe      	b.n	8007062 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8007064:	b944      	cbnz	r4, 8007078 <xTimerCreateStatic+0x3e>
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	e7fe      	b.n	8007076 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007078:	b941      	cbnz	r1, 800708c <xTimerCreateStatic+0x52>
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	e7fe      	b.n	800708a <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 800708c:	f7ff ff4e 	bl	8006f2c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007090:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007092:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007094:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007096:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800709a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800709e:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80070a0:	f7fe ff0b 	bl	8005eba <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80070a4:	2301      	movs	r3, #1
	}
 80070a6:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80070a8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	}
 80070ac:	b002      	add	sp, #8
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080070b4 <xTimerGenericCommand>:
{
 80070b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80070b6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80070b8:	4604      	mov	r4, r0
{
 80070ba:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80070bc:	b940      	cbnz	r0, 80070d0 <xTimerGenericCommand+0x1c>
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	e7fe      	b.n	80070ce <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80070d0:	4d0c      	ldr	r5, [pc, #48]	@ (8007104 <xTimerGenericCommand+0x50>)
 80070d2:	6828      	ldr	r0, [r5, #0]
 80070d4:	b178      	cbz	r0, 80070f6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070d6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070d8:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80070dc:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070de:	dc0c      	bgt.n	80070fa <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070e0:	f7ff feb4 	bl	8006e4c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070e4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070e6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070e8:	bf14      	ite	ne
 80070ea:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070ec:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ee:	6828      	ldr	r0, [r5, #0]
 80070f0:	a901      	add	r1, sp, #4
 80070f2:	f7ff f82f 	bl	8006154 <xQueueGenericSend>
}
 80070f6:	b004      	add	sp, #16
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070fa:	2300      	movs	r3, #0
 80070fc:	a901      	add	r1, sp, #4
 80070fe:	f7ff f8db 	bl	80062b8 <xQueueGenericSendFromISR>
 8007102:	e7f8      	b.n	80070f6 <xTimerGenericCommand+0x42>
 8007104:	200018d0 	.word	0x200018d0

08007108 <prvSampleTimeNow>:
{
 8007108:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800710e:	f7ff fc17 	bl	8006940 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007112:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800719c <prvSampleTimeNow+0x94>
	xTimeNow = xTaskGetTickCount();
 8007116:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8007118:	f8d8 3000 	ldr.w	r3, [r8]
 800711c:	4283      	cmp	r3, r0
 800711e:	d909      	bls.n	8007134 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007120:	4f1f      	ldr	r7, [pc, #124]	@ (80071a0 <prvSampleTimeNow+0x98>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	b96a      	cbnz	r2, 8007144 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <prvSampleTimeNow+0x9c>)
 800712a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800712c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800712e:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <prvSampleTimeNow+0x2e>
 8007134:	2300      	movs	r3, #0
}
 8007136:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8007138:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800713a:	f8c8 5000 	str.w	r5, [r8]
}
 800713e:	b002      	add	sp, #8
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007144:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007146:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007148:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800714c:	f104 0a04 	add.w	sl, r4, #4
 8007150:	4650      	mov	r0, sl
 8007152:	f7fe fed7 	bl	8005f04 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007158:	4620      	mov	r0, r4
 800715a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800715c:	69e3      	ldr	r3, [r4, #28]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d1df      	bne.n	8007122 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8007166:	4599      	cmp	r9, r3
 8007168:	d206      	bcs.n	8007178 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800716a:	4651      	mov	r1, sl
 800716c:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800716e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007170:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007172:	f7fe feb0 	bl	8005ed6 <vListInsert>
 8007176:	e7d4      	b.n	8007122 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007178:	2300      	movs	r3, #0
 800717a:	464a      	mov	r2, r9
 800717c:	4619      	mov	r1, r3
 800717e:	4620      	mov	r0, r4
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	f7ff ff97 	bl	80070b4 <xTimerGenericCommand>
				configASSERT( xResult );
 8007186:	2800      	cmp	r0, #0
 8007188:	d1cb      	bne.n	8007122 <prvSampleTimeNow+0x1a>
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	e7fe      	b.n	800719a <prvSampleTimeNow+0x92>
 800719c:	200018c8 	.word	0x200018c8
 80071a0:	200018d8 	.word	0x200018d8
 80071a4:	200018d4 	.word	0x200018d4

080071a8 <prvTimerTask>:
{
 80071a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071ac:	4e64      	ldr	r6, [pc, #400]	@ (8007340 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071ae:	4f65      	ldr	r7, [pc, #404]	@ (8007344 <prvTimerTask+0x19c>)
{
 80071b0:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b2:	6833      	ldr	r3, [r6, #0]
 80071b4:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	d033      	beq.n	8007222 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80071c0:	f7ff fbb6 	bl	8006930 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071c4:	a803      	add	r0, sp, #12
 80071c6:	f7ff ff9f 	bl	8007108 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80071ca:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071cc:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80071ce:	2c00      	cmp	r4, #0
 80071d0:	d175      	bne.n	80072be <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	d058      	beq.n	8007288 <prvTimerTask+0xe0>
 80071d6:	4540      	cmp	r0, r8
 80071d8:	d35c      	bcc.n	8007294 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 80071da:	f7ff fc55 	bl	8006a88 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071de:	6833      	ldr	r3, [r6, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e4:	1d28      	adds	r0, r5, #4
 80071e6:	f7fe fe8d 	bl	8005f04 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071ea:	69eb      	ldr	r3, [r5, #28]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d11a      	bne.n	8007226 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071f0:	69a9      	ldr	r1, [r5, #24]
 80071f2:	4643      	mov	r3, r8
 80071f4:	464a      	mov	r2, r9
 80071f6:	4628      	mov	r0, r5
 80071f8:	4441      	add	r1, r8
 80071fa:	f7ff fe79 	bl	8006ef0 <prvInsertTimerInActiveList>
 80071fe:	b190      	cbz	r0, 8007226 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007200:	4623      	mov	r3, r4
 8007202:	4642      	mov	r2, r8
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	9400      	str	r4, [sp, #0]
 800720a:	f7ff ff53 	bl	80070b4 <xTimerGenericCommand>
			configASSERT( xResult );
 800720e:	b950      	cbnz	r0, 8007226 <prvTimerTask+0x7e>
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	e7fe      	b.n	8007220 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8007222:	46a8      	mov	r8, r5
 8007224:	e7cc      	b.n	80071c0 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007226:	4628      	mov	r0, r5
 8007228:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800722a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800722c:	2200      	movs	r2, #0
 800722e:	6838      	ldr	r0, [r7, #0]
 8007230:	a903      	add	r1, sp, #12
 8007232:	f7ff f89d 	bl	8006370 <xQueueReceive>
 8007236:	2800      	cmp	r0, #0
 8007238:	d0bb      	beq.n	80071b2 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dbf5      	blt.n	800722c <prvTimerTask+0x84>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007240:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007242:	6963      	ldr	r3, [r4, #20]
 8007244:	b113      	cbz	r3, 800724c <prvTimerTask+0xa4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007246:	1d20      	adds	r0, r4, #4
 8007248:	f7fe fe5c 	bl	8005f04 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800724c:	a802      	add	r0, sp, #8
 800724e:	f7ff ff5b 	bl	8007108 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007252:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007254:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007256:	2b09      	cmp	r3, #9
 8007258:	d8e8      	bhi.n	800722c <prvTimerTask+0x84>
 800725a:	a101      	add	r1, pc, #4	@ (adr r1, 8007260 <prvTimerTask+0xb8>)
 800725c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007260:	080072c5 	.word	0x080072c5
 8007264:	080072c5 	.word	0x080072c5
 8007268:	080072c5 	.word	0x080072c5
 800726c:	0800722d 	.word	0x0800722d
 8007270:	08007309 	.word	0x08007309
 8007274:	0800732d 	.word	0x0800732d
 8007278:	080072c5 	.word	0x080072c5
 800727c:	080072c5 	.word	0x080072c5
 8007280:	0800722d 	.word	0x0800722d
 8007284:	08007309 	.word	0x08007309
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007288:	4b2f      	ldr	r3, [pc, #188]	@ (8007348 <prvTimerTask+0x1a0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681c      	ldr	r4, [r3, #0]
 800728e:	fab4 f484 	clz	r4, r4
 8007292:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007294:	4622      	mov	r2, r4
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	eba8 0109 	sub.w	r1, r8, r9
 800729c:	f7ff f906 	bl	80064ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072a0:	f7ff fbf2 	bl	8006a88 <xTaskResumeAll>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d1c1      	bne.n	800722c <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 80072a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	e7b6      	b.n	800722c <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 80072be:	f7ff fbe3 	bl	8006a88 <xTaskResumeAll>
}
 80072c2:	e7b3      	b.n	800722c <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072c4:	69a1      	ldr	r1, [r4, #24]
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	4620      	mov	r0, r4
 80072ca:	4419      	add	r1, r3
 80072cc:	f7ff fe10 	bl	8006ef0 <prvInsertTimerInActiveList>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d0ab      	beq.n	800722c <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072d6:	4620      	mov	r0, r4
 80072d8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072da:	69e3      	ldr	r3, [r4, #28]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d1a5      	bne.n	800722c <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072e0:	2300      	movs	r3, #0
 80072e2:	69a2      	ldr	r2, [r4, #24]
 80072e4:	9904      	ldr	r1, [sp, #16]
 80072e6:	4620      	mov	r0, r4
 80072e8:	440a      	add	r2, r1
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f7ff fee1 	bl	80070b4 <xTimerGenericCommand>
							configASSERT( xResult );
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d19a      	bne.n	800722c <prvTimerTask+0x84>
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	e7fe      	b.n	8007306 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007308:	9904      	ldr	r1, [sp, #16]
 800730a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800730c:	b941      	cbnz	r1, 8007320 <prvTimerTask+0x178>
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	e7fe      	b.n	800731e <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007320:	4603      	mov	r3, r0
 8007322:	4401      	add	r1, r0
 8007324:	4620      	mov	r0, r4
 8007326:	f7ff fde3 	bl	8006ef0 <prvInsertTimerInActiveList>
					break;
 800732a:	e77f      	b.n	800722c <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800732c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f af7b 	bne.w	800722c <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fa32 	bl	80077a0 <vPortFree>
 800733c:	e776      	b.n	800722c <prvTimerTask+0x84>
 800733e:	bf00      	nop
 8007340:	200018d8 	.word	0x200018d8
 8007344:	200018d0 	.word	0x200018d0
 8007348:	200018d4 	.word	0x200018d4

0800734c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800734c:	b510      	push	{r4, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800734e:	4604      	mov	r4, r0
 8007350:	b940      	cbnz	r0, 8007364 <pvTimerGetTimerID+0x18>
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	e7fe      	b.n	8007362 <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 8007364:	f000 f85e 	bl	8007424 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007368:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800736a:	f000 f87b 	bl	8007464 <vPortExitCritical>

	return pvReturn;
}
 800736e:	4620      	mov	r0, r4
 8007370:	bd10      	pop	{r4, pc}
	...

08007374 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007374:	4806      	ldr	r0, [pc, #24]	@ (8007390 <prvPortStartFirstTask+0x1c>)
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	6800      	ldr	r0, [r0, #0]
 800737a:	f380 8808 	msr	MSP, r0
 800737e:	b662      	cpsie	i
 8007380:	b661      	cpsie	f
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	df00      	svc	0
 800738c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800738e:	0000      	.short	0x0000
 8007390:	e000ed08 	.word	0xe000ed08

08007394 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8007394:	2300      	movs	r3, #0
{
 8007396:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007398:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <prvTaskExitError+0x3c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	d008      	beq.n	80073b4 <prvTaskExitError+0x20>
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	e7fe      	b.n	80073b2 <prvTaskExitError+0x1e>
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0fc      	beq.n	80073c4 <prvTaskExitError+0x30>
}
 80073ca:	b002      	add	sp, #8
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	2000001c 	.word	0x2000001c

080073d4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073dc:	4b05      	ldr	r3, [pc, #20]	@ (80073f4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073de:	f021 0101 	bic.w	r1, r1, #1
 80073e2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073ea:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80073ee:	3840      	subs	r0, #64	@ 0x40
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	08007395 	.word	0x08007395
	...

08007400 <SVC_Handler>:
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	f04e 0e0d 	orr.w	lr, lr, #13
 800741e:	4770      	bx	lr

08007420 <pxCurrentTCBConst2>:
 8007420:	200017fc 	.word	0x200017fc

08007424 <vPortEnterCritical>:
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007434:	4a0a      	ldr	r2, [pc, #40]	@ (8007460 <vPortEnterCritical+0x3c>)
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800743a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800743c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800743e:	d10e      	bne.n	800745e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007440:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007444:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007448:	b2db      	uxtb	r3, r3
 800744a:	b143      	cbz	r3, 800745e <vPortEnterCritical+0x3a>
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	e7fe      	b.n	800745c <vPortEnterCritical+0x38>
	}
}
 800745e:	4770      	bx	lr
 8007460:	2000001c 	.word	0x2000001c

08007464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007464:	4a08      	ldr	r2, [pc, #32]	@ (8007488 <vPortExitCritical+0x24>)
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	b943      	cbnz	r3, 800747c <vPortExitCritical+0x18>
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	e7fe      	b.n	800747a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800747c:	3b01      	subs	r3, #1
 800747e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007480:	b90b      	cbnz	r3, 8007486 <vPortExitCritical+0x22>
	__asm volatile
 8007482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	4770      	bx	lr
 8007488:	2000001c 	.word	0x2000001c
 800748c:	00000000 	.word	0x00000000

08007490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007490:	f3ef 8009 	mrs	r0, PSP
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <pxCurrentTCBConst>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074a0:	6010      	str	r0, [r2, #0]
 80074a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80074a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074aa:	f380 8811 	msr	BASEPRI, r0
 80074ae:	f7ff fb5f 	bl	8006b70 <vTaskSwitchContext>
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6808      	ldr	r0, [r1, #0]
 80074c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074c6:	f380 8809 	msr	PSP, r0
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	4770      	bx	lr

080074d0 <pxCurrentTCBConst>:
 80074d0:	200017fc 	.word	0x200017fc

080074d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074d4:	b508      	push	{r3, lr}
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074e6:	f7ff fa31 	bl	800694c <xTaskIncrementTick>
 80074ea:	b128      	cbz	r0, 80074f8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80074f8:	2300      	movs	r3, #0
 80074fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80074fe:	bd08      	pop	{r3, pc}

08007500 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007500:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007504:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007506:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800750a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800750c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800750e:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <vPortSetupTimerInterrupt+0x20>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	fbb3 f3f1 	udiv	r3, r3, r1
 8007516:	3b01      	subs	r3, #1
 8007518:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800751a:	2307      	movs	r3, #7
 800751c:	6113      	str	r3, [r2, #16]
}
 800751e:	4770      	bx	lr
 8007520:	20000020 	.word	0x20000020

08007524 <xPortStartScheduler>:
{
 8007524:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007526:	4b27      	ldr	r3, [pc, #156]	@ (80075c4 <xPortStartScheduler+0xa0>)
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800752e:	22ff      	movs	r2, #255	@ 0xff
 8007530:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007532:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007534:	4a24      	ldr	r2, [pc, #144]	@ (80075c8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800753c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007540:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007544:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007546:	2307      	movs	r3, #7
 8007548:	4a20      	ldr	r2, [pc, #128]	@ (80075cc <xPortStartScheduler+0xa8>)
 800754a:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800754c:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8007550:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007552:	0609      	lsls	r1, r1, #24
 8007554:	d40a      	bmi.n	800756c <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007556:	2b03      	cmp	r3, #3
 8007558:	d011      	beq.n	800757e <xPortStartScheduler+0x5a>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	e7fe      	b.n	800756a <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 800756c:	3b01      	subs	r3, #1
 800756e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007570:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f88d 3003 	strb.w	r3, [sp, #3]
 800757c:	e7e6      	b.n	800754c <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800757e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007582:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	4a0f      	ldr	r2, [pc, #60]	@ (80075c4 <xPortStartScheduler+0xa0>)
 8007588:	b2db      	uxtb	r3, r3
 800758a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800758c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8007590:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007592:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8007596:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800759a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800759e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80075a2:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 80075a6:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80075aa:	f7ff ffa9 	bl	8007500 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80075ae:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <xPortStartScheduler+0xac>)
 80075b0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80075b2:	f7ff fedf 	bl	8007374 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80075b6:	f7ff fadb 	bl	8006b70 <vTaskSwitchContext>
}
 80075ba:	4620      	mov	r0, r4
	prvTaskExitError();
 80075bc:	f7ff feea 	bl	8007394 <prvTaskExitError>
}
 80075c0:	b002      	add	sp, #8
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	e000e400 	.word	0xe000e400
 80075c8:	20001908 	.word	0x20001908
 80075cc:	20001904 	.word	0x20001904
 80075d0:	2000001c 	.word	0x2000001c

080075d4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075d4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d8:	2b0f      	cmp	r3, #15
 80075da:	d90e      	bls.n	80075fa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075dc:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <vPortValidateInterruptPriority+0x50>)
 80075de:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e0:	4a11      	ldr	r2, [pc, #68]	@ (8007628 <vPortValidateInterruptPriority+0x54>)
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d908      	bls.n	80075fa <vPortValidateInterruptPriority+0x26>
 80075e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	e7fe      	b.n	80075f8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075fe:	4a0b      	ldr	r2, [pc, #44]	@ (800762c <vPortValidateInterruptPriority+0x58>)
 8007600:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800760a:	4293      	cmp	r3, r2
 800760c:	d908      	bls.n	8007620 <vPortValidateInterruptPriority+0x4c>
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	e7fe      	b.n	800761e <vPortValidateInterruptPriority+0x4a>
	}
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	e000e3f0 	.word	0xe000e3f0
 8007628:	20001908 	.word	0x20001908
 800762c:	20001904 	.word	0x20001904

08007630 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007630:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <prvInsertBlockIntoFreeList+0x44>)
 8007634:	461a      	mov	r2, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4283      	cmp	r3, r0
 800763a:	d3fb      	bcc.n	8007634 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800763c:	6854      	ldr	r4, [r2, #4]
 800763e:	1911      	adds	r1, r2, r4
 8007640:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007642:	bf01      	itttt	eq
 8007644:	6841      	ldreq	r1, [r0, #4]
 8007646:	4610      	moveq	r0, r2
 8007648:	1909      	addeq	r1, r1, r4
 800764a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800764c:	6844      	ldr	r4, [r0, #4]
 800764e:	1901      	adds	r1, r0, r4
 8007650:	428b      	cmp	r3, r1
 8007652:	d10d      	bne.n	8007670 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007654:	4908      	ldr	r1, [pc, #32]	@ (8007678 <prvInsertBlockIntoFreeList+0x48>)
 8007656:	6809      	ldr	r1, [r1, #0]
 8007658:	428b      	cmp	r3, r1
 800765a:	d004      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4423      	add	r3, r4
 8007660:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007666:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007668:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800766a:	bf18      	it	ne
 800766c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800766e:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007670:	4619      	mov	r1, r3
 8007672:	e7f8      	b.n	8007666 <prvInsertBlockIntoFreeList+0x36>
 8007674:	2000191c 	.word	0x2000191c
 8007678:	20001918 	.word	0x20001918

0800767c <pvPortMalloc>:
{
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007682:	f7ff f955 	bl	8006930 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007686:	4940      	ldr	r1, [pc, #256]	@ (8007788 <pvPortMalloc+0x10c>)
 8007688:	4d40      	ldr	r5, [pc, #256]	@ (800778c <pvPortMalloc+0x110>)
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	bb0b      	cbnz	r3, 80076d2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800768e:	4a40      	ldr	r2, [pc, #256]	@ (8007790 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007690:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007692:	bf1f      	itttt	ne
 8007694:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007696:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800769a:	f502 7200 	addne.w	r2, r2, #512	@ 0x200
 800769e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076a0:	bf0c      	ite	eq
 80076a2:	f44f 7300 	moveq.w	r3, #512	@ 0x200
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a6:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 80076a8:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076aa:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076ac:	4e39      	ldr	r6, [pc, #228]	@ (8007794 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 80076ae:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80076b4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076b6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80076b8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076bc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076be:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80076c2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c4:	4b34      	ldr	r3, [pc, #208]	@ (8007798 <pvPortMalloc+0x11c>)
 80076c6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c8:	4b34      	ldr	r3, [pc, #208]	@ (800779c <pvPortMalloc+0x120>)
 80076ca:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076d0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076d2:	682f      	ldr	r7, [r5, #0]
 80076d4:	4227      	tst	r7, r4
 80076d6:	d007      	beq.n	80076e8 <pvPortMalloc+0x6c>
	( void ) xTaskResumeAll();
 80076d8:	f7ff f9d6 	bl	8006a88 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80076dc:	2600      	movs	r6, #0
 80076de:	f000 fa7b 	bl	8007bd8 <vApplicationMallocFailedHook>
}
 80076e2:	4630      	mov	r0, r6
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xWantedSize > 0 )
 80076e8:	2c00      	cmp	r4, #0
 80076ea:	d0f5      	beq.n	80076d8 <pvPortMalloc+0x5c>
				xWantedSize += xHeapStructSize;
 80076ec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076f0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076f2:	bf1c      	itt	ne
 80076f4:	f023 0307 	bicne.w	r3, r3, #7
 80076f8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0ec      	beq.n	80076d8 <pvPortMalloc+0x5c>
 80076fe:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 800779c <pvPortMalloc+0x120>
 8007702:	f8d8 5000 	ldr.w	r5, [r8]
 8007706:	429d      	cmp	r5, r3
 8007708:	d3e6      	bcc.n	80076d8 <pvPortMalloc+0x5c>
				pxBlock = xStart.pxNextFreeBlock;
 800770a:	4a22      	ldr	r2, [pc, #136]	@ (8007794 <pvPortMalloc+0x118>)
 800770c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	6860      	ldr	r0, [r4, #4]
 8007710:	4298      	cmp	r0, r3
 8007712:	d201      	bcs.n	8007718 <pvPortMalloc+0x9c>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	b9b0      	cbnz	r0, 8007746 <pvPortMalloc+0xca>
				if( pxBlock != pxEnd )
 8007718:	6809      	ldr	r1, [r1, #0]
 800771a:	42a1      	cmp	r1, r4
 800771c:	d0dc      	beq.n	80076d8 <pvPortMalloc+0x5c>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800771e:	6821      	ldr	r1, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007720:	6816      	ldr	r6, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007722:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007724:	6862      	ldr	r2, [r4, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007726:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007728:	1ad2      	subs	r2, r2, r3
 800772a:	2a10      	cmp	r2, #16
 800772c:	d912      	bls.n	8007754 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800772e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007730:	0741      	lsls	r1, r0, #29
 8007732:	d00b      	beq.n	800774c <pvPortMalloc+0xd0>
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	e7fe      	b.n	8007744 <pvPortMalloc+0xc8>
 8007746:	4622      	mov	r2, r4
 8007748:	4604      	mov	r4, r0
 800774a:	e7e0      	b.n	800770e <pvPortMalloc+0x92>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800774c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800774e:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007750:	f7ff ff6e 	bl	8007630 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 8007754:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007756:	4910      	ldr	r1, [pc, #64]	@ (8007798 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007758:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800775a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800775c:	1aad      	subs	r5, r5, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800775e:	4317      	orrs	r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007760:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8007762:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007764:	6067      	str	r7, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007766:	bf38      	it	cc
 8007768:	600d      	strcc	r5, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800776a:	f8c8 5000 	str.w	r5, [r8]
	( void ) xTaskResumeAll();
 800776e:	f7ff f98b 	bl	8006a88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007772:	0773      	lsls	r3, r6, #29
 8007774:	d0b5      	beq.n	80076e2 <pvPortMalloc+0x66>
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	e7fe      	b.n	8007786 <pvPortMalloc+0x10a>
 8007788:	20001918 	.word	0x20001918
 800778c:	2000190c 	.word	0x2000190c
 8007790:	20001924 	.word	0x20001924
 8007794:	2000191c 	.word	0x2000191c
 8007798:	20001910 	.word	0x20001910
 800779c:	20001914 	.word	0x20001914

080077a0 <vPortFree>:
{
 80077a0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80077a2:	4604      	mov	r4, r0
 80077a4:	b370      	cbz	r0, 8007804 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a6:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <vPortFree+0x68>)
 80077a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	4213      	tst	r3, r2
 80077b0:	d108      	bne.n	80077c4 <vPortFree+0x24>
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	e7fe      	b.n	80077c2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077c4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80077c8:	b141      	cbz	r1, 80077dc <vPortFree+0x3c>
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	e7fe      	b.n	80077da <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077dc:	ea23 0302 	bic.w	r3, r3, r2
 80077e0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80077e4:	f7ff f8a4 	bl	8006930 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077e8:	4a08      	ldr	r2, [pc, #32]	@ (800780c <vPortFree+0x6c>)
 80077ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80077ee:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077f0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077f4:	440b      	add	r3, r1
 80077f6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077f8:	f7ff ff1a 	bl	8007630 <prvInsertBlockIntoFreeList>
}
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007800:	f7ff b942 	b.w	8006a88 <xTaskResumeAll>
}
 8007804:	bd10      	pop	{r4, pc}
 8007806:	bf00      	nop
 8007808:	2000190c 	.word	0x2000190c
 800780c:	20001914 	.word	0x20001914

08007810 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007810:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007812:	4828      	ldr	r0, [pc, #160]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 8007814:	4a28      	ldr	r2, [pc, #160]	@ (80078b8 <MX_ADC1_Init+0xa8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8007816:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 8007818:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800781a:	f44f 7280 	mov.w	r2, #256	@ 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800781e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8007822:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007824:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007826:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007828:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800782c:	7503      	strb	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800782e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 8007830:	2305      	movs	r3, #5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007832:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 5;
 8007834:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007836:	f7fc f895 	bl	8003964 <HAL_ADC_Init>
 800783a:	b108      	cbz	r0, 8007840 <MX_ADC1_Init+0x30>
  {
    Error_Handler();
 800783c:	f000 fcbc 	bl	80081b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007840:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007842:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8007846:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007848:	481a      	ldr	r0, [pc, #104]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 800784a:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800784c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800784e:	f7fb ff15 	bl	800367c <HAL_ADC_ConfigChannel>
 8007852:	b108      	cbz	r0, 8007858 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 8007854:	f000 fcb0 	bl	80081b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007858:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800785a:	4816      	ldr	r0, [pc, #88]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 800785c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800785e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007862:	f7fb ff0b 	bl	800367c <HAL_ADC_ConfigChannel>
 8007866:	b108      	cbz	r0, 800786c <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8007868:	f000 fca6 	bl	80081b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800786c:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800786e:	4811      	ldr	r0, [pc, #68]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 8007870:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007872:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007876:	f7fb ff01 	bl	800367c <HAL_ADC_ConfigChannel>
 800787a:	b108      	cbz	r0, 8007880 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800787c:	f000 fc9c 	bl	80081b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007880:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007882:	480c      	ldr	r0, [pc, #48]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 8007884:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007888:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800788c:	f7fb fef6 	bl	800367c <HAL_ADC_ConfigChannel>
 8007890:	b108      	cbz	r0, 8007896 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8007892:	f000 fc91 	bl	80081b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007896:	2211      	movs	r2, #17
 8007898:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800789a:	4806      	ldr	r0, [pc, #24]	@ (80078b4 <MX_ADC1_Init+0xa4>)
 800789c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800789e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80078a2:	f7fb feeb 	bl	800367c <HAL_ADC_ConfigChannel>
 80078a6:	b108      	cbz	r0, 80078ac <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80078a8:	f000 fc86 	bl	80081b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80078ac:	b005      	add	sp, #20
 80078ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80078b2:	bf00      	nop
 80078b4:	20001b68 	.word	0x20001b68
 80078b8:	40012400 	.word	0x40012400

080078bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80078bc:	b530      	push	{r4, r5, lr}
 80078be:	4605      	mov	r5, r0
 80078c0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c2:	2210      	movs	r2, #16
 80078c4:	2100      	movs	r1, #0
 80078c6:	a802      	add	r0, sp, #8
 80078c8:	f000 fe48 	bl	800855c <memset>
  if(adcHandle->Instance==ADC1)
 80078cc:	682a      	ldr	r2, [r5, #0]
 80078ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007940 <HAL_ADC_MspInit+0x84>)
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d133      	bne.n	800793c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80078d4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80078d8:	699a      	ldr	r2, [r3, #24]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANT30VFB_Pin|AN2L1_Pin|AN1L1_Pin|ANL1VFB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	481a      	ldr	r0, [pc, #104]	@ (8007944 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80078dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e0:	619a      	str	r2, [r3, #24]
 80078e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80078e6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80078ea:	9200      	str	r2, [sp, #0]
 80078ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ee:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80078f0:	4c15      	ldr	r4, [pc, #84]	@ (8007948 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078f2:	f042 0204 	orr.w	r2, r2, #4
 80078f6:	619a      	str	r2, [r3, #24]
 80078f8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078fa:	221e      	movs	r2, #30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007904:	2303      	movs	r3, #3
 8007906:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800790a:	f7fc ffb9 	bl	8004880 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800790e:	2080      	movs	r0, #128	@ 0x80
 8007910:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007914:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007916:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800791a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800791e:	490b      	ldr	r1, [pc, #44]	@ (800794c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007920:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007922:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007926:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800792a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800792c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800792e:	f7fc fd81 	bl	8004434 <HAL_DMA_Init>
 8007932:	b108      	cbz	r0, 8007938 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8007934:	f000 fc40 	bl	80081b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007938:	622c      	str	r4, [r5, #32]
 800793a:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800793c:	b007      	add	sp, #28
 800793e:	bd30      	pop	{r4, r5, pc}
 8007940:	40012400 	.word	0x40012400
 8007944:	40010800 	.word	0x40010800
 8007948:	20001b24 	.word	0x20001b24
 800794c:	40020008 	.word	0x40020008

08007950 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8007950:	b510      	push	{r4, lr}

  if(adcHandle->Instance==ADC1)
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <HAL_ADC_MspDeInit+0x2c>)
 8007954:	6802      	ldr	r2, [r0, #0]
{
 8007956:	4604      	mov	r4, r0
  if(adcHandle->Instance==ADC1)
 8007958:	429a      	cmp	r2, r3
 800795a:	d10d      	bne.n	8007978 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800795c:	4a08      	ldr	r2, [pc, #32]	@ (8007980 <HAL_ADC_MspDeInit+0x30>)
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    HAL_GPIO_DeInit(GPIOA, ANT30VFB_Pin|AN2L1_Pin|AN1L1_Pin|ANL1VFB_Pin);
 800795e:	4809      	ldr	r0, [pc, #36]	@ (8007984 <HAL_ADC_MspDeInit+0x34>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007960:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, ANT30VFB_Pin|AN2L1_Pin|AN1L1_Pin|ANL1VFB_Pin);
 8007962:	211e      	movs	r1, #30
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007968:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, ANT30VFB_Pin|AN2L1_Pin|AN1L1_Pin|ANL1VFB_Pin);
 800796a:	f7fd f88f 	bl	8004a8c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800796e:	6a20      	ldr	r0, [r4, #32]
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8007970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8007974:	f7fc bd90 	b.w	8004498 <HAL_DMA_DeInit>
}
 8007978:	bd10      	pop	{r4, pc}
 800797a:	bf00      	nop
 800797c:	40012400 	.word	0x40012400
 8007980:	40021000 	.word	0x40021000
 8007984:	40010800 	.word	0x40010800

08007988 <MX_CAN_Init>:

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 6;
 8007988:	2306      	movs	r3, #6
  hcan.Instance = CAN1;
 800798a:	4829      	ldr	r0, [pc, #164]	@ (8007a30 <MX_CAN_Init+0xa8>)
  hcan.Init.Prescaler = 6;
 800798c:	4a29      	ldr	r2, [pc, #164]	@ (8007a34 <MX_CAN_Init+0xac>)
{
 800798e:	b570      	push	{r4, r5, r6, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8007990:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
  hcan.Init.Prescaler = 6;
 8007994:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8007998:	f44f 03a0 	mov.w	r3, #5242880	@ 0x500000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800799c:	2400      	movs	r4, #0
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 800799e:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80079a2:	4b25      	ldr	r3, [pc, #148]	@ (8007a38 <MX_CAN_Init+0xb0>)
{
 80079a4:	b08a      	sub	sp, #40	@ 0x28
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80079a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80079aa:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
  hcan.Init.AutoWakeUp = ENABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80079ac:	8384      	strh	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80079ae:	f7fc f9a0 	bl	8003cf2 <HAL_CAN_Init>
 80079b2:	b108      	cbz	r0, 80079b8 <MX_CAN_Init+0x30>
  {
    Error_Handler();
 80079b4:	f000 fc00 	bl	80081b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 13;
 80079b8:	230d      	movs	r3, #13
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80079ba:	2501      	movs	r5, #1
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	filterConfig.FilterActivation = ENABLE;
	filterConfig.FilterIdHigh = (0x702 << 5) & 0xFFFF;
	//filterConfig.FilterIdHigh = 0;
	filterConfig.FilterIdLow = 0x0000;
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 80079bc:	f64f 76e0 	movw	r6, #65504	@ 0xffe0
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80079c0:	e9cd 3405 	strd	r3, r4, [sp, #20]
	filterConfig.FilterIdHigh = (0x702 << 5) & 0xFFFF;
 80079c4:	f24e 0340 	movw	r3, #57408	@ 0xe040
	filterConfig.FilterMaskIdLow = 0x0000;
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80079c8:	4669      	mov	r1, sp
 80079ca:	4819      	ldr	r0, [pc, #100]	@ (8007a30 <MX_CAN_Init+0xa8>)
	filterConfig.FilterIdLow = 0x0000;
 80079cc:	e9cd 3400 	strd	r3, r4, [sp]
	filterConfig.FilterMaskIdLow = 0x0000;
 80079d0:	e9cd 6402 	strd	r6, r4, [sp, #8]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80079d4:	9507      	str	r5, [sp, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80079d6:	9404      	str	r4, [sp, #16]
	filterConfig.FilterActivation = ENABLE;
 80079d8:	9508      	str	r5, [sp, #32]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80079da:	f7fc fa0b 	bl	8003df4 <HAL_CAN_ConfigFilter>

	filterConfig.FilterBank = 10;
 80079de:	230a      	movs	r3, #10
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80079e0:	e9cd 3405 	strd	r3, r4, [sp, #20]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	filterConfig.FilterActivation = ENABLE;
	filterConfig.FilterIdHigh = (0x50 << 5) & 0xFFFF;
 80079e4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
	filterConfig.FilterIdLow = 0x0000;
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
	filterConfig.FilterMaskIdLow = 0x0000;
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80079e8:	4669      	mov	r1, sp
 80079ea:	4811      	ldr	r0, [pc, #68]	@ (8007a30 <MX_CAN_Init+0xa8>)
	filterConfig.FilterIdLow = 0x0000;
 80079ec:	e9cd 3400 	strd	r3, r4, [sp]
	filterConfig.FilterMaskIdLow = 0x0000;
 80079f0:	e9cd 6402 	strd	r6, r4, [sp, #8]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80079f4:	9507      	str	r5, [sp, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80079f6:	9404      	str	r4, [sp, #16]
	filterConfig.FilterActivation = ENABLE;
 80079f8:	9508      	str	r5, [sp, #32]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80079fa:	f7fc f9fb 	bl	8003df4 <HAL_CAN_ConfigFilter>

	filterConfig.FilterBank = 9;
 80079fe:	2309      	movs	r3, #9
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007a00:	e9cd 3405 	strd	r3, r4, [sp, #20]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	filterConfig.FilterActivation = ENABLE;
	filterConfig.FilterIdHigh = (0x3ff << 5) & 0xFFFF;
 8007a04:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
	filterConfig.FilterIdLow = 0x0000;
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
	filterConfig.FilterMaskIdLow = 0x0000;
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8007a08:	4669      	mov	r1, sp
 8007a0a:	4809      	ldr	r0, [pc, #36]	@ (8007a30 <MX_CAN_Init+0xa8>)
	filterConfig.FilterIdLow = 0x0000;
 8007a0c:	e9cd 3400 	strd	r3, r4, [sp]
	filterConfig.FilterMaskIdLow = 0x0000;
 8007a10:	e9cd 6402 	strd	r6, r4, [sp, #8]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007a14:	9507      	str	r5, [sp, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8007a16:	9404      	str	r4, [sp, #16]
	filterConfig.FilterActivation = ENABLE;
 8007a18:	9508      	str	r5, [sp, #32]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8007a1a:	f7fc f9eb 	bl	8003df4 <HAL_CAN_ConfigFilter>

	static uint32_t notificationLocal = 0;
	HAL_CAN_Start(&hcan);
 8007a1e:	4804      	ldr	r0, [pc, #16]	@ (8007a30 <MX_CAN_Init+0xa8>)
 8007a20:	f7fc fa5f 	bl	8003ee2 <HAL_CAN_Start>
	notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL;
	HAL_CAN_ActivateNotification(&hcan, notificationLocal);
 8007a24:	2106      	movs	r1, #6
 8007a26:	4802      	ldr	r0, [pc, #8]	@ (8007a30 <MX_CAN_Init+0xa8>)
 8007a28:	f7fc fb6e 	bl	8004108 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 8007a2c:	b00a      	add	sp, #40	@ 0x28
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	20001bb4 	.word	0x20001bb4
 8007a34:	40006400 	.word	0x40006400
 8007a38:	01010100 	.word	0x01010100

08007a3c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	4604      	mov	r4, r0
 8007a40:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a42:	2210      	movs	r2, #16
 8007a44:	2100      	movs	r1, #0
 8007a46:	a802      	add	r0, sp, #8
 8007a48:	f000 fd88 	bl	800855c <memset>
  if(canHandle->Instance==CAN1)
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	4b16      	ldr	r3, [pc, #88]	@ (8007aa8 <HAL_CAN_MspInit+0x6c>)
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d127      	bne.n	8007aa4 <HAL_CAN_MspInit+0x68>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007a54:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 8007a58:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5a:	4814      	ldr	r0, [pc, #80]	@ (8007aac <HAL_CAN_MspInit+0x70>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007a5c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007a60:	61da      	str	r2, [r3, #28]
 8007a62:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a64:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007a66:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8007a6a:	9200      	str	r2, [sp, #0]
 8007a6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	f042 0204 	orr.w	r2, r2, #4
 8007a74:	619a      	str	r2, [r3, #24]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007a80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a86:	2301      	movs	r3, #1
 8007a88:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a8a:	f7fc fef9 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a92:	2302      	movs	r3, #2
 8007a94:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a98:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a9a:	4804      	ldr	r0, [pc, #16]	@ (8007aac <HAL_CAN_MspInit+0x70>)
 8007a9c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa0:	f7fc feee 	bl	8004880 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007aa4:	b006      	add	sp, #24
 8007aa6:	bd10      	pop	{r4, pc}
 8007aa8:	40006400 	.word	0x40006400
 8007aac:	40010800 	.word	0x40010800

08007ab0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <MX_DMA_Init+0x1c>)
{
 8007ab2:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ab4:	695a      	ldr	r2, [r3, #20]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	615a      	str	r2, [r3, #20]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	9b01      	ldr	r3, [sp, #4]

}
 8007ac6:	b002      	add	sp, #8
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40021000 	.word	0x40021000

08007ad0 <QM_BSW_TASK>:
}

/* USER CODE BEGIN Header_QM_BSW_TASK */
/* USER CODE END Header_QM_BSW_TASK */
void QM_BSW_TASK(void *argument)
{
 8007ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN QM_BSW_TASK */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8007ad2:	4c07      	ldr	r4, [pc, #28]	@ (8007af0 <QM_BSW_TASK+0x20>)
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007adc:	f7fd f84a 	bl	8004b74 <HAL_GPIO_WritePin>
		CanH_MainFunction();
 8007ae0:	f7fb f95c 	bl	8002d9c <CanH_MainFunction>
		EcuM_main();
 8007ae4:	f7fb fcca 	bl	800347c <EcuM_main>
		vTaskSuspend(NULL);
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7ff f88d 	bl	8006c08 <vTaskSuspend>
	for(;;)
 8007aee:	e7f1      	b.n	8007ad4 <QM_BSW_TASK+0x4>
 8007af0:	40011000 	.word	0x40011000

08007af4 <QM_APPL_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_QM_APPL_TASK */
void QM_APPL_TASK(void *argument)
{
 8007af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN QM_APPL_TASK */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8007af6:	4d0c      	ldr	r5, [pc, #48]	@ (8007b28 <QM_APPL_TASK+0x34>)
		HAL_GPIO_WritePin(SMON_RUNTIME_MEAS_GPIO_Port, SMON_RUNTIME_MEAS_Pin, 1u);
 8007af8:	4c0c      	ldr	r4, [pc, #48]	@ (8007b2c <QM_APPL_TASK+0x38>)
		HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8007afa:	4628      	mov	r0, r5
 8007afc:	2201      	movs	r2, #1
 8007afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b02:	f7fd f837 	bl	8004b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SMON_RUNTIME_MEAS_GPIO_Port, SMON_RUNTIME_MEAS_Pin, 1u);
 8007b06:	4620      	mov	r0, r4
 8007b08:	2201      	movs	r2, #1
 8007b0a:	2120      	movs	r1, #32
 8007b0c:	f7fd f832 	bl	8004b74 <HAL_GPIO_WritePin>
		SMon_main();
 8007b10:	f7fb f920 	bl	8002d54 <SMon_main>
		HAL_GPIO_WritePin(SMON_RUNTIME_MEAS_GPIO_Port, SMON_RUNTIME_MEAS_Pin, 0u);
 8007b14:	4620      	mov	r0, r4
 8007b16:	2200      	movs	r2, #0
 8007b18:	2120      	movs	r1, #32
 8007b1a:	f7fd f82b 	bl	8004b74 <HAL_GPIO_WritePin>
		vTaskSuspend(NULL);
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f7ff f872 	bl	8006c08 <vTaskSuspend>
	for(;;)
 8007b24:	e7e9      	b.n	8007afa <QM_APPL_TASK+0x6>
 8007b26:	bf00      	nop
 8007b28:	40011000 	.word	0x40011000
 8007b2c:	40010c00 	.word	0x40010c00

08007b30 <QM_DIAG_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QM_DIAG_TASK */
void QM_DIAG_TASK(void *argument)
{
 8007b30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN QM_DIAG_TASK */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8007b32:	4c06      	ldr	r4, [pc, #24]	@ (8007b4c <QM_DIAG_TASK+0x1c>)
 8007b34:	4620      	mov	r0, r4
 8007b36:	2201      	movs	r2, #1
 8007b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b3c:	f7fd f81a 	bl	8004b74 <HAL_GPIO_WritePin>
	  Dcm_main();
 8007b40:	f7fb fbc4 	bl	80032cc <Dcm_main>
	  vTaskSuspend(NULL);
 8007b44:	2000      	movs	r0, #0
 8007b46:	f7ff f85f 	bl	8006c08 <vTaskSuspend>
  for(;;)
 8007b4a:	e7f3      	b.n	8007b34 <QM_DIAG_TASK+0x4>
 8007b4c:	40011000 	.word	0x40011000

08007b50 <Alarm5ms_Callback>:
  /* USER CODE END QM_DIAG_TASK */
}

/* Alarm5ms_Callback function */
void Alarm5ms_Callback(void *argument)
{
 8007b50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Alarm5ms_Callback */
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8007b52:	2201      	movs	r2, #1
 8007b54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b58:	480a      	ldr	r0, [pc, #40]	@ (8007b84 <Alarm5ms_Callback+0x34>)
 8007b5a:	f7fd f80b 	bl	8004b74 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Ain_DmaBuffer, 5u);
 8007b5e:	2205      	movs	r2, #5
 8007b60:	4909      	ldr	r1, [pc, #36]	@ (8007b88 <Alarm5ms_Callback+0x38>)
 8007b62:	480a      	ldr	r0, [pc, #40]	@ (8007b8c <Alarm5ms_Callback+0x3c>)
 8007b64:	f7fb fe48 	bl	80037f8 <HAL_ADC_Start_DMA>
	vTaskResume(QM_APPLHandle);
 8007b68:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <Alarm5ms_Callback+0x40>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	f7fe fe46 	bl	80067fc <vTaskResume>
	vTaskResume(QM_BSWHandle);
 8007b70:	4b08      	ldr	r3, [pc, #32]	@ (8007b94 <Alarm5ms_Callback+0x44>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	f7fe fe42 	bl	80067fc <vTaskResume>
	vTaskResume(QM_DIAGHandle);
 8007b78:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <Alarm5ms_Callback+0x48>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
  /* USER CODE END Alarm5ms_Callback */
}
 8007b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskResume(QM_DIAGHandle);
 8007b80:	f7fe be3c 	b.w	80067fc <vTaskResume>
 8007b84:	40011000 	.word	0x40011000
 8007b88:	200043a0 	.word	0x200043a0
 8007b8c:	20001b68 	.word	0x20001b68
 8007b90:	2000363c 	.word	0x2000363c
 8007b94:	2000436c 	.word	0x2000436c
 8007b98:	2000290c 	.word	0x2000290c

08007b9c <vApplicationIdleHook>:
	idlecnt++;
 8007b9c:	4a06      	ldr	r2, [pc, #24]	@ (8007bb8 <vApplicationIdleHook+0x1c>)
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 0u);
 8007b9e:	4807      	ldr	r0, [pc, #28]	@ (8007bbc <vApplicationIdleHook+0x20>)
	idlecnt++;
 8007ba0:	e9d2 3100 	ldrd	r3, r1, [r2]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	f141 0100 	adc.w	r1, r1, #0
 8007baa:	e9c2 3100 	strd	r3, r1, [r2]
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 0u);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007bb4:	f7fc bfde 	b.w	8004b74 <HAL_GPIO_WritePin>
 8007bb8:	20004370 	.word	0x20004370
 8007bbc:	40011000 	.word	0x40011000

08007bc0 <vApplicationTickHook>:
	oscnt++;
 8007bc0:	4a02      	ldr	r2, [pc, #8]	@ (8007bcc <vApplicationTickHook+0xc>)
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]
}
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20004378 	.word	0x20004378

08007bd0 <vApplicationStackOverflowHook>:
	EcuM_PerformReset(203, 203);
 8007bd0:	21cb      	movs	r1, #203	@ 0xcb
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	f7fb bcb6 	b.w	8003544 <EcuM_PerformReset>

08007bd8 <vApplicationMallocFailedHook>:
	EcuM_PerformReset(204, 204);
 8007bd8:	21cc      	movs	r1, #204	@ 0xcc
 8007bda:	4608      	mov	r0, r1
 8007bdc:	f7fb bcb2 	b.w	8003544 <EcuM_PerformReset>

08007be0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007be0:	b510      	push	{r4, lr}
  Alarm5msHandle = osTimerNew(Alarm5ms_Callback, osTimerPeriodic, NULL, &Alarm5ms_attributes);
 8007be2:	4b11      	ldr	r3, [pc, #68]	@ (8007c28 <MX_FREERTOS_Init+0x48>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	2101      	movs	r1, #1
 8007be8:	4810      	ldr	r0, [pc, #64]	@ (8007c2c <MX_FREERTOS_Init+0x4c>)
 8007bea:	f7fe f8db 	bl	8005da4 <osTimerNew>
 8007bee:	4c10      	ldr	r4, [pc, #64]	@ (8007c30 <MX_FREERTOS_Init+0x50>)
  QM_BSWHandle = osThreadNew(QM_BSW_TASK, NULL, &QM_BSW_attributes);
 8007bf0:	2100      	movs	r1, #0
  Alarm5msHandle = osTimerNew(Alarm5ms_Callback, osTimerPeriodic, NULL, &Alarm5ms_attributes);
 8007bf2:	6020      	str	r0, [r4, #0]
  QM_BSWHandle = osThreadNew(QM_BSW_TASK, NULL, &QM_BSW_attributes);
 8007bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8007c34 <MX_FREERTOS_Init+0x54>)
 8007bf6:	4810      	ldr	r0, [pc, #64]	@ (8007c38 <MX_FREERTOS_Init+0x58>)
 8007bf8:	f7fe f878 	bl	8005cec <osThreadNew>
 8007bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007c3c <MX_FREERTOS_Init+0x5c>)
  QM_APPLHandle = osThreadNew(QM_APPL_TASK, NULL, &QM_APPL_attributes);
 8007bfe:	2100      	movs	r1, #0
  QM_BSWHandle = osThreadNew(QM_BSW_TASK, NULL, &QM_BSW_attributes);
 8007c00:	6018      	str	r0, [r3, #0]
  QM_APPLHandle = osThreadNew(QM_APPL_TASK, NULL, &QM_APPL_attributes);
 8007c02:	4a0f      	ldr	r2, [pc, #60]	@ (8007c40 <MX_FREERTOS_Init+0x60>)
 8007c04:	480f      	ldr	r0, [pc, #60]	@ (8007c44 <MX_FREERTOS_Init+0x64>)
 8007c06:	f7fe f871 	bl	8005cec <osThreadNew>
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <MX_FREERTOS_Init+0x68>)
  QM_DIAGHandle = osThreadNew(QM_DIAG_TASK, NULL, &QM_DIAG_attributes);
 8007c0c:	2100      	movs	r1, #0
  QM_APPLHandle = osThreadNew(QM_APPL_TASK, NULL, &QM_APPL_attributes);
 8007c0e:	6018      	str	r0, [r3, #0]
  QM_DIAGHandle = osThreadNew(QM_DIAG_TASK, NULL, &QM_DIAG_attributes);
 8007c10:	4a0e      	ldr	r2, [pc, #56]	@ (8007c4c <MX_FREERTOS_Init+0x6c>)
 8007c12:	480f      	ldr	r0, [pc, #60]	@ (8007c50 <MX_FREERTOS_Init+0x70>)
 8007c14:	f7fe f86a 	bl	8005cec <osThreadNew>
 8007c18:	4b0e      	ldr	r3, [pc, #56]	@ (8007c54 <MX_FREERTOS_Init+0x74>)
	osTimerStart(Alarm5msHandle, 5);
 8007c1a:	2105      	movs	r1, #5
  QM_DIAGHandle = osThreadNew(QM_DIAG_TASK, NULL, &QM_DIAG_attributes);
 8007c1c:	6018      	str	r0, [r3, #0]
	osTimerStart(Alarm5msHandle, 5);
 8007c1e:	6820      	ldr	r0, [r4, #0]
}
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osTimerStart(Alarm5msHandle, 5);
 8007c24:	f7fe b8fe 	b.w	8005e24 <osTimerStart>
 8007c28:	0800863c 	.word	0x0800863c
 8007c2c:	08007b51 	.word	0x08007b51
 8007c30:	20001bdc 	.word	0x20001bdc
 8007c34:	08008694 	.word	0x08008694
 8007c38:	08007ad1 	.word	0x08007ad1
 8007c3c:	2000436c 	.word	0x2000436c
 8007c40:	08008670 	.word	0x08008670
 8007c44:	08007af5 	.word	0x08007af5
 8007c48:	2000363c 	.word	0x2000363c
 8007c4c:	0800864c 	.word	0x0800864c
 8007c50:	08007b31 	.word	0x08007b31
 8007c54:	2000290c 	.word	0x2000290c

08007c58 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c58:	2210      	movs	r2, #16
{
 8007c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c5e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c60:	eb0d 0002 	add.w	r0, sp, r2
 8007c64:	2100      	movs	r1, #0
 8007c66:	f000 fc79 	bl	800855c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8007d60 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007c6c:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8007d64 <MX_GPIO_Init+0x10c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c70:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENL1CLS_Pin|ENL1_Pin|ADC_RUNTIME_MEAS_Pin|SMON_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007c72:	4c3d      	ldr	r4, [pc, #244]	@ (8007d68 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c74:	f042 0210 	orr.w	r2, r2, #16
 8007c78:	619a      	str	r2, [r3, #24]
 8007c7a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007c7c:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c7e:	f002 0210 	and.w	r2, r2, #16
 8007c82:	9200      	str	r2, [sp, #0]
 8007c84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c86:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c8c:	f042 0220 	orr.w	r2, r2, #32
 8007c90:	619a      	str	r2, [r3, #24]
 8007c92:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALL_RUNTIME_MEAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c94:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c96:	f002 0220 	and.w	r2, r2, #32
 8007c9a:	9201      	str	r2, [sp, #4]
 8007c9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca2:	f042 0204 	orr.w	r2, r2, #4
 8007ca6:	619a      	str	r2, [r3, #24]
 8007ca8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007caa:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cae:	f002 0204 	and.w	r2, r2, #4
 8007cb2:	9202      	str	r2, [sp, #8]
 8007cb4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(ALL_RUNTIME_MEAS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cb8:	2703      	movs	r7, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cba:	f042 0208 	orr.w	r2, r2, #8
 8007cbe:	619a      	str	r2, [r3, #24]
 8007cc0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007cc2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	9303      	str	r3, [sp, #12]
 8007cca:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007ccc:	f7fc ff52 	bl	8004b74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ENL1CLS_Pin|ENL1_Pin|ADC_RUNTIME_MEAS_Pin|SMON_RUNTIME_MEAS_Pin, GPIO_PIN_RESET);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f240 412a 	movw	r1, #1066	@ 0x42a
 8007cd8:	f7fc ff4c 	bl	8004b74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(ALL_RUNTIME_MEAS_GPIO_Port, &GPIO_InitStruct);
 8007ce0:	4648      	mov	r0, r9
 8007ce2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ce4:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce8:	e9cd 5806 	strd	r5, r8, [sp, #24]
  HAL_GPIO_Init(ALL_RUNTIME_MEAS_GPIO_Port, &GPIO_InitStruct);
 8007cec:	f7fc fdc8 	bl	8004880 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cf0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	a904      	add	r1, sp, #16

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cf8:	f5a9 6900 	sub.w	r9, r9, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cfc:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d00:	f7fc fdbe 	bl	8004880 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d04:	4648      	mov	r0, r9
 8007d06:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d08:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d0e:	f7fc fdb7 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8007d12:	f248 63e0 	movw	r3, #34528	@ 0x86e0
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d16:	4648      	mov	r0, r9
 8007d18:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d1a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d1e:	f7fc fdaf 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 PB12
                           PB13 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12
 8007d22:	f64f 33d5 	movw	r3, #64469	@ 0xfbd5
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d26:	4620      	mov	r0, r4
 8007d28:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d2a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d2e:	f7fc fda7 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENL1CLS_Pin|ENL1_Pin;
 8007d32:	f240 4302 	movw	r3, #1026	@ 0x402
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d36:	4620      	mov	r0, r4
 8007d38:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d3a:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d3e:	e9cd 8706 	strd	r8, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d42:	f7fc fd9d 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ADC_RUNTIME_MEAS_Pin|SMON_RUNTIME_MEAS_Pin;
 8007d46:	2328      	movs	r3, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d48:	4620      	mov	r0, r4
 8007d4a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d4c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d50:	e9cd 5806 	strd	r5, r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d54:	f7fc fd94 	bl	8004880 <HAL_GPIO_Init>

}
 8007d58:	b009      	add	sp, #36	@ 0x24
 8007d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	bf00      	nop
 8007d60:	40021000 	.word	0x40021000
 8007d64:	40011000 	.word	0x40011000
 8007d68:	40010c00 	.word	0x40010c00

08007d6c <HAL_ADC_ConvCpltCallback>:
float RSense = 10.0f;
float KOffset = 17.0f;
float KFactor = 1.116f;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	v0 = ((float)Ain_DmaBuffer[2u] / 4095.0f) * 3300.0f;
 8007d70:	4d64      	ldr	r5, [pc, #400]	@ (8007f04 <HAL_ADC_ConvCpltCallback+0x198>)
 8007d72:	4e65      	ldr	r6, [pc, #404]	@ (8007f08 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007d74:	88a8      	ldrh	r0, [r5, #4]
 8007d76:	f7fa faa1 	bl	80022bc <__aeabi_ui2f>
 8007d7a:	4964      	ldr	r1, [pc, #400]	@ (8007f0c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007d7c:	f7fa fbaa 	bl	80024d4 <__aeabi_fdiv>
 8007d80:	4963      	ldr	r1, [pc, #396]	@ (8007f10 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007d82:	f7fa faf3 	bl	800236c <__aeabi_fmul>
 8007d86:	6030      	str	r0, [r6, #0]
	v1 = ((float)Ain_DmaBuffer[1u] / 4095.0f) * 3300.0f;
 8007d88:	8868      	ldrh	r0, [r5, #2]
 8007d8a:	f7fa fa97 	bl	80022bc <__aeabi_ui2f>
 8007d8e:	495f      	ldr	r1, [pc, #380]	@ (8007f0c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007d90:	f7fa fba0 	bl	80024d4 <__aeabi_fdiv>
 8007d94:	495e      	ldr	r1, [pc, #376]	@ (8007f10 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007d96:	f7fa fae9 	bl	800236c <__aeabi_fmul>
 8007d9a:	4c5e      	ldr	r4, [pc, #376]	@ (8007f14 <HAL_ADC_ConvCpltCallback+0x1a8>)
	v2 = ((float)Ain_DmaBuffer[3u] / 4095.0f) * 3300.0f;
 8007d9c:	4f5e      	ldr	r7, [pc, #376]	@ (8007f18 <HAL_ADC_ConvCpltCallback+0x1ac>)
	v1 = ((float)Ain_DmaBuffer[1u] / 4095.0f) * 3300.0f;
 8007d9e:	6020      	str	r0, [r4, #0]
	v2 = ((float)Ain_DmaBuffer[3u] / 4095.0f) * 3300.0f;
 8007da0:	88e8      	ldrh	r0, [r5, #6]
 8007da2:	f7fa fa8b 	bl	80022bc <__aeabi_ui2f>
 8007da6:	4959      	ldr	r1, [pc, #356]	@ (8007f0c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007da8:	f7fa fb94 	bl	80024d4 <__aeabi_fdiv>
 8007dac:	4958      	ldr	r1, [pc, #352]	@ (8007f10 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007dae:	f7fa fadd 	bl	800236c <__aeabi_fmul>
 8007db2:	6038      	str	r0, [r7, #0]
	v3 = ((float)Ain_DmaBuffer[0u] / 4095.0f) * 3300.0f;
 8007db4:	8828      	ldrh	r0, [r5, #0]
 8007db6:	f7fa fa81 	bl	80022bc <__aeabi_ui2f>
 8007dba:	4954      	ldr	r1, [pc, #336]	@ (8007f0c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007dbc:	f7fa fb8a 	bl	80024d4 <__aeabi_fdiv>
 8007dc0:	4953      	ldr	r1, [pc, #332]	@ (8007f10 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007dc2:	f7fa fad3 	bl	800236c <__aeabi_fmul>
 8007dc6:	4b55      	ldr	r3, [pc, #340]	@ (8007f1c <HAL_ADC_ConvCpltCallback+0x1b0>)

	vfb1_mV = v2 * ((91.0f + 10.0f) / 10.0f);
 8007dc8:	4955      	ldr	r1, [pc, #340]	@ (8007f20 <HAL_ADC_ConvCpltCallback+0x1b4>)
	v3 = ((float)Ain_DmaBuffer[0u] / 4095.0f) * 3300.0f;
 8007dca:	6018      	str	r0, [r3, #0]
	vfb1_mV = v2 * ((91.0f + 10.0f) / 10.0f);
 8007dcc:	6838      	ldr	r0, [r7, #0]
	vfb2_mV = v3 * ((91.0f + 10.0f) / 10.0f);
 8007dce:	681d      	ldr	r5, [r3, #0]
	vfb1_mV = v2 * ((91.0f + 10.0f) / 10.0f);
 8007dd0:	f7fa facc 	bl	800236c <__aeabi_fmul>

	vfb1_mV -= 180.0f;
 8007dd4:	4953      	ldr	r1, [pc, #332]	@ (8007f24 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007dd6:	f7fa f9bf 	bl	8002158 <__aeabi_fsub>
	v0 += 10.0f;
 8007dda:	4953      	ldr	r1, [pc, #332]	@ (8007f28 <HAL_ADC_ConvCpltCallback+0x1bc>)
	vfb1_mV -= 180.0f;
 8007ddc:	4680      	mov	r8, r0
	v0 += 10.0f;
 8007dde:	6830      	ldr	r0, [r6, #0]
 8007de0:	f7fa f9bc 	bl	800215c <__addsf3>
 8007de4:	6030      	str	r0, [r6, #0]
	v1 -= 12.0f;
 8007de6:	6820      	ldr	r0, [r4, #0]
 8007de8:	4950      	ldr	r1, [pc, #320]	@ (8007f2c <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007dea:	f7fa f9b5 	bl	8002158 <__aeabi_fsub>

	filt_vfb1_mV = filt_vfb1_mV + 0.1f * (vfb1_mV - filt_vfb1_mV);
 8007dee:	4f50      	ldr	r7, [pc, #320]	@ (8007f30 <HAL_ADC_ConvCpltCallback+0x1c4>)
	v1 -= 12.0f;
 8007df0:	6020      	str	r0, [r4, #0]
	filt_vfb1_mV = filt_vfb1_mV + 0.1f * (vfb1_mV - filt_vfb1_mV);
 8007df2:	f8d7 9000 	ldr.w	r9, [r7]
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7fa f9ad 	bl	8002158 <__aeabi_fsub>
 8007dfe:	494d      	ldr	r1, [pc, #308]	@ (8007f34 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007e00:	f7fa fab4 	bl	800236c <__aeabi_fmul>
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7fa f9a9 	bl	800215c <__addsf3>
	filt_vfb2_mV = filt_vfb2_mV + 0.1f * (vfb2_mV - filt_vfb2_mV);
 8007e0a:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8007f38 <HAL_ADC_ConvCpltCallback+0x1cc>
	vfb2_mV = v3 * ((91.0f + 10.0f) / 10.0f);
 8007e0e:	4944      	ldr	r1, [pc, #272]	@ (8007f20 <HAL_ADC_ConvCpltCallback+0x1b4>)
	filt_vfb2_mV = filt_vfb2_mV + 0.1f * (vfb2_mV - filt_vfb2_mV);
 8007e10:	f8d9 a000 	ldr.w	sl, [r9]
	filt_vfb1_mV = filt_vfb1_mV + 0.1f * (vfb1_mV - filt_vfb1_mV);
 8007e14:	6038      	str	r0, [r7, #0]
	vfb2_mV = v3 * ((91.0f + 10.0f) / 10.0f);
 8007e16:	4628      	mov	r0, r5
 8007e18:	f7fa faa8 	bl	800236c <__aeabi_fmul>
	filt_vfb2_mV = filt_vfb2_mV + 0.1f * (vfb2_mV - filt_vfb2_mV);
 8007e1c:	4651      	mov	r1, sl
 8007e1e:	f7fa f99b 	bl	8002158 <__aeabi_fsub>
 8007e22:	4944      	ldr	r1, [pc, #272]	@ (8007f34 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007e24:	f7fa faa2 	bl	800236c <__aeabi_fmul>
 8007e28:	4651      	mov	r1, sl
 8007e2a:	f7fa f997 	bl	800215c <__addsf3>
 8007e2e:	f8c9 0000 	str.w	r0, [r9]
 8007e32:	4605      	mov	r5, r0
	filt_current_mA = filt_current_mA + 0.1f * ((v0 - v1)/0.010f - filt_current_mA);
 8007e34:	6830      	ldr	r0, [r6, #0]
 8007e36:	4e41      	ldr	r6, [pc, #260]	@ (8007f3c <HAL_ADC_ConvCpltCallback+0x1d0>)
 8007e38:	6821      	ldr	r1, [r4, #0]
 8007e3a:	f8d6 9000 	ldr.w	r9, [r6]
 8007e3e:	f7fa f98b 	bl	8002158 <__aeabi_fsub>
 8007e42:	493f      	ldr	r1, [pc, #252]	@ (8007f40 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8007e44:	6834      	ldr	r4, [r6, #0]
 8007e46:	f7fa fb45 	bl	80024d4 <__aeabi_fdiv>
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7fa f984 	bl	8002158 <__aeabi_fsub>
 8007e50:	4938      	ldr	r1, [pc, #224]	@ (8007f34 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007e52:	f7fa fa8b 	bl	800236c <__aeabi_fmul>
 8007e56:	4621      	mov	r1, r4
 8007e58:	f7fa f980 	bl	800215c <__addsf3>
	corrected_current_mA = (filt_current_mA - (-62.5f * (filt_vfb2_mV / 1000.0f) + 2300.0f)) * 10.0f;
 8007e5c:	4939      	ldr	r1, [pc, #228]	@ (8007f44 <HAL_ADC_ConvCpltCallback+0x1d8>)
	filt_current_mA = filt_current_mA + 0.1f * ((v0 - v1)/0.010f - filt_current_mA);
 8007e5e:	6030      	str	r0, [r6, #0]
	corrected_current_mA = (filt_current_mA - (-62.5f * (filt_vfb2_mV / 1000.0f) + 2300.0f)) * 10.0f;
 8007e60:	4628      	mov	r0, r5
 8007e62:	f7fa fb37 	bl	80024d4 <__aeabi_fdiv>
 8007e66:	4938      	ldr	r1, [pc, #224]	@ (8007f48 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8007e68:	f7fa fa80 	bl	800236c <__aeabi_fmul>
 8007e6c:	4937      	ldr	r1, [pc, #220]	@ (8007f4c <HAL_ADC_ConvCpltCallback+0x1e0>)
 8007e6e:	f7fa f975 	bl	800215c <__addsf3>
 8007e72:	6834      	ldr	r4, [r6, #0]
 8007e74:	4601      	mov	r1, r0
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7fa f96e 	bl	8002158 <__aeabi_fsub>
 8007e7c:	492a      	ldr	r1, [pc, #168]	@ (8007f28 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007e7e:	f7fa fa75 	bl	800236c <__aeabi_fmul>
 8007e82:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 8007f50 <HAL_ADC_ConvCpltCallback+0x1e4>
	filt_corrected_current_mA = filt_corrected_current_mA + 0.75f * (corrected_current_mA - filt_corrected_current_mA);
 8007e86:	4c33      	ldr	r4, [pc, #204]	@ (8007f54 <HAL_ADC_ConvCpltCallback+0x1e8>)
	corrected_current_mA = (filt_current_mA - (-62.5f * (filt_vfb2_mV / 1000.0f) + 2300.0f)) * 10.0f;
 8007e88:	f8c9 0000 	str.w	r0, [r9]
	filt_corrected_current_mA = filt_corrected_current_mA + 0.75f * (corrected_current_mA - filt_corrected_current_mA);
 8007e8c:	f8d9 0000 	ldr.w	r0, [r9]
 8007e90:	6821      	ldr	r1, [r4, #0]
 8007e92:	f8d4 a000 	ldr.w	sl, [r4]
 8007e96:	f7fa f95f 	bl	8002158 <__aeabi_fsub>
 8007e9a:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8007e9e:	f7fa fa65 	bl	800236c <__aeabi_fmul>
 8007ea2:	4651      	mov	r1, sl
 8007ea4:	f7fa f95a 	bl	800215c <__addsf3>

	if(0u == SMon_CmdStat || 2u != localCLSFlag)
 8007ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8007f58 <HAL_ADC_ConvCpltCallback+0x1ec>)
	filt_corrected_current_mA = filt_corrected_current_mA + 0.75f * (corrected_current_mA - filt_corrected_current_mA);
 8007eaa:	6020      	str	r0, [r4, #0]
	if(0u == SMon_CmdStat || 2u != localCLSFlag)
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <HAL_ADC_ConvCpltCallback+0x1f0>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b10b      	cbz	r3, 8007eb8 <HAL_ADC_ConvCpltCallback+0x14c>
 8007eb4:	2a02      	cmp	r2, #2
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_ADC_ConvCpltCallback+0x164>
	{
		filt_current_mA = 0u;
 8007eb8:	2300      	movs	r3, #0
	else
	{
		/* Do nothing. */
	}

	if(2u != localCLSFlag)
 8007eba:	2a02      	cmp	r2, #2
		filt_current_mA = 0u;
 8007ebc:	6033      	str	r3, [r6, #0]
		corrected_current_mA = 0u;
 8007ebe:	f8c9 3000 	str.w	r3, [r9]
		filt_corrected_current_mA = 0u;
 8007ec2:	6023      	str	r3, [r4, #0]
	if(2u != localCLSFlag)
 8007ec4:	d004      	beq.n	8007ed0 <HAL_ADC_ConvCpltCallback+0x164>
	{
		filt_vfb1_mV = vfb1_mV + 180.0f;
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4916      	ldr	r1, [pc, #88]	@ (8007f24 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007eca:	f7fa f947 	bl	800215c <__addsf3>
 8007ece:	6038      	str	r0, [r7, #0]
	else
	{
		/* Do nothing. */
	}

	SMon_ISenseL1_Float = filt_corrected_current_mA / 1000u;
 8007ed0:	491c      	ldr	r1, [pc, #112]	@ (8007f44 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	f7fa fafe 	bl	80024d4 <__aeabi_fdiv>
 8007ed8:	4b21      	ldr	r3, [pc, #132]	@ (8007f60 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8007eda:	6018      	str	r0, [r3, #0]
	SMon_ISenseL1 = filt_corrected_current_mA;
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	f7fa fc0b 	bl	80026f8 <__aeabi_f2uiz>
 8007ee2:	4b20      	ldr	r3, [pc, #128]	@ (8007f64 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8007ee4:	6018      	str	r0, [r3, #0]
	SMon_VfbL1 = filt_vfb1_mV;
 8007ee6:	6838      	ldr	r0, [r7, #0]
 8007ee8:	f7fa fc06 	bl	80026f8 <__aeabi_f2uiz>
 8007eec:	4b1e      	ldr	r3, [pc, #120]	@ (8007f68 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8007eee:	8018      	strh	r0, [r3, #0]
	SMon_VfbT30 = filt_vfb2_mV;
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f7fa fc01 	bl	80026f8 <__aeabi_f2uiz>
	SMon_ValidMeasFlag = 1u;
 8007ef6:	2201      	movs	r2, #1
	SMon_VfbT30 = filt_vfb2_mV;
 8007ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f6c <HAL_ADC_ConvCpltCallback+0x200>)
 8007efa:	8018      	strh	r0, [r3, #0]
	SMon_ValidMeasFlag = 1u;
 8007efc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f70 <HAL_ADC_ConvCpltCallback+0x204>)
 8007efe:	701a      	strb	r2, [r3, #0]
}
 8007f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f04:	200043a0 	.word	0x200043a0
 8007f08:	2000439c 	.word	0x2000439c
 8007f0c:	457ff000 	.word	0x457ff000
 8007f10:	454e4000 	.word	0x454e4000
 8007f14:	20004398 	.word	0x20004398
 8007f18:	20004394 	.word	0x20004394
 8007f1c:	20004390 	.word	0x20004390
 8007f20:	4121999a 	.word	0x4121999a
 8007f24:	43340000 	.word	0x43340000
 8007f28:	41200000 	.word	0x41200000
 8007f2c:	41400000 	.word	0x41400000
 8007f30:	20004380 	.word	0x20004380
 8007f34:	3dcccccd 	.word	0x3dcccccd
 8007f38:	2000437c 	.word	0x2000437c
 8007f3c:	2000438c 	.word	0x2000438c
 8007f40:	3c23d70a 	.word	0x3c23d70a
 8007f44:	447a0000 	.word	0x447a0000
 8007f48:	c27a0000 	.word	0xc27a0000
 8007f4c:	450fc000 	.word	0x450fc000
 8007f50:	20004388 	.word	0x20004388
 8007f54:	20004384 	.word	0x20004384
 8007f58:	200000c3 	.word	0x200000c3
 8007f5c:	20000006 	.word	0x20000006
 8007f60:	200000d8 	.word	0x200000d8
 8007f64:	200000dc 	.word	0x200000dc
 8007f68:	20000004 	.word	0x20000004
 8007f6c:	20000002 	.word	0x20000002
 8007f70:	20000ce8 	.word	0x20000ce8

08007f74 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	if(0u != hadc->ErrorCode)
 8007f74:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f76:	b153      	cbz	r3, 8007f8e <HAL_ADC_ErrorCallback+0x1a>
	{
		SMon_ISenseL1 = 0xFFFFu;
 8007f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f7c:	4a04      	ldr	r2, [pc, #16]	@ (8007f90 <HAL_ADC_ErrorCallback+0x1c>)
 8007f7e:	6013      	str	r3, [r2, #0]
		SMon_VfbL1 = 0xFFFFu;
 8007f80:	4a04      	ldr	r2, [pc, #16]	@ (8007f94 <HAL_ADC_ErrorCallback+0x20>)
 8007f82:	8013      	strh	r3, [r2, #0]
		SMon_VfbT30 = 0xFFFFu;
 8007f84:	4a04      	ldr	r2, [pc, #16]	@ (8007f98 <HAL_ADC_ErrorCallback+0x24>)
 8007f86:	8013      	strh	r3, [r2, #0]
		SMon_ValidMeasFlag = 0u;
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4b04      	ldr	r3, [pc, #16]	@ (8007f9c <HAL_ADC_ErrorCallback+0x28>)
 8007f8c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8007f8e:	4770      	bx	lr
 8007f90:	200000dc 	.word	0x200000dc
 8007f94:	20000004 	.word	0x20000004
 8007f98:	20000002 	.word	0x20000002
 8007f9c:	20000ce8 	.word	0x20000ce8

08007fa0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	b094      	sub	sp, #80	@ 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fa4:	2214      	movs	r2, #20
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	a80c      	add	r0, sp, #48	@ 0x30
 8007faa:	f000 fad7 	bl	800855c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fae:	2214      	movs	r2, #20
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	eb0d 0002 	add.w	r0, sp, r2
 8007fb6:	f000 fad1 	bl	800855c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007fba:	2210      	movs	r2, #16
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	a801      	add	r0, sp, #4
 8007fc0:	f000 facc 	bl	800855c <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fc4:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007fca:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fcc:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fd8:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fda:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fdc:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fde:	f7fc fdf7 	bl	8004bd0 <HAL_RCC_OscConfig>
 8007fe2:	b108      	cbz	r0, 8007fe8 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8007fe4:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8007fe6:	e7fe      	b.n	8007fe6 <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fe8:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fea:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ff2:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ff4:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	a805      	add	r0, sp, #20
 8007ffc:	f7fc ffa4 	bl	8004f48 <HAL_RCC_ClockConfig>
 8008000:	b108      	cbz	r0, 8008006 <SystemClock_Config+0x66>
 8008002:	b672      	cpsid	i
	while (1)
 8008004:	e7fe      	b.n	8008004 <SystemClock_Config+0x64>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800800a:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800800c:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800800e:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008010:	f7fd f878 	bl	8005104 <HAL_RCCEx_PeriphCLKConfig>
 8008014:	b108      	cbz	r0, 800801a <SystemClock_Config+0x7a>
 8008016:	b672      	cpsid	i
	while (1)
 8008018:	e7fe      	b.n	8008018 <SystemClock_Config+0x78>
}
 800801a:	b014      	add	sp, #80	@ 0x50
 800801c:	bd10      	pop	{r4, pc}
	...

08008020 <main>:
{
 8008020:	b508      	push	{r3, lr}
	HAL_Init();
 8008022:	f7fb fab9 	bl	8003598 <HAL_Init>
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
 8008026:	2201      	movs	r2, #1
 8008028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800802c:	4857      	ldr	r0, [pc, #348]	@ (800818c <main+0x16c>)
 800802e:	f7fc fda1 	bl	8004b74 <HAL_GPIO_WritePin>
	SystemClock_Config();
 8008032:	f7ff ffb5 	bl	8007fa0 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
 8008036:	b662      	cpsie	i
	MX_GPIO_Init();
 8008038:	f7ff fe0e 	bl	8007c58 <MX_GPIO_Init>
	MX_DMA_Init();
 800803c:	f7ff fd38 	bl	8007ab0 <MX_DMA_Init>
	MX_ADC1_Init();
 8008040:	f7ff fbe6 	bl	8007810 <MX_ADC1_Init>
	MX_TIM1_Init();
 8008044:	f000 fa18 	bl	8008478 <MX_TIM1_Init>
	MX_CAN_Init();
 8008048:	f7ff fc9e 	bl	8007988 <MX_CAN_Init>
	MX_TIM2_Init();
 800804c:	f000 f992 	bl	8008374 <MX_TIM2_Init>
	HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8008050:	2200      	movs	r2, #0
 8008052:	2105      	movs	r1, #5
 8008054:	2013      	movs	r0, #19
 8008056:	f7fc f98f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800805a:	2013      	movs	r0, #19
 800805c:	f7fc f9bc 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8008060:	2200      	movs	r2, #0
 8008062:	2105      	movs	r1, #5
 8008064:	2014      	movs	r0, #20
 8008066:	f7fc f987 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800806a:	2014      	movs	r0, #20
 800806c:	f7fc f9b4 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008070:	2200      	movs	r2, #0
 8008072:	2105      	movs	r1, #5
 8008074:	2015      	movs	r0, #21
 8008076:	f7fc f97f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800807a:	2015      	movs	r0, #21
 800807c:	f7fc f9ac 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	2105      	movs	r1, #5
 8008084:	2016      	movs	r0, #22
 8008086:	f7fc f977 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800808a:	2016      	movs	r0, #22
 800808c:	f7fc f9a4 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8008090:	2200      	movs	r2, #0
 8008092:	2105      	movs	r1, #5
 8008094:	201c      	movs	r0, #28
 8008096:	f7fc f96f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800809a:	201c      	movs	r0, #28
 800809c:	f7fc f99c 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80080a0:	2105      	movs	r1, #5
 80080a2:	2200      	movs	r2, #0
 80080a4:	4608      	mov	r0, r1
 80080a6:	f7fc f967 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 80080aa:	2005      	movs	r0, #5
 80080ac:	f7fc f994 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80080b0:	2200      	movs	r2, #0
 80080b2:	2105      	movs	r1, #5
 80080b4:	2004      	movs	r0, #4
 80080b6:	f7fc f95f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80080ba:	2004      	movs	r0, #4
 80080bc:	f7fc f98c 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80080c0:	2200      	movs	r2, #0
 80080c2:	2105      	movs	r1, #5
 80080c4:	2001      	movs	r0, #1
 80080c6:	f7fc f957 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 80080ca:	2001      	movs	r0, #1
 80080cc:	f7fc f984 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80080d0:	2200      	movs	r2, #0
 80080d2:	2105      	movs	r1, #5
 80080d4:	200b      	movs	r0, #11
 80080d6:	f7fc f94f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80080da:	200b      	movs	r0, #11
 80080dc:	f7fc f97c 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	2105      	movs	r1, #5
 80080e4:	201b      	movs	r0, #27
 80080e6:	f7fc f947 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80080ea:	201b      	movs	r0, #27
 80080ec:	f7fc f974 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2105      	movs	r1, #5
 80080f4:	201a      	movs	r0, #26
 80080f6:	f7fc f93f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80080fa:	201a      	movs	r0, #26
 80080fc:	f7fc f96c 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8008100:	2200      	movs	r2, #0
 8008102:	2105      	movs	r1, #5
 8008104:	2019      	movs	r0, #25
 8008106:	f7fc f937 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800810a:	2019      	movs	r0, #25
 800810c:	f7fc f964 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8008110:	2200      	movs	r2, #0
 8008112:	2105      	movs	r1, #5
 8008114:	2018      	movs	r0, #24
 8008116:	f7fc f92f 	bl	8004378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800811a:	2018      	movs	r0, #24
 800811c:	f7fc f95c 	bl	80043d8 <HAL_NVIC_EnableIRQ>
	if(((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 8008120:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <main+0x170>)
 8008122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008124:	0111      	lsls	r1, r2, #4
 8008126:	d405      	bmi.n	8008134 <main+0x114>
			|| ((RCC->CSR & RCC_CSR_PINRSTF) != 0)
 8008128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800812a:	0152      	lsls	r2, r2, #5
 800812c:	d402      	bmi.n	8008134 <main+0x114>
			|| ((RCC->CSR & RCC_CSR_LPWRRSTF) != 0))
 800812e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008130:	2a00      	cmp	r2, #0
 8008132:	da12      	bge.n	800815a <main+0x13a>
		Dcm_ActiveSessionState = 0u;
 8008134:	2100      	movs	r1, #0
 8008136:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <main+0x174>)
 8008138:	6011      	str	r1, [r2, #0]
		RCC->CSR |= RCC_CSR_PORRSTF;
 800813a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800813c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24
		RCC->CSR |= RCC_CSR_PINRSTF;
 8008142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008144:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008148:	625a      	str	r2, [r3, #36]	@ 0x24
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800814a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800814c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008150:	625a      	str	r2, [r3, #36]	@ 0x24
		RCC->CSR |= RCC_CSR_RMVF;
 8008152:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008154:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008158:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 800815a:	480f      	ldr	r0, [pc, #60]	@ (8008198 <main+0x178>)
 800815c:	f7fb fd10 	bl	8003b80 <HAL_ADC_Stop>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8008160:	480d      	ldr	r0, [pc, #52]	@ (8008198 <main+0x178>)
 8008162:	f7fb fd55 	bl	8003c10 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(1);
 8008166:	2001      	movs	r0, #1
 8008168:	f7fb fa3a 	bl	80035e0 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800816c:	2100      	movs	r1, #0
 800816e:	480b      	ldr	r0, [pc, #44]	@ (800819c <main+0x17c>)
 8008170:	f7fd fc0a 	bl	8005988 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Ain_DmaBuffer, 5u);
 8008174:	2205      	movs	r2, #5
 8008176:	490a      	ldr	r1, [pc, #40]	@ (80081a0 <main+0x180>)
 8008178:	4807      	ldr	r0, [pc, #28]	@ (8008198 <main+0x178>)
 800817a:	f7fb fb3d 	bl	80037f8 <HAL_ADC_Start_DMA>
	osKernelInitialize();
 800817e:	f7fd fd79 	bl	8005c74 <osKernelInitialize>
	MX_FREERTOS_Init();
 8008182:	f7ff fd2d 	bl	8007be0 <MX_FREERTOS_Init>
	osKernelStart();
 8008186:	f7fd fd91 	bl	8005cac <osKernelStart>
	while (1)
 800818a:	e7fe      	b.n	800818a <main+0x16a>
 800818c:	40011000 	.word	0x40011000
 8008190:	40021000 	.word	0x40021000
 8008194:	20004c00 	.word	0x20004c00
 8008198:	20001b68 	.word	0x20001b68
 800819c:	20004514 	.word	0x20004514
 80081a0:	200043a0 	.word	0x200043a0

080081a4 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM4) {
 80081a4:	6802      	ldr	r2, [r0, #0]
 80081a6:	4b03      	ldr	r3, [pc, #12]	@ (80081b4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d101      	bne.n	80081b0 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 80081ac:	f7fb ba06 	b.w	80035bc <HAL_IncTick>
}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40000800 	.word	0x40000800

080081b8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80081b8:	b672      	cpsid	i
	while (1)
 80081ba:	e7fe      	b.n	80081ba <Error_Handler+0x2>

080081bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081bc:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80081be:	4b11      	ldr	r3, [pc, #68]	@ (8008204 <HAL_MspInit+0x48>)
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80081c0:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80081c2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80081c4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80081c8:	f042 0201 	orr.w	r2, r2, #1
 80081cc:	619a      	str	r2, [r3, #24]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	f002 0201 	and.w	r2, r2, #1
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081d8:	69da      	ldr	r2, [r3, #28]
 80081da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80081de:	61da      	str	r2, [r3, #28]
 80081e0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80081e2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80081e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80081ec:	f7fc f8c4 	bl	8004378 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80081f0:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <HAL_MspInit+0x4c>)
 80081f2:	6853      	ldr	r3, [r2, #4]
 80081f4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80081f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081fe:	b003      	add	sp, #12
 8008200:	f85d fb04 	ldr.w	pc, [sp], #4
 8008204:	40021000 	.word	0x40021000
 8008208:	40010000 	.word	0x40010000

0800820c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800820c:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800820e:	4b21      	ldr	r3, [pc, #132]	@ (8008294 <HAL_InitTick+0x88>)
{
 8008210:	b088      	sub	sp, #32
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008212:	69da      	ldr	r2, [r3, #28]
{
 8008214:	4605      	mov	r5, r0
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008216:	f042 0204 	orr.w	r2, r2, #4
 800821a:	61da      	str	r2, [r3, #28]
 800821c:	69db      	ldr	r3, [r3, #28]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800821e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008226:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008228:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800822a:	f7fc ff4d 	bl	80050c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800822e:	9b06      	ldr	r3, [sp, #24]
 8008230:	bb4b      	cbnz	r3, 8008286 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008232:	f7fc ff29 	bl	8005088 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008236:	4e18      	ldr	r6, [pc, #96]	@ (8008298 <HAL_InitTick+0x8c>)
 8008238:	4b18      	ldr	r3, [pc, #96]	@ (800829c <HAL_InitTick+0x90>)
 800823a:	6033      	str	r3, [r6, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800823c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8008240:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008242:	4b17      	ldr	r3, [pc, #92]	@ (80082a0 <HAL_InitTick+0x94>)
 8008244:	fbb0 f3f3 	udiv	r3, r0, r3
 8008248:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800824a:	6073      	str	r3, [r6, #4]
  htim4.Init.ClockDivision = 0;
 800824c:	2300      	movs	r3, #0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim4);
 800824e:	4630      	mov	r0, r6
  htim4.Init.ClockDivision = 0;
 8008250:	6133      	str	r3, [r6, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008252:	60b3      	str	r3, [r6, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008254:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim4);
 8008256:	f7fd fc39 	bl	8005acc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800825a:	4604      	mov	r4, r0
 800825c:	b980      	cbnz	r0, 8008280 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800825e:	4630      	mov	r0, r6
 8008260:	f7fd f8a6 	bl	80053b0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8008264:	4604      	mov	r4, r0
 8008266:	b958      	cbnz	r0, 8008280 <HAL_InitTick+0x74>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008268:	201e      	movs	r0, #30
 800826a:	f7fc f8b5 	bl	80043d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800826e:	2d0f      	cmp	r5, #15
 8008270:	d80d      	bhi.n	800828e <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8008272:	4622      	mov	r2, r4
 8008274:	4629      	mov	r1, r5
 8008276:	201e      	movs	r0, #30
 8008278:	f7fc f87e 	bl	8004378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <HAL_InitTick+0x98>)
 800827e:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8008280:	4620      	mov	r0, r4
 8008282:	b008      	add	sp, #32
 8008284:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008286:	f7fc feff 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 800828a:	0040      	lsls	r0, r0, #1
 800828c:	e7d3      	b.n	8008236 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 800828e:	2401      	movs	r4, #1
 8008290:	e7f6      	b.n	8008280 <HAL_InitTick+0x74>
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000
 8008298:	200043ac 	.word	0x200043ac
 800829c:	40000800 	.word	0x40000800
 80082a0:	000f4240 	.word	0x000f4240
 80082a4:	20000018 	.word	0x20000018

080082a8 <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM4 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <HAL_SuspendTick+0x10>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68d3      	ldr	r3, [r2, #12]
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	60d3      	str	r3, [r2, #12]
}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	200043ac 	.word	0x200043ac

080082bc <NMI_Handler>:
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	EcuM_PerformReset(1, 1);
 80082bc:	2101      	movs	r1, #1
{
 80082be:	b508      	push	{r3, lr}
	EcuM_PerformReset(1, 1);
 80082c0:	4608      	mov	r0, r1
 80082c2:	f7fb f93f 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80082c6:	e7fe      	b.n	80082c6 <NMI_Handler+0xa>

080082c8 <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EcuM_PerformReset(2, 2);
 80082c8:	2102      	movs	r1, #2
{
 80082ca:	b508      	push	{r3, lr}
	EcuM_PerformReset(2, 2);
 80082cc:	4608      	mov	r0, r1
 80082ce:	f7fb f939 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082d2:	e7fe      	b.n	80082d2 <HardFault_Handler+0xa>

080082d4 <MemManage_Handler>:
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EcuM_PerformReset(3, 3);
 80082d4:	2103      	movs	r1, #3
{
 80082d6:	b508      	push	{r3, lr}
	EcuM_PerformReset(3, 3);
 80082d8:	4608      	mov	r0, r1
 80082da:	f7fb f933 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082de:	e7fe      	b.n	80082de <MemManage_Handler+0xa>

080082e0 <BusFault_Handler>:
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EcuM_PerformReset(4, 4);
 80082e0:	2104      	movs	r1, #4
{
 80082e2:	b508      	push	{r3, lr}
	EcuM_PerformReset(4, 4);
 80082e4:	4608      	mov	r0, r1
 80082e6:	f7fb f92d 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082ea:	e7fe      	b.n	80082ea <BusFault_Handler+0xa>

080082ec <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EcuM_PerformReset(5, 5);
 80082ec:	2105      	movs	r1, #5
{
 80082ee:	b508      	push	{r3, lr}
	EcuM_PerformReset(5, 5);
 80082f0:	4608      	mov	r0, r1
 80082f2:	f7fb f927 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082f6:	e7fe      	b.n	80082f6 <UsageFault_Handler+0xa>

080082f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082f8:	4770      	bx	lr

080082fa <PVD_IRQHandler>:
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */
	EcuM_PerformReset(103, 103);
 80082fa:	2167      	movs	r1, #103	@ 0x67
{
 80082fc:	b508      	push	{r3, lr}
	EcuM_PerformReset(103, 103);
 80082fe:	4608      	mov	r0, r1
 8008300:	f7fb f920 	bl	8003544 <EcuM_PerformReset>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8008304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWR_PVD_IRQHandler();
 8008308:	f7fc bc54 	b.w	8004bb4 <HAL_PWR_PVD_IRQHandler>

0800830c <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800830c:	f7fc ba1c 	b.w	8004748 <HAL_FLASH_IRQHandler>

08008310 <RCC_IRQHandler>:
}

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 8008310:	4770      	bx	lr
	...

08008314 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008314:	4801      	ldr	r0, [pc, #4]	@ (800831c <DMA1_Channel1_IRQHandler+0x8>)
 8008316:	f7fc b955 	b.w	80045c4 <HAL_DMA_IRQHandler>
 800831a:	bf00      	nop
 800831c:	20001b24 	.word	0x20001b24

08008320 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008320:	4801      	ldr	r0, [pc, #4]	@ (8008328 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8008322:	f7fb bf0e 	b.w	8004142 <HAL_CAN_IRQHandler>
 8008326:	bf00      	nop
 8008328:	20001bb4 	.word	0x20001bb4

0800832c <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 800832c:	f7ff bff8 	b.w	8008320 <USB_HP_CAN1_TX_IRQHandler>

08008330 <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 8008330:	f7ff bff6 	b.w	8008320 <USB_HP_CAN1_TX_IRQHandler>

08008334 <CAN1_SCE_IRQHandler>:
}

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
 8008334:	f7ff bff4 	b.w	8008320 <USB_HP_CAN1_TX_IRQHandler>

08008338 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <TIM1_BRK_IRQHandler+0x8>)
 800833a:	f7fd b899 	b.w	8005470 <HAL_TIM_IRQHandler>
 800833e:	bf00      	nop
 8008340:	20004514 	.word	0x20004514

08008344 <TIM1_UP_IRQHandler>:
}

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
 8008344:	f7ff bff8 	b.w	8008338 <TIM1_BRK_IRQHandler>

08008348 <TIM1_TRG_COM_IRQHandler>:
}

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 8008348:	f7ff bff6 	b.w	8008338 <TIM1_BRK_IRQHandler>

0800834c <TIM1_CC_IRQHandler>:
}

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 800834c:	f7ff bff4 	b.w	8008338 <TIM1_BRK_IRQHandler>

08008350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	EcuM_ProcessTimerInterrupt();
 8008352:	f7fb f8e7 	bl	8003524 <EcuM_ProcessTimerInterrupt>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 800835a:	4801      	ldr	r0, [pc, #4]	@ (8008360 <TIM2_IRQHandler+0x10>)
 800835c:	f7fd b888 	b.w	8005470 <HAL_TIM_IRQHandler>
 8008360:	20004460 	.word	0x20004460

08008364 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008364:	4801      	ldr	r0, [pc, #4]	@ (800836c <TIM4_IRQHandler+0x8>)
 8008366:	f7fd b883 	b.w	8005470 <HAL_TIM_IRQHandler>
 800836a:	bf00      	nop
 800836c:	200043ac 	.word	0x200043ac

08008370 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008370:	4770      	bx	lr
	...

08008374 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008376:	2210      	movs	r2, #16
 8008378:	2100      	movs	r1, #0
 800837a:	a802      	add	r0, sp, #8
 800837c:	f000 f8ee 	bl	800855c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
 8008380:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8008384:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 8008388:	4813      	ldr	r0, [pc, #76]	@ (80083d8 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800838a:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 7199;
 800838c:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
 8008390:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008394:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008398:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800839c:	6083      	str	r3, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800839e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80083a0:	f7fd fb94 	bl	8005acc <HAL_TIM_Base_Init>
 80083a4:	b108      	cbz	r0, 80083aa <MX_TIM2_Init+0x36>
  {
    Error_Handler();
 80083a6:	f7ff ff07 	bl	80081b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80083ae:	480a      	ldr	r0, [pc, #40]	@ (80083d8 <MX_TIM2_Init+0x64>)
 80083b0:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083b2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80083b4:	f7fd f9e2 	bl	800577c <HAL_TIM_ConfigClockSource>
 80083b8:	b108      	cbz	r0, 80083be <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 80083ba:	f7ff fefd 	bl	80081b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083be:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80083c0:	4669      	mov	r1, sp
 80083c2:	4805      	ldr	r0, [pc, #20]	@ (80083d8 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083c4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80083c8:	f7fd fbec 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80083cc:	b108      	cbz	r0, 80083d2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80083ce:	f7ff fef3 	bl	80081b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80083d2:	b007      	add	sp, #28
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80083d8:	20004460 	.word	0x20004460

080083dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80083dc:	6802      	ldr	r2, [r0, #0]
 80083de:	4b08      	ldr	r3, [pc, #32]	@ (8008400 <HAL_TIM_PWM_MspInit+0x24>)
{
 80083e0:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d10a      	bne.n	80083fc <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083e6:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80083ea:	699a      	ldr	r2, [r3, #24]
 80083ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f0:	619a      	str	r2, [r3, #24]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80083fc:	b002      	add	sp, #8
 80083fe:	4770      	bx	lr
 8008400:	40012c00 	.word	0x40012c00

08008404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8008404:	6803      	ldr	r3, [r0, #0]
{
 8008406:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800840c:	d10a      	bne.n	8008424 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800840e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	f042 0201 	orr.w	r2, r2, #1
 8008418:	61da      	str	r2, [r3, #28]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008424:	b002      	add	sp, #8
 8008426:	4770      	bx	lr

08008428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800842e:	2210      	movs	r2, #16
 8008430:	2100      	movs	r1, #0
 8008432:	a802      	add	r0, sp, #8
 8008434:	f000 f892 	bl	800855c <memset>
  if(timHandle->Instance==TIM1)
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <HAL_TIM_MspPostInit+0x48>)
 800843c:	429a      	cmp	r2, r3
 800843e:	d115      	bne.n	800846c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008440:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8008444:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008446:	480b      	ldr	r0, [pc, #44]	@ (8008474 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008448:	f042 0204 	orr.w	r2, r2, #4
 800844c:	619a      	str	r2, [r3, #24]
 800844e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008450:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845c:	2302      	movs	r3, #2
 800845e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008462:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008464:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008466:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008468:	f7fc fa0a 	bl	8004880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800846c:	b006      	add	sp, #24
 800846e:	bd10      	pop	{r4, pc}
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40010800 	.word	0x40010800

08008478 <MX_TIM1_Init>:
{
 8008478:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800847a:	2400      	movs	r4, #0
{
 800847c:	b092      	sub	sp, #72	@ 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 800847e:	221c      	movs	r2, #28
 8008480:	4621      	mov	r1, r4
 8008482:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008484:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008488:	f000 f868 	bl	800855c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800848c:	2220      	movs	r2, #32
 800848e:	4621      	mov	r1, r4
 8008490:	a80a      	add	r0, sp, #40	@ 0x28
 8008492:	f000 f863 	bl	800855c <memset>
  htim1.Init.Prescaler = 1;
 8008496:	2301      	movs	r3, #1
  htim1.Instance = TIM1;
 8008498:	481f      	ldr	r0, [pc, #124]	@ (8008518 <MX_TIM1_Init+0xa0>)
  htim1.Init.Prescaler = 1;
 800849a:	4a20      	ldr	r2, [pc, #128]	@ (800851c <MX_TIM1_Init+0xa4>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800849c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.Prescaler = 1;
 80084a0:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 513;
 80084a4:	f240 2301 	movw	r3, #513	@ 0x201
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084a8:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084aa:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80084ae:	f7fd fb43 	bl	8005b38 <HAL_TIM_PWM_Init>
 80084b2:	b108      	cbz	r0, 80084b8 <MX_TIM1_Init+0x40>
    Error_Handler();
 80084b4:	f7ff fe80 	bl	80081b8 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084b8:	4817      	ldr	r0, [pc, #92]	@ (8008518 <MX_TIM1_Init+0xa0>)
 80084ba:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084c0:	f7fd fb70 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80084c4:	b108      	cbz	r0, 80084ca <MX_TIM1_Init+0x52>
    Error_Handler();
 80084c6:	f7ff fe77 	bl	80081b8 <Error_Handler>
  sConfigOC.Pulse = 0;
 80084ca:	2400      	movs	r4, #0
 80084cc:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084ce:	4622      	mov	r2, r4
 80084d0:	4811      	ldr	r0, [pc, #68]	@ (8008518 <MX_TIM1_Init+0xa0>)
 80084d2:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 80084d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084e0:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084e2:	f7fd f8dd 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 80084e6:	b108      	cbz	r0, 80084ec <MX_TIM1_Init+0x74>
    Error_Handler();
 80084e8:	f7ff fe66 	bl	80081b8 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80084ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80084f0:	4809      	ldr	r0, [pc, #36]	@ (8008518 <MX_TIM1_Init+0xa0>)
 80084f2:	a90a      	add	r1, sp, #40	@ 0x28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80084f4:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 80084f8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80084fc:	940e      	str	r4, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80084fe:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008500:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008502:	f7fd fb81 	bl	8005c08 <HAL_TIMEx_ConfigBreakDeadTime>
 8008506:	b108      	cbz	r0, 800850c <MX_TIM1_Init+0x94>
    Error_Handler();
 8008508:	f7ff fe56 	bl	80081b8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800850c:	4802      	ldr	r0, [pc, #8]	@ (8008518 <MX_TIM1_Init+0xa0>)
 800850e:	f7ff ff8b 	bl	8008428 <HAL_TIM_MspPostInit>
}
 8008512:	b012      	add	sp, #72	@ 0x48
 8008514:	bd10      	pop	{r4, pc}
 8008516:	bf00      	nop
 8008518:	20004514 	.word	0x20004514
 800851c:	40012c00 	.word	0x40012c00

08008520 <HAL_TIM_PWM_MspDeInit>:

void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008520:	b508      	push	{r3, lr}

  if(tim_pwmHandle->Instance==TIM1)
 8008522:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <HAL_TIM_PWM_MspDeInit+0x34>)
 8008524:	6802      	ldr	r2, [r0, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d112      	bne.n	8008550 <HAL_TIM_PWM_MspDeInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800852a:	4a0b      	ldr	r2, [pc, #44]	@ (8008558 <HAL_TIM_PWM_MspDeInit+0x38>)

    /* TIM1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM1_BRK_IRQn);
 800852c:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_DISABLE();
 800852e:	6993      	ldr	r3, [r2, #24]
 8008530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008534:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_BRK_IRQn);
 8008536:	f7fb ff5d 	bl	80043f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 800853a:	2019      	movs	r0, #25
 800853c:	f7fb ff5a 	bl	80043f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_IRQn);
 8008540:	201a      	movs	r0, #26
 8008542:	f7fb ff57 	bl	80043f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
}
 8008546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 800854a:	201b      	movs	r0, #27
 800854c:	f7fb bf52 	b.w	80043f4 <HAL_NVIC_DisableIRQ>
}
 8008550:	bd08      	pop	{r3, pc}
 8008552:	bf00      	nop
 8008554:	40012c00 	.word	0x40012c00
 8008558:	40021000 	.word	0x40021000

0800855c <memset>:
 800855c:	4603      	mov	r3, r0
 800855e:	4402      	add	r2, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	2600      	movs	r6, #0
 8008570:	4d0c      	ldr	r5, [pc, #48]	@ (80085a4 <__libc_init_array+0x38>)
 8008572:	4c0d      	ldr	r4, [pc, #52]	@ (80085a8 <__libc_init_array+0x3c>)
 8008574:	1b64      	subs	r4, r4, r5
 8008576:	10a4      	asrs	r4, r4, #2
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	f000 f828 	bl	80085d0 <_init>
 8008580:	2600      	movs	r6, #0
 8008582:	4d0a      	ldr	r5, [pc, #40]	@ (80085ac <__libc_init_array+0x40>)
 8008584:	4c0a      	ldr	r4, [pc, #40]	@ (80085b0 <__libc_init_array+0x44>)
 8008586:	1b64      	subs	r4, r4, r5
 8008588:	10a4      	asrs	r4, r4, #2
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	080086d0 	.word	0x080086d0
 80085a8:	080086d0 	.word	0x080086d0
 80085ac:	080086d0 	.word	0x080086d0
 80085b0:	080086d4 	.word	0x080086d4

080085b4 <memcpy>:
 80085b4:	440a      	add	r2, r1
 80085b6:	4291      	cmp	r1, r2
 80085b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085bc:	d100      	bne.n	80085c0 <memcpy+0xc>
 80085be:	4770      	bx	lr
 80085c0:	b510      	push	{r4, lr}
 80085c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085cc:	d1f9      	bne.n	80085c2 <memcpy+0xe>
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <_init>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr

080085dc <_fini>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr
