/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "SMon.h"
#include "Dcm.h"
#include "EcuM.h"
#include "CanH.h"
#include "adc.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticTask_t osStaticThreadDef_t;
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
long long oscnt;
long long idlecnt;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for QM_BSW */
osThreadId_t QM_BSWHandle;
uint32_t QM_BSWBuffer[ 512 ];
osStaticThreadDef_t QM_BSWControlBlock;
const osThreadAttr_t QM_BSW_attributes = {
  .name = "QM_BSW",
  .cb_mem = &QM_BSWControlBlock,
  .cb_size = sizeof(QM_BSWControlBlock),
  .stack_mem = &QM_BSWBuffer[0],
  .stack_size = sizeof(QM_BSWBuffer),
  .priority = (osPriority_t) osPriorityHigh5,
};
/* Definitions for QM_APPL */
osThreadId_t QM_APPLHandle;
uint32_t QM_APPLBuffer[ 512 ];
osStaticThreadDef_t QM_APPLControlBlock;
const osThreadAttr_t QM_APPL_attributes = {
  .name = "QM_APPL",
  .cb_mem = &QM_APPLControlBlock,
  .cb_size = sizeof(QM_APPLControlBlock),
  .stack_mem = &QM_APPLBuffer[0],
  .stack_size = sizeof(QM_APPLBuffer),
  .priority = (osPriority_t) osPriorityHigh6,
};
/* Definitions for QM_DIAG */
osThreadId_t QM_DIAGHandle;
uint32_t QM_DIAGBuffer[ 512 ];
osStaticThreadDef_t QM_DIAGControlBlock;
const osThreadAttr_t QM_DIAG_attributes = {
  .name = "QM_DIAG",
  .cb_mem = &QM_DIAGControlBlock,
  .cb_size = sizeof(QM_DIAGControlBlock),
  .stack_mem = &QM_DIAGBuffer[0],
  .stack_size = sizeof(QM_DIAGBuffer),
  .priority = (osPriority_t) osPriorityBelowNormal,
};
/* Definitions for QM_ADC_DMA */
osThreadId_t QM_ADC_DMAHandle;
const osThreadAttr_t QM_ADC_DMA_attributes = {
  .name = "QM_ADC_DMA",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for Alarm5ms */
osTimerId_t Alarm5msHandle;
const osTimerAttr_t Alarm5ms_attributes = {
  .name = "Alarm5ms"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
extern void EcuM_PerformReset(uint8_t reason, uint8_t info);
/* USER CODE END FunctionPrototypes */

void QM_BSW_TASK(void *argument);
void QM_APPL_TASK(void *argument);
void QM_DIAG_TASK(void *argument);
void QM_ADC_DMA_Start_Task(void *argument);
void Alarm5ms_Callback(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void vApplicationIdleHook(void);
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
	idlecnt++;
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 0u);
}
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
extern uint16_t Ain_DmaBuffer[4u];
void vApplicationTickHook( void )
{
	oscnt++;
}
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
	EcuM_PerformReset(203, 203);
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
	EcuM_PerformReset(204, 204);
}
/* USER CODE END 5 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Alarm5ms */
  Alarm5msHandle = osTimerNew(Alarm5ms_Callback, osTimerPeriodic, NULL, &Alarm5ms_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_BSW */
  QM_BSWHandle = osThreadNew(QM_BSW_TASK, NULL, &QM_BSW_attributes);

  /* creation of QM_APPL */
  QM_APPLHandle = osThreadNew(QM_APPL_TASK, NULL, &QM_APPL_attributes);

  /* creation of QM_DIAG */
  QM_DIAGHandle = osThreadNew(QM_DIAG_TASK, NULL, &QM_DIAG_attributes);

  /* creation of QM_ADC_DMA */
  QM_ADC_DMAHandle = osThreadNew(QM_ADC_DMA_Start_Task, NULL, &QM_ADC_DMA_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
	osTimerStart(Alarm5msHandle, 5);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_QM_BSW_TASK */
/* USER CODE END Header_QM_BSW_TASK */
void QM_BSW_TASK(void *argument)
{
  /* USER CODE BEGIN QM_BSW_TASK */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
		CanH_MainFunction();
		EcuM_main();
		vTaskSuspend(NULL);
	}
  /* USER CODE END QM_BSW_TASK */
}

/* USER CODE BEGIN Header_QM_APPL_TASK */
/**
 * @brief Function implementing the QM_APPL thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_QM_APPL_TASK */
void QM_APPL_TASK(void *argument)
{
  /* USER CODE BEGIN QM_APPL_TASK */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
		HAL_GPIO_WritePin(SMON_RUNTIME_MEAS_GPIO_Port, SMON_RUNTIME_MEAS_Pin, 1u);
		SMon_main();
		HAL_GPIO_WritePin(SMON_RUNTIME_MEAS_GPIO_Port, SMON_RUNTIME_MEAS_Pin, 0u);
		vTaskSuspend(NULL);
	}
  /* USER CODE END QM_APPL_TASK */
}

/* USER CODE BEGIN Header_QM_DIAG_TASK */
/**
* @brief Function implementing the QM_DIAG thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QM_DIAG_TASK */
void QM_DIAG_TASK(void *argument)
{
  /* USER CODE BEGIN QM_DIAG_TASK */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
	  Dcm_main();
	  vTaskSuspend(NULL);
  }
  /* USER CODE END QM_DIAG_TASK */
}

/* USER CODE BEGIN Header_QM_ADC_DMA_Start_Task */
/**
* @brief Function implementing the QM_ADC_DMA thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QM_ADC_DMA_Start_Task */
void QM_ADC_DMA_Start_Task(void *argument)
{
  /* USER CODE BEGIN QM_ADC_DMA_Start_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Ain_DmaBuffer, 4u);
  }
  /* USER CODE END QM_ADC_DMA_Start_Task */
}

/* Alarm5ms_Callback function */
void Alarm5ms_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_Callback */
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Ain_DmaBuffer, 4u);
	vTaskResume(QM_APPLHandle);
	vTaskResume(QM_BSWHandle);
	vTaskResume(QM_DIAGHandle);
  /* USER CODE END Alarm5ms_Callback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

