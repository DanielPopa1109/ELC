/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "adc.h"
#include "can.h"
#include "dma.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdlib.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t Ain_DmaBuffer[5u];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
extern uint32_t Dcm_ActiveSessionState __attribute((section(".ncr")));
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t SMon_CmdStat; // Command Status
extern float SMon_ISenseL1_Float;
extern uint32_t SMon_ISenseL1; // I Sense L1
extern uint16_t SMon_VfbL1; // Voltage Feedback L1/CLS
extern uint16_t SMon_VfbT30; // Voltage Feedback KL30
extern uint8_t SMon_ValidMeasFlag; // ADC valid measurement
volatile float v0 = 0.0f;
volatile float v1 = 0.0f;
volatile float v2 = 0.0f;
volatile float v3 = 0.0f;
static volatile float filt_current_mA = 0.0f;
static float filt_vfb1_mV = 0.0f;
static float filt_vfb2_mV = 0.0f;
static float vfb1_mV = 0.0f;
static float vfb2_mV = 0.0f;
float RSense = 10.0f;
float KOffset = 17.0f;
float KFactor = 1.116f;

uint16_t cnt;
float s0;
float s1;
float a0;
float a1;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	v0 = ((float)Ain_DmaBuffer[2u] / 4095.0f) * 3300.0f;
	v1 = ((float)Ain_DmaBuffer[1u] / 4095.0f) * 3300.0f;
	v2 = ((float)Ain_DmaBuffer[3u] / 4095.0f) * 3300.0f;
	v3 = ((float)Ain_DmaBuffer[0u] / 4095.0f) * 3300.0f;

	vfb1_mV = v2 * ((91.0f + 10.0f) / 10.0f);
	vfb2_mV = v3 * ((91.0f + 10.0f) / 10.0f);
	vfb1_mV -= 100.0f;
	vfb2_mV += 100.0f;

	filt_vfb1_mV = filt_vfb1_mV + 0.1f * (vfb1_mV - filt_vfb1_mV);
	filt_vfb2_mV = filt_vfb2_mV + 0.1f * (vfb2_mV - filt_vfb2_mV);

//	a0 = v0 * ((91.0f + 10.0f) / 10.0f);
//	a1 = v1 * ((91.0f + 10.0f) / 10.0f);

	filt_current_mA = ((v0 - v1) / 0.010f);

	SMon_ISenseL1_Float = filt_current_mA / 1000u;
	SMon_ISenseL1 = filt_current_mA;
	SMon_VfbL1 = filt_vfb1_mV;
	SMon_VfbT30 = filt_vfb2_mV;
	SMon_ValidMeasFlag = 1u;
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	if(0u != hadc->ErrorCode)
	{
		SMon_ISenseL1 = 0xFFFFu;
		SMon_VfbL1 = 0xFFFFu;
		SMon_VfbT30 = 0xFFFFu;
		SMon_ValidMeasFlag = 0u;
	}
	else
	{
		/* Do nothing. */
	}
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	HAL_GPIO_WritePin(ALL_RUNTIME_MEAS_GPIO_Port, ALL_RUNTIME_MEAS_Pin, 1u);
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */
	__enable_irq(); // manually enable interrupts
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_ADC1_Init();
	MX_TIM1_Init();
	MX_CAN_Init();
	MX_TIM2_Init();

	/* Initialize interrupts */
	MX_NVIC_Init();
	/* USER CODE BEGIN 2 */
	if(((RCC->CSR & RCC_CSR_PORRSTF) != 0)
			|| ((RCC->CSR & RCC_CSR_PINRSTF) != 0)
			|| ((RCC->CSR & RCC_CSR_LPWRRSTF) != 0))
	{
		Dcm_ActiveSessionState = 0u;
		RCC->CSR |= RCC_CSR_PORRSTF;
		RCC->CSR |= RCC_CSR_PINRSTF;
		RCC->CSR |= RCC_CSR_LPWRRSTF;
		RCC->CSR |= RCC_CSR_RMVF;
	}
	else
	{
		/* Do nothing. */
	}
	HAL_ADC_Stop(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_Delay(1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Ain_DmaBuffer, 5u);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();

	/* Start scheduler */
	osKernelStart();

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
	/* USB_HP_CAN1_TX_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
	/* USB_LP_CAN1_RX0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
	/* CAN1_RX1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
	/* CAN1_SCE_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(RCC_IRQn);
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(PVD_IRQn);
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	/* TIM1_CC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
	/* TIM1_TRG_COM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
	/* TIM1_UP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
	/* TIM1_BRK_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  Period elapsed callback in non blocking mode
 * @note   This function is called  when TIM4 interrupt took place, inside
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
