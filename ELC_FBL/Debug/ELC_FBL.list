
ELC_FBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e60  08001e60  00002e60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e84  08001e84  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001e84  08001e84  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e84  08001e84  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e84  08001e84  00002e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e88  08001e88  00002e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001e8c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000018  08001ea4  00003018  2**3
                  ALLOC
 10 ._user_heap_stack 00000200  200000f0  08001ea4  000030f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d50  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002224  00000000  00000000  0000ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00001d2a  00000000  00000000  0000cfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  0000ecdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073d  00000000  00000000  0000f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016796  00000000  00000000  0000faec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b021  00000000  00000000  00026282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f5c0  00000000  00000000  000312a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b0863  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f44  00000000  00000000  000b08a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e48 	.word	0x08001e48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001e48 	.word	0x08001e48

0800014c <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800014c:	f240 0034 	movw	r0, #52	@ 0x34
 8000150:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8000154:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000158:	f2c4 0300 	movt	r3, #16384	@ 0x4000
{
 800015c:	b510      	push	{r4, lr}
  hcan.Init.Prescaler = 6;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015e:	2400      	movs	r4, #0
  hcan.Instance = CAN1;
 8000160:	6003      	str	r3, [r0, #0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000162:	2306      	movs	r3, #6
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000164:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000168:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 800016c:	f44f 03a0 	mov.w	r3, #5242880	@ 0x500000
 8000170:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000174:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8000178:	b08a      	sub	sp, #40	@ 0x28
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017a:	f2c0 1301 	movt	r3, #257	@ 0x101
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800017e:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000180:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
  hcan.Init.AutoWakeUp = ENABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000182:	8384      	strh	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000184:	f000 fcf2 	bl	8000b6c <HAL_CAN_Init>
 8000188:	b108      	cbz	r0, 800018e <MX_CAN_Init+0x42>
  {
    Error_Handler();
 800018a:	f000 fc3e 	bl	8000a0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 13;
 800018e:	230d      	movs	r3, #13
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000190:	e9cd 3405 	strd	r3, r4, [sp, #20]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000194:	2301      	movs	r3, #1
 8000196:	9307      	str	r3, [sp, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	filterConfig.FilterActivation = ENABLE;
 8000198:	9308      	str	r3, [sp, #32]
	filterConfig.FilterIdHigh = (0x702 << 5) & 0xFFFF;
 800019a:	f24e 0340 	movw	r3, #57408	@ 0xe040
	//filterConfig.FilterIdHigh = 0;
	filterConfig.FilterIdLow = 0x0000;
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
	filterConfig.FilterMaskIdLow = 0x0000;
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 800019e:	f240 0034 	movw	r0, #52	@ 0x34
	filterConfig.FilterIdLow = 0x0000;
 80001a2:	e9cd 3400 	strd	r3, r4, [sp]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 80001a6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80001aa:	4669      	mov	r1, sp
 80001ac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
	filterConfig.FilterMaskIdLow = 0x0000;
 80001b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001b4:	9404      	str	r4, [sp, #16]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80001b6:	f000 fd5a 	bl	8000c6e <HAL_CAN_ConfigFilter>
	static uint32_t notificationLocal = 0;
	HAL_CAN_Start(&hcan);
 80001ba:	f240 0034 	movw	r0, #52	@ 0x34
 80001be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80001c2:	f000 fdcb 	bl	8000d5c <HAL_CAN_Start>
	notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL;
	HAL_CAN_ActivateNotification(&hcan, notificationLocal);
 80001c6:	f240 0034 	movw	r0, #52	@ 0x34
 80001ca:	2106      	movs	r1, #6
 80001cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80001d0:	f000 fee9 	bl	8000fa6 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 80001d4:	b00a      	add	sp, #40	@ 0x28
 80001d6:	bd10      	pop	{r4, pc}

080001d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001d8:	b510      	push	{r4, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	2210      	movs	r2, #16
 80001e0:	2100      	movs	r1, #0
 80001e2:	a802      	add	r0, sp, #8
 80001e4:	f001 fe03 	bl	8001dee <memset>
  if(canHandle->Instance==CAN1)
 80001e8:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80001ec:	6822      	ldr	r2, [r4, #0]
 80001ee:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d12f      	bne.n	8000256 <HAL_CAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001fa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80001fe:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000200:	f44f 6000 	mov.w	r0, #2048	@ 0x800
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000204:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000208:	61da      	str	r2, [r3, #28]
 800020a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800020e:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000212:	9200      	str	r2, [sp, #0]
 8000214:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000216:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000218:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021c:	f042 0204 	orr.w	r2, r2, #4
 8000220:	619a      	str	r2, [r3, #24]
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0304 	and.w	r3, r3, #4
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800022c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000230:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000232:	2301      	movs	r3, #1
 8000234:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	f001 fa27 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800023a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800023e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	f44f 6000 	mov.w	r0, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000244:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000248:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024a:	a902      	add	r1, sp, #8
 800024c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000250:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000252:	f001 fa19 	bl	8001688 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000256:	b006      	add	sp, #24
 8000258:	bd10      	pop	{r4, pc}

0800025a <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	2210      	movs	r2, #16
{
 800025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000260:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	eb0d 0002 	add.w	r0, sp, r2
 8000266:	2100      	movs	r1, #0
 8000268:	f001 fdc1 	bl	8001dee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 8000270:	f44f 6640 	mov.w	r6, #3072	@ 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000274:	f2c4 0302 	movt	r3, #16386	@ 0x4002

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000278:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 800027e:	f2c4 0601 	movt	r6, #16385	@ 0x4001
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000282:	f042 0210 	orr.w	r2, r2, #16
 8000286:	619a      	str	r2, [r3, #24]
 8000288:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800028a:	f2c4 0501 	movt	r5, #16385	@ 0x4001
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	f002 0210 	and.w	r2, r2, #16
 8000292:	9200      	str	r2, [sp, #0]
 8000294:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000296:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 8000298:	4630      	mov	r0, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800029a:	f042 0220 	orr.w	r2, r2, #32
 800029e:	619a      	str	r2, [r3, #24]
 80002a0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 80002a2:	f640 0102 	movw	r1, #2050	@ 0x802
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a6:	f002 0220 	and.w	r2, r2, #32
 80002aa:	9201      	str	r2, [sp, #4]
 80002ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2403      	movs	r4, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	f042 0204 	orr.w	r2, r2, #4
 80002b6:	619a      	str	r2, [r3, #24]
 80002b8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	f002 0204 	and.w	r2, r2, #4
 80002c2:	9202      	str	r2, [sp, #8]
 80002c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002c8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	f042 0208 	orr.w	r2, r2, #8
 80002ce:	619a      	str	r2, [r3, #24]
 80002d0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	f003 0308 	and.w	r3, r3, #8
 80002d8:	9303      	str	r3, [sp, #12]
 80002da:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 80002dc:	f001 faf2 	bl	80018c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	4628      	mov	r0, r5
 80002e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002e8:	f001 faec 	bl	80018c4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f4:	a904      	add	r1, sp, #16
 80002f6:	f2c4 0001 	movt	r0, #16385	@ 0x4001
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002fe:	f001 f9c3 	bl	8001688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000302:	f248 63ff 	movw	r3, #34559	@ 0x86ff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	4628      	mov	r0, r5
 8000308:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800030a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030e:	f001 f9bb 	bl	8001688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000312:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000316:	4630      	mov	r0, r6
 8000318:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800031a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f001 f9b3 	bl	8001688 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	f640 0302 	movw	r3, #2050	@ 0x802
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	4630      	mov	r0, r6
 8000328:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800032e:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000332:	f001 f9a9 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000336:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	4628      	mov	r0, r5
 800033c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000342:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	f001 f99f 	bl	8001688 <HAL_GPIO_Init>

}
 800034a:	b008      	add	sp, #32
 800034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	2414      	movs	r4, #20
{
 8000354:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	4622      	mov	r2, r4
 8000358:	2100      	movs	r1, #0
 800035a:	a808      	add	r0, sp, #32
 800035c:	f001 fd47 	bl	8001dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	4622      	mov	r2, r4
 8000362:	2100      	movs	r1, #0
 8000364:	a801      	add	r0, sp, #4
 8000366:	f001 fd42 	bl	8001dee <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000372:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000376:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000382:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	f001 fab2 	bl	80018ec <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	4621      	mov	r1, r4
 8000396:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	f001 fc79 	bl	8001c94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80003a2:	b010      	add	sp, #64	@ 0x40
 80003a4:	bd10      	pop	{r4, pc}

080003a6 <Nvm_GetPage>:
	HAL_FLASH_Lock();
	return 0;
}
uint32 Nvm_GetPage(uint32 Address)
{
	for (uint8 indx=0; indx < 128; indx++) if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx + 1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) return (0x08000000 + FLASH_PAGE_SIZE * indx);
 80003a6:	2100      	movs	r1, #0
{
 80003a8:	4602      	mov	r2, r0
 80003aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
	for (uint8 indx=0; indx < 128; indx++) if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx + 1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) return (0x08000000 + FLASH_PAGE_SIZE * indx);
 80003ae:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80003b2:	4618      	mov	r0, r3
 80003b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d201      	bcs.n	80003c0 <Nvm_GetPage+0x1a>
 80003bc:	4282      	cmp	r2, r0
 80003be:	d202      	bcs.n	80003c6 <Nvm_GetPage+0x20>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d1f6      	bne.n	80003b2 <Nvm_GetPage+0xc>
	return 0;
 80003c4:	2000      	movs	r0, #0
}
 80003c6:	4770      	bx	lr

080003c8 <FBL_NvM_EraseFlash_APPL>:
{
 80003c8:	b513      	push	{r0, r1, r4, lr}
	uint32 EndPage = Nvm_GetPage(EndPageAdress);
 80003ca:	f64d 30ff 	movw	r0, #56319	@ 0xdbff
 80003ce:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80003d2:	f7ff ffe8 	bl	80003a6 <Nvm_GetPage>
 80003d6:	4604      	mov	r4, r0
	HAL_FLASH_Unlock();
 80003d8:	f001 f848 	bl	800146c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80003dc:	f240 005c 	movw	r0, #92	@ 0x5c
 80003e0:	2300      	movs	r3, #0
 80003e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80003e6:	6003      	str	r3, [r0, #0]
	EraseInitStruct.PageAddress = StartPage;
 80003e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ec:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80003f0:	6083      	str	r3, [r0, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80003f2:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 80003f6:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80003fa:	0a9b      	lsrs	r3, r3, #10
 80003fc:	3301      	adds	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80003fe:	a901      	add	r1, sp, #4
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000400:	60c3      	str	r3, [r0, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000402:	f001 f8e9 	bl	80015d8 <HAL_FLASHEx_Erase>
 8000406:	4604      	mov	r4, r0
 8000408:	b118      	cbz	r0, 8000412 <FBL_NvM_EraseFlash_APPL+0x4a>
		return HAL_FLASH_GetError ();
 800040a:	f001 f84f 	bl	80014ac <HAL_FLASH_GetError>
}
 800040e:	b002      	add	sp, #8
 8000410:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 8000412:	f001 f841 	bl	8001498 <HAL_FLASH_Lock>
	return 0;
 8000416:	4620      	mov	r0, r4
 8000418:	e7f9      	b.n	800040e <FBL_NvM_EraseFlash_APPL+0x46>

0800041a <FBL_NvM_FlashWriteData>:
uint32 FBL_NvM_FlashWriteData(uint32 StartPageAddress, uint32 *Data, uint16 numberofwords)
{
 800041a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041c:	4606      	mov	r6, r0
 800041e:	460f      	mov	r7, r1
 8000420:	4615      	mov	r5, r2
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
	__disable_irq();
	uint32 sofar=0;
	HAL_FLASH_Unlock();
 8000424:	f001 f822 	bl	800146c <HAL_FLASH_Unlock>
	uint32 sofar=0;
 8000428:	2400      	movs	r4, #0
	while (sofar<numberofwords)
 800042a:	42a5      	cmp	r5, r4
 800042c:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8000430:	d804      	bhi.n	800043c <FBL_NvM_FlashWriteData+0x22>
		else
		{
			return HAL_FLASH_GetError ();
		}
	}
	HAL_FLASH_Lock();
 8000432:	f001 f831 	bl	8001498 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000436:	b662      	cpsie	i
	__enable_irq();
	return 0;
}
 8000438:	2000      	movs	r0, #0
 800043a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800043c:	2300      	movs	r3, #0
 800043e:	2002      	movs	r0, #2
 8000440:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8000444:	f001 f862 	bl	800150c <HAL_FLASH_Program>
 8000448:	b908      	cbnz	r0, 800044e <FBL_NvM_FlashWriteData+0x34>
			sofar++;
 800044a:	3401      	adds	r4, #1
 800044c:	e7ed      	b.n	800042a <FBL_NvM_FlashWriteData+0x10>
}
 800044e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return HAL_FLASH_GetError ();
 8000452:	f001 b82b 	b.w	80014ac <HAL_FLASH_GetError>

08000456 <FBL_NvM_FlashReadData>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000456:	b672      	cpsid	i
void FBL_NvM_FlashReadData(uint32 StartPageAddress, uint32 *RxBuf, uint16 numberofwords)
{
	__disable_irq();
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartPageAddress + (i * 4));
 8000458:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800045c:	1a40      	subs	r0, r0, r1
 800045e:	4291      	cmp	r1, r2
 8000460:	d101      	bne.n	8000466 <FBL_NvM_FlashReadData+0x10>
  __ASM volatile ("cpsie i" : : : "memory");
 8000462:	b662      	cpsie	i
	__enable_irq();
}
 8000464:	4770      	bx	lr
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartPageAddress + (i * 4));
 8000466:	5843      	ldr	r3, [r0, r1]
 8000468:	f841 3b04 	str.w	r3, [r1], #4
 800046c:	e7f7      	b.n	800045e <FBL_NvM_FlashReadData+0x8>

0800046e <FBL_DiagService_DSC_RequestDownload>:

void FBL_DiagService_DSC_RequestDownload(void)
{
 800046e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000472:	f240 049c 	movw	r4, #156	@ 0x9c
 8000476:	f240 0584 	movw	r5, #132	@ 0x84
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
	FBL_TxFrame[0] = FBL_RxFrame[0];
 800047a:	f240 07c0 	movw	r7, #192	@ 0xc0
 800047e:	f240 06b8 	movw	r6, #184	@ 0xb8
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
	FBL_TxFrame[2] = FBL_RxFrame[2];
	FBL_TxFrame[3] = FBL_RxFrame[3];
	FBL_TxFrame[4] = FBL_RxFrame[4];
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000482:	f240 0880 	movw	r8, #128	@ 0x80
 8000486:	f240 0034 	movw	r0, #52	@ 0x34
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800048a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800048e:	6923      	ldr	r3, [r4, #16]
 8000490:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8000494:	612b      	str	r3, [r5, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000496:	6823      	ldr	r3, [r4, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000498:	f2c2 0700 	movt	r7, #8192	@ 0x2000
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 800049c:	3301      	adds	r3, #1
 800049e:	602b      	str	r3, [r5, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 80004a0:	783b      	ldrb	r3, [r7, #0]
 80004a2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80004a6:	7033      	strb	r3, [r6, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80004a8:	787b      	ldrb	r3, [r7, #1]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80004aa:	f2c2 0800 	movt	r8, #8192	@ 0x2000
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80004ae:	3340      	adds	r3, #64	@ 0x40
 80004b0:	7073      	strb	r3, [r6, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 80004b2:	78bb      	ldrb	r3, [r7, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80004b4:	4632      	mov	r2, r6
	FBL_TxFrame[2] = FBL_RxFrame[2];
 80004b6:	70b3      	strb	r3, [r6, #2]
	FBL_TxFrame[3] = FBL_RxFrame[3];
 80004b8:	78fb      	ldrb	r3, [r7, #3]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80004ba:	4629      	mov	r1, r5
	FBL_TxFrame[3] = FBL_RxFrame[3];
 80004bc:	70f3      	strb	r3, [r6, #3]
	FBL_TxFrame[4] = FBL_RxFrame[4];
 80004be:	793b      	ldrb	r3, [r7, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80004c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
	FBL_TxFrame[4] = FBL_RxFrame[4];
 80004c4:	7133      	strb	r3, [r6, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80004c6:	4643      	mov	r3, r8
 80004c8:	f000 fc73 	bl	8000db2 <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80004cc:	2000      	movs	r0, #0
	FBL_TxHeader.DLC = 0;
	FBL_TxHeader.ExtId = 0;
	FBL_TxHeader.IDE = 0;
 80004ce:	e9c5 0001 	strd	r0, r0, [r5, #4]
	FBL_RxHeader.StdId = 0;
	FBL_RxHeader.DLC = 0;
	FBL_RxHeader.ExtId = 0;
	FBL_RxHeader.FilterMatchIndex = 0;
	FBL_RxHeader.IDE = 0;
	FBL_RxHeader.RTR = 0;
 80004d2:	e9c4 0002 	strd	r0, r0, [r4, #8]
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80004d6:	6030      	str	r0, [r6, #0]
 80004d8:	6070      	str	r0, [r6, #4]
	FBL_TxHeader.DLC = 0;
 80004da:	6128      	str	r0, [r5, #16]
	FBL_TxHeader.RTR = 0;
 80004dc:	60e8      	str	r0, [r5, #12]
	FBL_TxHeader.StdId = 0;
 80004de:	6028      	str	r0, [r5, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 80004e0:	7528      	strb	r0, [r5, #20]
	FBL_TxMailbox = 0;
 80004e2:	f8c8 0000 	str.w	r0, [r8]
	FBL_RxHeader.StdId = 0;
 80004e6:	6020      	str	r0, [r4, #0]
	FBL_RxHeader.DLC = 0;
 80004e8:	6120      	str	r0, [r4, #16]
	FBL_RxHeader.ExtId = 0;
 80004ea:	6060      	str	r0, [r4, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 80004ec:	61a0      	str	r0, [r4, #24]
	FBL_RxHeader.Timestamp = 0;
 80004ee:	6160      	str	r0, [r4, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 80004f0:	6038      	str	r0, [r7, #0]
 80004f2:	6078      	str	r0, [r7, #4]
}
 80004f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004f8 <FBL_DiagService_DSC_TransferData>:
void FBL_DiagService_DSC_TransferData(void)
{
	if(PROGRAMMING == FBL_DSC_State)
 80004f8:	f240 0304 	movw	r3, #4
{
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000500:	f240 06c0 	movw	r6, #192	@ 0xc0
 8000504:	f240 0584 	movw	r5, #132	@ 0x84
 8000508:	f240 049c 	movw	r4, #156	@ 0x9c
 800050c:	f240 07b8 	movw	r7, #184	@ 0xb8
	if(PROGRAMMING == FBL_DSC_State)
 8000510:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800051a:	2b02      	cmp	r3, #2
 800051c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8000520:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8000524:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8000528:	d133      	bne.n	8000592 <FBL_DiagService_DSC_TransferData+0x9a>
	{
		FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 800052a:	f240 0874 	movw	r8, #116	@ 0x74
		FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
 800052e:	f240 017c 	movw	r1, #124	@ 0x7c
 8000532:	f8d6 3003 	ldr.w	r3, [r6, #3]
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8000536:	f2c2 0800 	movt	r8, #8192	@ 0x2000
		FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
 800053a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	f8d8 0000 	ldr.w	r0, [r8]
		FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
 8000544:	600b      	str	r3, [r1, #0]
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8000546:	f7ff ff68 	bl	800041a <FBL_NvM_FlashWriteData>
		FBL_ProgrammingAddress += 4;
 800054a:	f8d8 3000 	ldr.w	r3, [r8]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
		FBL_TxFrame[0] = FBL_RxFrame[0];
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
		FBL_TxFrame[2] = FBL_RxFrame[2];
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800054e:	f240 0034 	movw	r0, #52	@ 0x34
		FBL_ProgrammingAddress += 4;
 8000552:	3304      	adds	r3, #4
 8000554:	f8c8 3000 	str.w	r3, [r8]
		FBL_ProgrammingIndex += 1;
 8000558:	f240 0378 	movw	r3, #120	@ 0x78
 800055c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000560:	681a      	ldr	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000562:	4629      	mov	r1, r5
		FBL_ProgrammingIndex += 1;
 8000564:	3201      	adds	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000568:	6923      	ldr	r3, [r4, #16]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800056a:	463a      	mov	r2, r7
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800056c:	612b      	str	r3, [r5, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 800056e:	6823      	ldr	r3, [r4, #0]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000570:	f2c2 0000 	movt	r0, #8192	@ 0x2000
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000574:	3301      	adds	r3, #1
 8000576:	602b      	str	r3, [r5, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 8000578:	7833      	ldrb	r3, [r6, #0]
 800057a:	703b      	strb	r3, [r7, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 800057c:	7873      	ldrb	r3, [r6, #1]
 800057e:	3340      	adds	r3, #64	@ 0x40
 8000580:	707b      	strb	r3, [r7, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 8000582:	78b3      	ldrb	r3, [r6, #2]
 8000584:	70bb      	strb	r3, [r7, #2]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000586:	f240 0380 	movw	r3, #128	@ 0x80
 800058a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800058e:	f000 fc10 	bl	8000db2 <HAL_CAN_AddTxMessage>
	}
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000592:	2300      	movs	r3, #0
	FBL_TxHeader.ExtId = 0;
	FBL_TxHeader.IDE = 0;
	FBL_TxHeader.RTR = 0;
	FBL_TxHeader.StdId = 0;
	FBL_TxHeader.TransmitGlobalTime = 0;
	FBL_TxMailbox = 0;
 8000594:	f240 0280 	movw	r2, #128	@ 0x80
	FBL_TxHeader.IDE = 0;
 8000598:	e9c5 3301 	strd	r3, r3, [r5, #4]
	FBL_RxHeader.StdId = 0;
	FBL_RxHeader.DLC = 0;
	FBL_RxHeader.ExtId = 0;
	FBL_RxHeader.FilterMatchIndex = 0;
	FBL_RxHeader.IDE = 0;
	FBL_RxHeader.RTR = 0;
 800059c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	FBL_TxMailbox = 0;
 80005a0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	607b      	str	r3, [r7, #4]
	FBL_TxHeader.DLC = 0;
 80005a8:	612b      	str	r3, [r5, #16]
	FBL_TxHeader.RTR = 0;
 80005aa:	60eb      	str	r3, [r5, #12]
	FBL_TxHeader.StdId = 0;
 80005ac:	602b      	str	r3, [r5, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 80005ae:	752b      	strb	r3, [r5, #20]
	FBL_TxMailbox = 0;
 80005b0:	6013      	str	r3, [r2, #0]
	FBL_RxHeader.StdId = 0;
 80005b2:	6023      	str	r3, [r4, #0]
	FBL_RxHeader.DLC = 0;
 80005b4:	6123      	str	r3, [r4, #16]
	FBL_RxHeader.ExtId = 0;
 80005b6:	6063      	str	r3, [r4, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 80005b8:	61a3      	str	r3, [r4, #24]
	FBL_RxHeader.Timestamp = 0;
 80005ba:	6163      	str	r3, [r4, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 80005bc:	6033      	str	r3, [r6, #0]
 80005be:	6073      	str	r3, [r6, #4]
}
 80005c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005c4 <FBL_DiagService_DSC_RequestTransferExit>:
void FBL_DiagService_DSC_RequestTransferExit(void)
{
 80005c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80005c8:	f240 049c 	movw	r4, #156	@ 0x9c
 80005cc:	f240 0584 	movw	r5, #132	@ 0x84
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
	FBL_TxFrame[0] = FBL_RxFrame[0];
 80005d0:	f240 07c0 	movw	r7, #192	@ 0xc0
 80005d4:	f240 06b8 	movw	r6, #184	@ 0xb8
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
	FBL_TxFrame[2] = FBL_RxFrame[2];
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80005d8:	f240 0880 	movw	r8, #128	@ 0x80
 80005dc:	f240 0034 	movw	r0, #52	@ 0x34
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80005e0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80005e4:	6923      	ldr	r3, [r4, #16]
 80005e6:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80005ea:	612b      	str	r3, [r5, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80005ec:	6823      	ldr	r3, [r4, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 80005ee:	f2c2 0700 	movt	r7, #8192	@ 0x2000
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80005f2:	3301      	adds	r3, #1
 80005f4:	602b      	str	r3, [r5, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 80005f6:	783b      	ldrb	r3, [r7, #0]
 80005f8:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80005fc:	7033      	strb	r3, [r6, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80005fe:	787b      	ldrb	r3, [r7, #1]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000600:	f2c2 0800 	movt	r8, #8192	@ 0x2000
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000604:	3340      	adds	r3, #64	@ 0x40
 8000606:	7073      	strb	r3, [r6, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000608:	78bb      	ldrb	r3, [r7, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800060a:	4632      	mov	r2, r6
	FBL_TxFrame[2] = FBL_RxFrame[2];
 800060c:	70b3      	strb	r3, [r6, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800060e:	4629      	mov	r1, r5
 8000610:	4643      	mov	r3, r8
 8000612:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000616:	f000 fbcc 	bl	8000db2 <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 800061a:	2000      	movs	r0, #0
	FBL_TxHeader.DLC = 0;
	FBL_TxHeader.ExtId = 0;
	FBL_TxHeader.IDE = 0;
 800061c:	e9c5 0001 	strd	r0, r0, [r5, #4]
	FBL_RxHeader.StdId = 0;
	FBL_RxHeader.DLC = 0;
	FBL_RxHeader.ExtId = 0;
	FBL_RxHeader.FilterMatchIndex = 0;
	FBL_RxHeader.IDE = 0;
	FBL_RxHeader.RTR = 0;
 8000620:	e9c4 0002 	strd	r0, r0, [r4, #8]
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000624:	6030      	str	r0, [r6, #0]
 8000626:	6070      	str	r0, [r6, #4]
	FBL_TxHeader.DLC = 0;
 8000628:	6128      	str	r0, [r5, #16]
	FBL_TxHeader.RTR = 0;
 800062a:	60e8      	str	r0, [r5, #12]
	FBL_TxHeader.StdId = 0;
 800062c:	6028      	str	r0, [r5, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 800062e:	7528      	strb	r0, [r5, #20]
	FBL_TxMailbox = 0;
 8000630:	f8c8 0000 	str.w	r0, [r8]
	FBL_RxHeader.StdId = 0;
 8000634:	6020      	str	r0, [r4, #0]
	FBL_RxHeader.DLC = 0;
 8000636:	6120      	str	r0, [r4, #16]
	FBL_RxHeader.ExtId = 0;
 8000638:	6060      	str	r0, [r4, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 800063a:	61a0      	str	r0, [r4, #24]
	FBL_RxHeader.Timestamp = 0;
 800063c:	6160      	str	r0, [r4, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 800063e:	6038      	str	r0, [r7, #0]
 8000640:	6078      	str	r0, [r7, #4]
}
 8000642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000646 <FBL_DiagService_RAR_MassEraseAPPL>:
void FBL_DiagService_RAR_MassEraseAPPL(void)
{
 8000646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800064a:	f240 069c 	movw	r6, #156	@ 0x9c
 800064e:	f240 0784 	movw	r7, #132	@ 0x84
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000652:	f240 05c0 	movw	r5, #192	@ 0xc0
 8000656:	f240 04b8 	movw	r4, #184	@ 0xb8
	FBL_TxFrame[3] = FBL_RxFrame[3];
	FBL_TxFrame[4] = FBL_RxFrame[4];
	FBL_TxFrame[5] = FBL_RxFrame[5];
	FBL_TxFrame[6] = FBL_RxFrame[6];
	FBL_TxFrame[7] = FBL_RxFrame[7];
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800065a:	f240 0880 	movw	r8, #128	@ 0x80
 800065e:	f240 0934 	movw	r9, #52	@ 0x34
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000662:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8000666:	6933      	ldr	r3, [r6, #16]
 8000668:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800066c:	613b      	str	r3, [r7, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 800066e:	6833      	ldr	r3, [r6, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000670:	f2c2 0500 	movt	r5, #8192	@ 0x2000
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000674:	3301      	adds	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000678:	782b      	ldrb	r3, [r5, #0]
 800067a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800067e:	7023      	strb	r3, [r4, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000680:	786b      	ldrb	r3, [r5, #1]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000682:	f2c2 0800 	movt	r8, #8192	@ 0x2000
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000686:	3340      	adds	r3, #64	@ 0x40
 8000688:	7063      	strb	r3, [r4, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 800068a:	78ab      	ldrb	r3, [r5, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800068c:	f2c2 0900 	movt	r9, #8192	@ 0x2000
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000690:	70a3      	strb	r3, [r4, #2]
	FBL_TxFrame[3] = FBL_RxFrame[3];
 8000692:	78eb      	ldrb	r3, [r5, #3]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000694:	4622      	mov	r2, r4
	FBL_TxFrame[3] = FBL_RxFrame[3];
 8000696:	70e3      	strb	r3, [r4, #3]
	FBL_TxFrame[4] = FBL_RxFrame[4];
 8000698:	792b      	ldrb	r3, [r5, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800069a:	4639      	mov	r1, r7
	FBL_TxFrame[4] = FBL_RxFrame[4];
 800069c:	7123      	strb	r3, [r4, #4]
	FBL_TxFrame[5] = FBL_RxFrame[5];
 800069e:	796b      	ldrb	r3, [r5, #5]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80006a0:	4648      	mov	r0, r9
	FBL_TxFrame[5] = FBL_RxFrame[5];
 80006a2:	7163      	strb	r3, [r4, #5]
	FBL_TxFrame[6] = FBL_RxFrame[6];
 80006a4:	79ab      	ldrb	r3, [r5, #6]
 80006a6:	71a3      	strb	r3, [r4, #6]
	FBL_TxFrame[7] = FBL_RxFrame[7];
 80006a8:	79eb      	ldrb	r3, [r5, #7]
 80006aa:	71e3      	strb	r3, [r4, #7]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80006ac:	4643      	mov	r3, r8
 80006ae:	f000 fb80 	bl	8000db2 <HAL_CAN_AddTxMessage>
	for(uint32 i = 0; i < 9000; i++);
	FBL_NvM_EraseFlash_APPL();
 80006b2:	f7ff fe89 	bl	80003c8 <FBL_NvM_EraseFlash_APPL>
	HAL_CAN_AbortTxRequest(&hcan, FBL_TxMailbox);
 80006b6:	f8d8 1000 	ldr.w	r1, [r8]
 80006ba:	4648      	mov	r0, r9
 80006bc:	f000 fbcb 	bl	8000e56 <HAL_CAN_AbortTxRequest>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80006c0:	2100      	movs	r1, #0
	FBL_TxHeader.DLC = 0;
	FBL_TxHeader.ExtId = 0;
	FBL_TxHeader.IDE = 0;
 80006c2:	e9c7 1101 	strd	r1, r1, [r7, #4]
	FBL_RxHeader.StdId = 0;
	FBL_RxHeader.DLC = 0;
	FBL_RxHeader.ExtId = 0;
	FBL_RxHeader.FilterMatchIndex = 0;
	FBL_RxHeader.IDE = 0;
	FBL_RxHeader.RTR = 0;
 80006c6:	e9c6 1102 	strd	r1, r1, [r6, #8]
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80006ca:	6021      	str	r1, [r4, #0]
 80006cc:	6061      	str	r1, [r4, #4]
	FBL_TxHeader.DLC = 0;
 80006ce:	6139      	str	r1, [r7, #16]
	FBL_TxHeader.RTR = 0;
 80006d0:	60f9      	str	r1, [r7, #12]
	FBL_TxHeader.StdId = 0;
 80006d2:	6039      	str	r1, [r7, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 80006d4:	7539      	strb	r1, [r7, #20]
	FBL_TxMailbox = 0;
 80006d6:	f8c8 1000 	str.w	r1, [r8]
	FBL_RxHeader.StdId = 0;
 80006da:	6031      	str	r1, [r6, #0]
	FBL_RxHeader.DLC = 0;
 80006dc:	6131      	str	r1, [r6, #16]
	FBL_RxHeader.ExtId = 0;
 80006de:	6071      	str	r1, [r6, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 80006e0:	61b1      	str	r1, [r6, #24]
	FBL_RxHeader.Timestamp = 0;
 80006e2:	6171      	str	r1, [r6, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 80006e4:	6029      	str	r1, [r5, #0]
 80006e6:	6069      	str	r1, [r5, #4]
}
 80006e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080006ec <FBL_JumpToAppl>:
void FBL_JumpToAppl(void)
{
 80006ec:	b570      	push	{r4, r5, r6, lr}
	typedef void (*pFunction)(void);
	static uint32 app_address = APPL_START_ADDRESS;
	static pFunction app_entry;
	uint32 msp_value = *((uint32*)app_address);
 80006ee:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
 80006f2:	f6c0 0400 	movt	r4, #2048	@ 0x800
 80006f6:	6825      	ldr	r5, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
	__disable_irq();
	HAL_NVIC_ClearPendingIRQ(CAN1_SCE_IRQn);
 80006fa:	2016      	movs	r0, #22
 80006fc:	f000 fde0 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8000700:	2015      	movs	r0, #21
 8000702:	f000 fddd 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 8000706:	2014      	movs	r0, #20
 8000708:	f000 fdda 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 800070c:	2013      	movs	r0, #19
 800070e:	f000 fdd7 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RCC_IRQn);
 8000712:	2005      	movs	r0, #5
 8000714:	f000 fdd4 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(FLASH_IRQn);
 8000718:	2004      	movs	r0, #4
 800071a:	f000 fdd1 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(PVD_IRQn);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 fdce 	bl	80012c0 <HAL_NVIC_ClearPendingIRQ>
	SysTick->CTRL = 0;
 8000724:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
	SysTick->LOAD = 0;
 800072c:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 800072e:	619a      	str	r2, [r3, #24]
	SCB->VTOR = app_address;
 8000730:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8000734:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000738:	609c      	str	r4, [r3, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800073a:	f385 8808 	msr	MSP, r5
	__set_MSP(msp_value);
	app_entry = (pFunction)(*((uint32*)(app_address + 4)));
	app_entry(); // goto app
 800073e:	6863      	ldr	r3, [r4, #4]
}
 8000740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	app_entry(); // goto app
 8000744:	4718      	bx	r3

08000746 <main>:
{
 8000746:	b508      	push	{r3, lr}
  HAL_Init();
 8000748:	f000 f9ea 	bl	8000b20 <HAL_Init>
  SystemClock_Config();
 800074c:	f7ff fe00 	bl	8000350 <SystemClock_Config>
  MX_GPIO_Init();
 8000750:	f7ff fd83 	bl	800025a <MX_GPIO_Init>
  MX_CAN_Init();
 8000754:	f7ff fcfa 	bl	800014c <MX_CAN_Init>
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2005      	movs	r0, #5
 800075c:	4611      	mov	r1, r2
 800075e:	f000 fd57 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fd89 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2004      	movs	r0, #4
 800076c:	4611      	mov	r1, r2
 800076e:	f000 fd4f 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000772:	2004      	movs	r0, #4
 8000774:	f000 fd81 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2001      	movs	r0, #1
 800077c:	4611      	mov	r1, r2
 800077e:	f000 fd47 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fd79 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2016      	movs	r0, #22
 800078c:	4611      	mov	r1, r2
 800078e:	f000 fd3f 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000792:	2016      	movs	r0, #22
 8000794:	f000 fd71 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2015      	movs	r0, #21
 800079c:	4611      	mov	r1, r2
 800079e:	f000 fd37 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007a2:	2015      	movs	r0, #21
 80007a4:	f000 fd69 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2014      	movs	r0, #20
 80007ac:	4611      	mov	r1, r2
 80007ae:	f000 fd2f 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007b2:	2014      	movs	r0, #20
 80007b4:	f000 fd61 	bl	800127a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2013      	movs	r0, #19
 80007bc:	4611      	mov	r1, r2
 80007be:	f000 fd27 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80007c2:	2013      	movs	r0, #19
 80007c4:	f000 fd59 	bl	800127a <HAL_NVIC_EnableIRQ>
	FBL_ProgrammingAddress = 0;
 80007c8:	f240 0374 	movw	r3, #116	@ 0x74
 80007cc:	2200      	movs	r2, #0
 80007ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007d2:	601a      	str	r2, [r3, #0]
	FBL_ProgrammingIndex = 0;
 80007d4:	f240 0378 	movw	r3, #120	@ 0x78
 80007d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007dc:	601a      	str	r2, [r3, #0]
	FBL_NvM_FlashReadData(ROM_APPL_START_ADDR, &ROM_APPL_START_ADDR_storedValue, 1);
 80007de:	f240 0470 	movw	r4, #112	@ 0x70
 80007e2:	f240 0300 	movw	r3, #0
 80007e6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80007ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007ee:	4621      	mov	r1, r4
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2201      	movs	r2, #1
 80007f4:	f7ff fe2f 	bl	8000456 <FBL_NvM_FlashReadData>
	if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 80007f8:	6821      	ldr	r1, [r4, #0]
 80007fa:	1c4b      	adds	r3, r1, #1
 80007fc:	f240 036c 	movw	r3, #108	@ 0x6c
 8000800:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000804:	d00f      	beq.n	8000826 <main+0xe0>
		FBL_DSC_Pointer = (uint32*)(SESSIONSTATUS_ADDR);
 8000806:	f240 0208 	movw	r2, #8
 800080a:	f44f 4098 	mov.w	r0, #19456	@ 0x4c00
 800080e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000812:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000816:	6010      	str	r0, [r2, #0]
		FBL_DSC_Status = *FBL_DSC_Pointer;
 8000818:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000820:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8000824:	601a      	str	r2, [r3, #0]
	if((FBL_DSC_Status == PROGRAMMING))
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2a02      	cmp	r2, #2
 800082a:	d105      	bne.n	8000838 <main+0xf2>
		FBL_DSC_State = FBL_DSC_Status;
 800082c:	f240 0304 	movw	r3, #4
 8000830:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000834:	701a      	strb	r2, [r3, #0]
	while (1)
 8000836:	e7fe      	b.n	8000836 <main+0xf0>
		if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 8000838:	3101      	adds	r1, #1
 800083a:	d0fc      	beq.n	8000836 <main+0xf0>
			FBL_JumpToAppl();
 800083c:	f7ff ff56 	bl	80006ec <FBL_JumpToAppl>
 8000840:	e7f9      	b.n	8000836 <main+0xf0>

08000842 <FBL_DiagService_ER_HardReset>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000842:	b672      	cpsid	i
void FBL_DiagService_ER_HardReset(void)
{
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 8000844:	f240 0308 	movw	r3, #8
 8000848:	2200      	movs	r2, #0
 800084a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000852:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000856:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800085a:	2304      	movs	r3, #4
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800085c:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000860:	68d1      	ldr	r1, [r2, #12]
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000862:	f2c0 53fa 	movt	r3, #1530	@ 0x5fa
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086a:	430b      	orrs	r3, r1
 800086c:	60d3      	str	r3, [r2, #12]
 800086e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000872:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000874:	e7fd      	b.n	8000872 <FBL_DiagService_ER_HardReset+0x30>

08000876 <FBL_DiagService_DSC_Programming>:
	__NVIC_SystemReset();
}

void FBL_DiagService_DSC_Programming(void)
{
 8000876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(FBL_RxFrame[0] == 0x04 &&
			FBL_RxFrame[1] == 0x31 &&
 8000878:	f240 04c0 	movw	r4, #192	@ 0xc0
 800087c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
	if(FBL_RxFrame[0] == 0x04 &&
 8000880:	7822      	ldrb	r2, [r4, #0]
			FBL_RxFrame[1] == 0x31 &&
 8000882:	7863      	ldrb	r3, [r4, #1]
	if(FBL_RxFrame[0] == 0x04 &&
 8000884:	2a04      	cmp	r2, #4
 8000886:	d106      	bne.n	8000896 <FBL_DiagService_DSC_Programming+0x20>
 8000888:	2b31      	cmp	r3, #49	@ 0x31
 800088a:	d104      	bne.n	8000896 <FBL_DiagService_DSC_Programming+0x20>
			FBL_RxFrame[1] == 0x31 &&
 800088c:	7923      	ldrb	r3, [r4, #4]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d119      	bne.n	80008c6 <FBL_DiagService_DSC_Programming+0x50>
			FBL_RxFrame[4] == 0x04)
	{
		FBL_DiagService_RAR_MassEraseAPPL();
 8000892:	f7ff fed8 	bl	8000646 <FBL_DiagService_RAR_MassEraseAPPL>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x34)
 8000896:	7863      	ldrb	r3, [r4, #1]
 8000898:	2b34      	cmp	r3, #52	@ 0x34
 800089a:	d10f      	bne.n	80008bc <FBL_DiagService_DSC_Programming+0x46>
	{
		FBL_ProgrammingAddress = (0x08 << 24)
 800089c:	f240 0274 	movw	r2, #116	@ 0x74
				| (FBL_RxFrame[4] << 16)
				| (FBL_RxFrame[5] << 8)
 80008a0:	7963      	ldrb	r3, [r4, #5]
				| (FBL_RxFrame[4] << 16)
 80008a2:	7921      	ldrb	r1, [r4, #4]
				| (FBL_RxFrame[5] << 8)
 80008a4:	021b      	lsls	r3, r3, #8
				| (FBL_RxFrame[6]);
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	79a1      	ldrb	r1, [r4, #6]
		FBL_ProgrammingAddress = (0x08 << 24)
 80008ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
				| (FBL_RxFrame[6]);
 80008b0:	430b      	orrs	r3, r1
 80008b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
		FBL_ProgrammingAddress = (0x08 << 24)
 80008b6:	6013      	str	r3, [r2, #0]
		FBL_DiagService_DSC_RequestDownload();
 80008b8:	f7ff fdd9 	bl	800046e <FBL_DiagService_DSC_RequestDownload>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x36)
 80008bc:	7863      	ldrb	r3, [r4, #1]
 80008be:	2b36      	cmp	r3, #54	@ 0x36
 80008c0:	d101      	bne.n	80008c6 <FBL_DiagService_DSC_Programming+0x50>
	{
		FBL_DiagService_DSC_TransferData();
 80008c2:	f7ff fe19 	bl	80004f8 <FBL_DiagService_DSC_TransferData>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x37
 80008c6:	f240 07b8 	movw	r7, #184	@ 0xb8
 80008ca:	f240 0684 	movw	r6, #132	@ 0x84
 80008ce:	f240 059c 	movw	r5, #156	@ 0x9c
 80008d2:	7863      	ldrb	r3, [r4, #1]
 80008d4:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80008d8:	2b37      	cmp	r3, #55	@ 0x37
 80008da:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80008de:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80008e2:	d104      	bne.n	80008ee <FBL_DiagService_DSC_Programming+0x78>
			&& FBL_RxFrame[0] == 0x01)
 80008e4:	7823      	ldrb	r3, [r4, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d107      	bne.n	80008fa <FBL_DiagService_DSC_Programming+0x84>
	{
		FBL_DiagService_DSC_RequestTransferExit();
 80008ea:	f7ff fe6b 	bl	80005c4 <FBL_DiagService_DSC_RequestTransferExit>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x11 &&
 80008ee:	7863      	ldrb	r3, [r4, #1]
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	d102      	bne.n	80008fa <FBL_DiagService_DSC_Programming+0x84>
 80008f4:	78a2      	ldrb	r2, [r4, #2]
 80008f6:	2a01      	cmp	r2, #1
 80008f8:	d018      	beq.n	800092c <FBL_DiagService_DSC_Programming+0xb6>
	FBL_TxHeader.ExtId = 0;
	FBL_TxHeader.IDE = 0;
	FBL_TxHeader.RTR = 0;
	FBL_TxHeader.StdId = 0;
	FBL_TxHeader.TransmitGlobalTime = 0;
	FBL_TxMailbox = 0;
 80008fa:	f240 0280 	movw	r2, #128	@ 0x80
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80008fe:	2300      	movs	r3, #0
	FBL_TxMailbox = 0;
 8000900:	f2c2 0200 	movt	r2, #8192	@ 0x2000
	FBL_TxHeader.IDE = 0;
 8000904:	e9c6 3301 	strd	r3, r3, [r6, #4]
	FBL_RxHeader.StdId = 0;
	FBL_RxHeader.DLC = 0;
	FBL_RxHeader.ExtId = 0;
	FBL_RxHeader.FilterMatchIndex = 0;
	FBL_RxHeader.IDE = 0;
	FBL_RxHeader.RTR = 0;
 8000908:	e9c5 3302 	strd	r3, r3, [r5, #8]
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	607b      	str	r3, [r7, #4]
	FBL_TxHeader.DLC = 0;
 8000910:	6133      	str	r3, [r6, #16]
	FBL_TxHeader.RTR = 0;
 8000912:	60f3      	str	r3, [r6, #12]
	FBL_TxHeader.StdId = 0;
 8000914:	6033      	str	r3, [r6, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000916:	7533      	strb	r3, [r6, #20]
	FBL_TxMailbox = 0;
 8000918:	6013      	str	r3, [r2, #0]
	FBL_RxHeader.StdId = 0;
 800091a:	602b      	str	r3, [r5, #0]
	FBL_RxHeader.DLC = 0;
 800091c:	612b      	str	r3, [r5, #16]
	FBL_RxHeader.ExtId = 0;
 800091e:	606b      	str	r3, [r5, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8000920:	61ab      	str	r3, [r5, #24]
	FBL_RxHeader.Timestamp = 0;
 8000922:	616b      	str	r3, [r5, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	6063      	str	r3, [r4, #4]
}
 8000928:	b003      	add	sp, #12
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800092c:	692b      	ldr	r3, [r5, #16]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 800092e:	70ba      	strb	r2, [r7, #2]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000930:	6133      	str	r3, [r6, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000932:	682b      	ldr	r3, [r5, #0]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000934:	f240 02b8 	movw	r2, #184	@ 0xb8
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000938:	3301      	adds	r3, #1
 800093a:	6033      	str	r3, [r6, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 800093c:	7823      	ldrb	r3, [r4, #0]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800093e:	f240 0184 	movw	r1, #132	@ 0x84
		FBL_TxFrame[0] = FBL_RxFrame[0];
 8000942:	703b      	strb	r3, [r7, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000944:	2351      	movs	r3, #81	@ 0x51
 8000946:	707b      	strb	r3, [r7, #1]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 8000948:	78e3      	ldrb	r3, [r4, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800094a:	f240 0034 	movw	r0, #52	@ 0x34
		FBL_TxFrame[3] = FBL_RxFrame[3];
 800094e:	70fb      	strb	r3, [r7, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000950:	f240 0380 	movw	r3, #128	@ 0x80
 8000954:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000958:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800095c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000960:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000964:	f000 fa25 	bl	8000db2 <HAL_CAN_AddTxMessage>
		volatile uint32 i = 0u;
 8000968:	2300      	movs	r3, #0
		for(i = 0; i < 90000; i++);
 800096a:	f645 728f 	movw	r2, #24463	@ 0x5f8f
		volatile uint32 i = 0u;
 800096e:	9301      	str	r3, [sp, #4]
		for(i = 0; i < 90000; i++);
 8000970:	f2c0 0201 	movt	r2, #1
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	9b01      	ldr	r3, [sp, #4]
 8000978:	4293      	cmp	r3, r2
 800097a:	d901      	bls.n	8000980 <FBL_DiagService_DSC_Programming+0x10a>
		FBL_DiagService_ER_HardReset();
 800097c:	f7ff ff61 	bl	8000842 <FBL_DiagService_ER_HardReset>
		for(i = 0; i < 90000; i++);
 8000980:	9b01      	ldr	r3, [sp, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	e7f6      	b.n	8000976 <FBL_DiagService_DSC_Programming+0x100>

08000988 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8000988:	b570      	push	{r4, r5, r6, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 800098a:	f240 04c0 	movw	r4, #192	@ 0xc0
 800098e:	f240 059c 	movw	r5, #156	@ 0x9c
 8000992:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8000996:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800099a:	4623      	mov	r3, r4
 800099c:	462a      	mov	r2, r5
 800099e:	2100      	movs	r1, #0
{
 80009a0:	4606      	mov	r6, r0
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 80009a2:	f000 fa7c 	bl	8000e9e <HAL_CAN_GetRxMessage>
	switch(FBL_DSC_State)
 80009a6:	f240 0304 	movw	r3, #4
 80009aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	2a02      	cmp	r2, #2
 80009b2:	d023      	beq.n	80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 80009b4:	2a05      	cmp	r2, #5
 80009b6:	d101      	bne.n	80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		FBL_DiagService_ER_HardReset();
 80009b8:	f7ff ff43 	bl	8000842 <FBL_DiagService_ER_HardReset>
		if(FBL_RxFrame[1] == 0x10 &&
 80009bc:	7862      	ldrb	r2, [r4, #1]
 80009be:	2a10      	cmp	r2, #16
 80009c0:	d120      	bne.n	8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
 80009c2:	78a0      	ldrb	r0, [r4, #2]
 80009c4:	2802      	cmp	r0, #2
 80009c6:	d11d      	bne.n	8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
			FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80009c8:	f240 0184 	movw	r1, #132	@ 0x84
 80009cc:	692a      	ldr	r2, [r5, #16]
 80009ce:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80009d2:	610a      	str	r2, [r1, #16]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80009d4:	682a      	ldr	r2, [r5, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 80009d6:	7824      	ldrb	r4, [r4, #0]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80009d8:	3201      	adds	r2, #1
 80009da:	600a      	str	r2, [r1, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 80009dc:	f240 02b8 	movw	r2, #184	@ 0xb8
			FBL_DSC_State = PROGRAMMING;
 80009e0:	7018      	strb	r0, [r3, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 80009e2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
			HAL_CAN_AddTxMessage(hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80009e6:	f240 0380 	movw	r3, #128	@ 0x80
			FBL_TxFrame[0] = FBL_RxFrame[0];
 80009ea:	7014      	strb	r4, [r2, #0]
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80009ec:	2450      	movs	r4, #80	@ 0x50
			FBL_TxFrame[2] = FBL_RxFrame[2];
 80009ee:	7090      	strb	r0, [r2, #2]
			HAL_CAN_AddTxMessage(hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80009f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80009f4:	4630      	mov	r0, r6
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80009f6:	7054      	strb	r4, [r2, #1]
			HAL_CAN_AddTxMessage(hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80009f8:	f000 f9db 	bl	8000db2 <HAL_CAN_AddTxMessage>
}
 80009fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			FBL_DiagService_DSC_Programming();
 8000a00:	f7ff bf39 	b.w	8000876 <FBL_DiagService_DSC_Programming>
}
 8000a04:	bd70      	pop	{r4, r5, r6, pc}

08000a06 <HAL_CAN_RxFifo0FullCallback>:
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8000a06:	f7ff bfbf 	b.w	8000988 <HAL_CAN_RxFifo0MsgPendingCallback>

08000a0a <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a10:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000a14:	699a      	ldr	r2, [r3, #24]
{
 8000a16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a18:	f042 0201 	orr.w	r2, r2, #1
 8000a1c:	619a      	str	r2, [r3, #24]
 8000a1e:	699a      	ldr	r2, [r3, #24]
 8000a20:	f002 0201 	and.w	r2, r2, #1
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a2e:	61da      	str	r2, [r3, #28]

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a30:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	69db      	ldr	r3, [r3, #28]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a34:	f2c4 0201 	movt	r2, #16385	@ 0x4001
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a40:	6853      	ldr	r3, [r2, #4]
 8000a42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a4a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	b002      	add	sp, #8
 8000a4e:	4770      	bx	lr

08000a50 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler>

08000a52 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler>

08000a54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler>

08000a56 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler>

08000a58 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler>

08000a5a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 b871 	b.w	8000b46 <HAL_IncTick>

08000a64 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000a64:	f000 bf34 	b.w	80018d0 <HAL_PWR_PVD_IRQHandler>

08000a68 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000a68:	f000 bc6e 	b.w	8001348 <HAL_FLASH_IRQHandler>

08000a6c <RCC_IRQHandler>:
}

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 8000a6c:	4770      	bx	lr

08000a6e <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a6e:	f240 0034 	movw	r0, #52	@ 0x34
 8000a72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000a76:	f000 bab2 	b.w	8000fde <HAL_CAN_IRQHandler>

08000a7a <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 8000a7a:	f7ff bff8 	b.w	8000a6e <USB_HP_CAN1_TX_IRQHandler>

08000a7e <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 8000a7e:	f7ff bff6 	b.w	8000a6e <USB_HP_CAN1_TX_IRQHandler>

08000a82 <CAN1_SCE_IRQHandler>:
}

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
 8000a82:	f7ff bff4 	b.w	8000a6e <USB_HP_CAN1_TX_IRQHandler>

08000a86 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a86:	4770      	bx	lr

08000a88 <Reset_Handler>:
 8000a88:	f7ff fffd 	bl	8000a86 <SystemInit>
 8000a8c:	480b      	ldr	r0, [pc, #44]	@ (8000abc <LoopFillZerobss+0xe>)
 8000a8e:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <LoopFillZerobss+0x12>)
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <LoopFillZerobss+0x16>)
 8000a92:	2300      	movs	r3, #0
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:
 8000a96:	58d4      	ldr	r4, [r2, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:
 8000a9c:	18c4      	adds	r4, r0, r3
 8000a9e:	428c      	cmp	r4, r1
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <LoopFillZerobss+0x1a>)
 8000aa4:	4c09      	ldr	r4, [pc, #36]	@ (8000acc <LoopFillZerobss+0x1e>)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:
 8000aae:	42a2      	cmp	r2, r4
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>
 8000ab2:	f001 f9a5 	bl	8001e00 <__libc_init_array>
 8000ab6:	f7ff fe46 	bl	8000746 <main>
 8000aba:	4770      	bx	lr
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000018 	.word	0x20000018
 8000ac4:	08001e8c 	.word	0x08001e8c
 8000ac8:	20000018 	.word	0x20000018
 8000acc:	200000f0 	.word	0x200000f0

08000ad0 <ADC1_2_IRQHandler>:
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>

08000ad2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad2:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	f240 0310 	movw	r3, #16
 8000ad8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	f240 020c 	movw	r2, #12
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	f2c2 0200 	movt	r2, #8192	@ 0x2000
{
 8000aee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	6810      	ldr	r0, [r2, #0]
 8000af2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af6:	f000 fbce 	bl	8001296 <HAL_SYSTICK_Config>
 8000afa:	4604      	mov	r4, r0
 8000afc:	b970      	cbnz	r0, 8000b1c <HAL_InitTick+0x4a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	2d0f      	cmp	r5, #15
 8000b00:	d80c      	bhi.n	8000b1c <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	4602      	mov	r2, r0
 8000b04:	4629      	mov	r1, r5
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0a:	f000 fb81 	bl	8001210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0e:	f240 0314 	movw	r3, #20
 8000b12:	4620      	mov	r0, r4
 8000b14:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b18:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	e7fc      	b.n	8000b1a <HAL_InitTick+0x48>

08000b20 <HAL_Init>:
{
 8000b20:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b26:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b2a:	681a      	ldr	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2e:	f042 0210 	orr.w	r2, r2, #16
 8000b32:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	f000 fb59 	bl	80011ea <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b38:	200f      	movs	r0, #15
 8000b3a:	f7ff ffca 	bl	8000ad2 <HAL_InitTick>
  HAL_MspInit();
 8000b3e:	f7ff ff65 	bl	8000a0c <HAL_MspInit>
}
 8000b42:	2000      	movs	r0, #0
 8000b44:	bd08      	pop	{r3, pc}

08000b46 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b46:	f240 03c8 	movw	r3, #200	@ 0xc8
 8000b4a:	f240 0210 	movw	r2, #16
 8000b4e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b52:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000b56:	6819      	ldr	r1, [r3, #0]
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	440a      	add	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b60:	f240 03c8 	movw	r3, #200	@ 0xc8
 8000b64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b68:	6818      	ldr	r0, [r3, #0]
}
 8000b6a:	4770      	bx	lr

08000b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b6e:	4604      	mov	r4, r0
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d074      	beq.n	8000c5e <HAL_CAN_Init+0xf2>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b74:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000b78:	b90b      	cbnz	r3, 8000b7e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b7a:	f7ff fb2d 	bl	80001d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b7e:	6822      	ldr	r2, [r4, #0]
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b88:	f7ff ffea 	bl	8000b60 <HAL_GetTick>
 8000b8c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	07d1      	lsls	r1, r2, #31
 8000b94:	d557      	bpl.n	8000c46 <HAL_CAN_Init+0xda>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f022 0202 	bic.w	r2, r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b9e:	f7ff ffdf 	bl	8000b60 <HAL_GetTick>
 8000ba2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	0792      	lsls	r2, r2, #30
 8000baa:	d45a      	bmi.n	8000c62 <HAL_CAN_Init+0xf6>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bac:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bae:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bb0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	bf0c      	ite	eq
 8000bb6:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bba:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8000bbe:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc0:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bc2:	7e62      	ldrb	r2, [r4, #25]
 8000bc4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	bf0c      	ite	eq
 8000bca:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bce:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8000bd2:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bd4:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd6:	7ea2      	ldrb	r2, [r4, #26]
 8000bd8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	bf0c      	ite	eq
 8000bde:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000be2:	f022 0220 	bicne.w	r2, r2, #32
 8000be6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be8:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bea:	7ee2      	ldrb	r2, [r4, #27]
 8000bec:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	bf0c      	ite	eq
 8000bf2:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf6:	f042 0210 	orrne.w	r2, r2, #16
 8000bfa:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bfc:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bfe:	7f22      	ldrb	r2, [r4, #28]
 8000c00:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	bf0c      	ite	eq
 8000c06:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c0a:	f022 0208 	bicne.w	r2, r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c10:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c12:	7f62      	ldrb	r2, [r4, #29]
 8000c14:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	bf0c      	ite	eq
 8000c1a:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c1e:	f022 0204 	bicne.w	r2, r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c24:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	6922      	ldr	r2, [r4, #16]
 8000c2c:	6821      	ldr	r1, [r4, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	6962      	ldr	r2, [r4, #20]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	6862      	ldr	r2, [r4, #4]
 8000c36:	3a01      	subs	r2, #1
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61cb      	str	r3, [r1, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c3c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c3e:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000c40:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000c44:	e00c      	b.n	8000c60 <HAL_CAN_Init+0xf4>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c46:	f7ff ff8b 	bl	8000b60 <HAL_GetTick>
 8000c4a:	1b40      	subs	r0, r0, r5
 8000c4c:	280a      	cmp	r0, #10
 8000c4e:	d99e      	bls.n	8000b8e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c56:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
}
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c62:	f7ff ff7d 	bl	8000b60 <HAL_GetTick>
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	280a      	cmp	r0, #10
 8000c6a:	d99b      	bls.n	8000ba4 <HAL_CAN_Init+0x38>
 8000c6c:	e7f0      	b.n	8000c50 <HAL_CAN_Init+0xe4>

08000c6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c70:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c74:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c76:	3a01      	subs	r2, #1
 8000c78:	2a01      	cmp	r2, #1
 8000c7a:	d869      	bhi.n	8000d50 <HAL_CAN_ConfigFilter+0xe2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c7c:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c8a:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c8c:	f8d3 421c 	ldr.w	r4, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c90:	f002 021f 	and.w	r2, r2, #31
 8000c94:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c98:	ea24 0402 	bic.w	r4, r4, r2
 8000c9c:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ca0:	69cc      	ldr	r4, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ca2:	43d0      	mvns	r0, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ca4:	b9ac      	cbnz	r4, 8000cd2 <HAL_CAN_ConfigFilter+0x64>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ca6:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8000caa:	4004      	ands	r4, r0
 8000cac:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb0:	68ce      	ldr	r6, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb2:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cb4:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb6:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cbc:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc0:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cc4:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc6:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ccc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000cd0:	6065      	str	r5, [r4, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cd2:	69cc      	ldr	r4, [r1, #28]
 8000cd4:	2c01      	cmp	r4, #1
 8000cd6:	d115      	bne.n	8000d04 <HAL_CAN_ConfigFilter+0x96>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd8:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ce2:	680e      	ldr	r6, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce4:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ce6:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce8:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cee:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf2:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf4:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cf6:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf8:	3448      	adds	r4, #72	@ 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000d02:	6065      	str	r5, [r4, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d04:	698c      	ldr	r4, [r1, #24]
 8000d06:	b9dc      	cbnz	r4, 8000d40 <HAL_CAN_ConfigFilter+0xd2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d08:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8000d0c:	4004      	ands	r4, r0
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d0e:	f8c3 4204 	str.w	r4, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d12:	690c      	ldr	r4, [r1, #16]
 8000d14:	b9c4      	cbnz	r4, 8000d48 <HAL_CAN_ConfigFilter+0xda>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d16:	f8d3 4214 	ldr.w	r4, [r3, #532]	@ 0x214
 8000d1a:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d1c:	f8c3 0214 	str.w	r0, [r3, #532]	@ 0x214

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000d20:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d22:	6a09      	ldr	r1, [r1, #32]
 8000d24:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d26:	bf02      	ittt	eq
 8000d28:	f8d3 121c 	ldreq.w	r1, [r3, #540]	@ 0x21c
 8000d2c:	430a      	orreq	r2, r1
 8000d2e:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d32:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d40:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8000d44:	4314      	orrs	r4, r2
 8000d46:	e7e2      	b.n	8000d0e <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d48:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8000d4c:	4310      	orrs	r0, r2
 8000d4e:	e7e5      	b.n	8000d1c <HAL_CAN_ConfigFilter+0xae>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000d52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d56:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8000d58:	2001      	movs	r0, #1
 8000d5a:	e7f0      	b.n	8000d3e <HAL_CAN_ConfigFilter+0xd0>

08000d5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d5e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000d62:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d11f      	bne.n	8000da8 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d68:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d6a:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d6c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	f023 0301 	bic.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d78:	f7ff fef2 	bl	8000b60 <HAL_GetTick>
 8000d7c:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	6858      	ldr	r0, [r3, #4]
 8000d82:	f010 0001 	ands.w	r0, r0, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d88:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8c:	f7ff fee8 	bl	8000b60 <HAL_GetTick>
 8000d90:	1b40      	subs	r0, r0, r5
 8000d92:	280a      	cmp	r0, #10
 8000d94:	d9f3      	bls.n	8000d7e <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
 8000da6:	e7f0      	b.n	8000d8a <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000da8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000daa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dae:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8000db0:	e7f8      	b.n	8000da4 <HAL_CAN_Start+0x48>

08000db2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000db2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000db4:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000db8:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dba:	3d01      	subs	r5, #1
 8000dbc:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dbe:	68a4      	ldr	r4, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000dc0:	d845      	bhi.n	8000e4e <HAL_CAN_AddTxMessage+0x9c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dc2:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8000dc6:	d03c      	beq.n	8000e42 <HAL_CAN_AddTxMessage+0x90>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dc8:	2501      	movs	r5, #1
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dca:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dce:	40a5      	lsls	r5, r4
 8000dd0:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dd2:	688b      	ldr	r3, [r1, #8]
 8000dd4:	6806      	ldr	r6, [r0, #0]
 8000dd6:	68cd      	ldr	r5, [r1, #12]
 8000dd8:	f104 0718 	add.w	r7, r4, #24
 8000ddc:	bb53      	cbnz	r3, 8000e34 <HAL_CAN_AddTxMessage+0x82>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dde:	680b      	ldr	r3, [r1, #0]
 8000de0:	ea45 5543 	orr.w	r5, r5, r3, lsl #21
 8000de4:	013b      	lsls	r3, r7, #4
 8000de6:	50f5      	str	r5, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000de8:	6803      	ldr	r3, [r0, #0]
 8000dea:	690d      	ldr	r5, [r1, #16]
 8000dec:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8000df0:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000df2:	7d0b      	ldrb	r3, [r1, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	ea4f 1304 	mov.w	r3, r4, lsl #4
 8000dfa:	d107      	bne.n	8000e0c <HAL_CAN_AddTxMessage+0x5a>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dfc:	6801      	ldr	r1, [r0, #0]
 8000dfe:	4419      	add	r1, r3
 8000e00:	f8d1 4184 	ldr.w	r4, [r1, #388]	@ 0x184
 8000e04:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8000e08:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e0c:	6801      	ldr	r1, [r0, #0]
 8000e0e:	6854      	ldr	r4, [r2, #4]
 8000e10:	4419      	add	r1, r3
 8000e12:	f8c1 418c 	str.w	r4, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e16:	6811      	ldr	r1, [r2, #0]
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	441a      	add	r2, r3
 8000e1c:	f8c2 1188 	str.w	r1, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e20:	6802      	ldr	r2, [r0, #0]

      /* Return function status */
      return HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	4413      	add	r3, r2
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e26:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                           pHeader->IDE |
 8000e34:	432b      	orrs	r3, r5
 8000e36:	684d      	ldr	r5, [r1, #4]
 8000e38:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e3c:	013d      	lsls	r5, r7, #4
 8000e3e:	5173      	str	r3, [r6, r5]
 8000e40:	e7d2      	b.n	8000de8 <HAL_CAN_AddTxMessage+0x36>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e42:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000e44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e48:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	e7f1      	b.n	8000e32 <HAL_CAN_AddTxMessage+0x80>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e4e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e54:	e7f8      	b.n	8000e48 <HAL_CAN_AddTxMessage+0x96>

08000e56 <HAL_CAN_AbortTxRequest>:
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e56:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d818      	bhi.n	8000e92 <HAL_CAN_AbortTxRequest+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8000e60:	07cb      	lsls	r3, r1, #31
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8000e62:	bf41      	itttt	mi
 8000e64:	6802      	ldrmi	r2, [r0, #0]
 8000e66:	6893      	ldrmi	r3, [r2, #8]
 8000e68:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 8000e6c:	6093      	strmi	r3, [r2, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8000e6e:	078a      	lsls	r2, r1, #30
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8000e70:	bf41      	itttt	mi
 8000e72:	6802      	ldrmi	r2, [r0, #0]
 8000e74:	6893      	ldrmi	r3, [r2, #8]
 8000e76:	f443 4300 	orrmi.w	r3, r3, #32768	@ 0x8000
 8000e7a:	6093      	strmi	r3, [r2, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8000e7c:	074b      	lsls	r3, r1, #29
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8000e7e:	bf48      	it	mi
 8000e80:	6802      	ldrmi	r2, [r0, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000e82:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8000e86:	bf42      	ittt	mi
 8000e88:	6893      	ldrmi	r3, [r2, #8]
 8000e8a:	f443 0300 	orrmi.w	r3, r3, #8388608	@ 0x800000
 8000e8e:	6093      	strmi	r3, [r2, #8]
 8000e90:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e92:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e98:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
  }
}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea0:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea4:	3c01      	subs	r4, #1
 8000ea6:	2c01      	cmp	r4, #1
 8000ea8:	d879      	bhi.n	8000f9e <HAL_CAN_GetRxMessage+0x100>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000eaa:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000eac:	b941      	cbnz	r1, 8000ec0 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000eae:	68e5      	ldr	r5, [r4, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eb0:	07ad      	lsls	r5, r5, #30
 8000eb2:	d107      	bne.n	8000ec4 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eba:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8000ebc:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ec0:	6925      	ldr	r5, [r4, #16]
 8000ec2:	e7f5      	b.n	8000eb0 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ec4:	f101 051b 	add.w	r5, r1, #27
 8000ec8:	012e      	lsls	r6, r5, #4
 8000eca:	59a4      	ldr	r4, [r4, r6]
 8000ecc:	f004 0404 	and.w	r4, r4, #4
 8000ed0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ed2:	6807      	ldr	r7, [r0, #0]
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d159      	bne.n	8000f8c <HAL_CAN_GetRxMessage+0xee>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ed8:	59bc      	ldr	r4, [r7, r6]
 8000eda:	0d64      	lsrs	r4, r4, #21
 8000edc:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ede:	6806      	ldr	r6, [r0, #0]
 8000ee0:	012c      	lsls	r4, r5, #4
 8000ee2:	5934      	ldr	r4, [r6, r4]
 8000ee4:	f004 0402 	and.w	r4, r4, #2
 8000ee8:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000eea:	6806      	ldr	r6, [r0, #0]
 8000eec:	010c      	lsls	r4, r1, #4
 8000eee:	eb06 1601 	add.w	r6, r6, r1, lsl #4
 8000ef2:	f8d6 71b4 	ldr.w	r7, [r6, #436]	@ 0x1b4
 8000ef6:	073f      	lsls	r7, r7, #28
      pHeader->DLC = 8U;
 8000ef8:	bf4e      	itee	mi
 8000efa:	2608      	movmi	r6, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000efc:	f8d6 61b4 	ldrpl.w	r6, [r6, #436]	@ 0x1b4
 8000f00:	f006 060f 	andpl.w	r6, r6, #15
 8000f04:	6116      	str	r6, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f06:	6806      	ldr	r6, [r0, #0]
 8000f08:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 8000f0c:	6876      	ldr	r6, [r6, #4]
 8000f0e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8000f12:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f14:	6806      	ldr	r6, [r0, #0]
 8000f16:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 8000f1a:	6875      	ldr	r5, [r6, #4]
 8000f1c:	0c2d      	lsrs	r5, r5, #16
 8000f1e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f20:	6802      	ldr	r2, [r0, #0]
 8000f22:	4422      	add	r2, r4
 8000f24:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000f28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f2a:	6802      	ldr	r2, [r0, #0]
 8000f2c:	4422      	add	r2, r4
 8000f2e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000f32:	0a12      	lsrs	r2, r2, #8
 8000f34:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f36:	6802      	ldr	r2, [r0, #0]
 8000f38:	4422      	add	r2, r4
 8000f3a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000f3e:	0c12      	lsrs	r2, r2, #16
 8000f40:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f42:	6802      	ldr	r2, [r0, #0]
 8000f44:	4422      	add	r2, r4
 8000f46:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000f4a:	0e12      	lsrs	r2, r2, #24
 8000f4c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f4e:	6802      	ldr	r2, [r0, #0]
 8000f50:	4422      	add	r2, r4
 8000f52:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000f56:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f58:	6802      	ldr	r2, [r0, #0]
 8000f5a:	4422      	add	r2, r4
 8000f5c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000f60:	0a12      	lsrs	r2, r2, #8
 8000f62:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	4422      	add	r2, r4
 8000f68:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000f6c:	0c12      	lsrs	r2, r2, #16
 8000f6e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f70:	6802      	ldr	r2, [r0, #0]
 8000f72:	4422      	add	r2, r4
 8000f74:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000f78:	0e12      	lsrs	r2, r2, #24
 8000f7a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f7c:	6803      	ldr	r3, [r0, #0]
 8000f7e:	b949      	cbnz	r1, 8000f94 <HAL_CAN_GetRxMessage+0xf6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	f042 0220 	orr.w	r2, r2, #32
 8000f86:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	e798      	b.n	8000ebe <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f8c:	59bc      	ldr	r4, [r7, r6]
 8000f8e:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f90:	6054      	str	r4, [r2, #4]
 8000f92:	e7a4      	b.n	8000ede <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	e7f4      	b.n	8000f88 <HAL_CAN_GetRxMessage+0xea>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa4:	e789      	b.n	8000eba <HAL_CAN_GetRxMessage+0x1c>

08000fa6 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa6:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000faa:	3b01      	subs	r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d805      	bhi.n	8000fbc <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fb0:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000fb2:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fb4:	6953      	ldr	r3, [r2, #20]
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000fba:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc2:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
  }
}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 8000fc8:	4770      	bx	lr

08000fca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8000fca:	4770      	bx	lr

08000fcc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8000fcc:	4770      	bx	lr

08000fce <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8000fce:	4770      	bx	lr

08000fd0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8000fd8:	4770      	bx	lr

08000fda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8000fda:	4770      	bx	lr

08000fdc <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8000fdc:	4770      	bx	lr

08000fde <HAL_CAN_IRQHandler>:
{
 8000fde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fe2:	6803      	ldr	r3, [r0, #0]
{
 8000fe4:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fe6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fe8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fec:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ff0:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ff4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ff8:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ffc:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ffe:	d027      	beq.n	8001050 <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001000:	f018 0f01 	tst.w	r8, #1
 8001004:	d007      	beq.n	8001016 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001006:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001008:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800100c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800100e:	f000 80a7 	beq.w	8001160 <HAL_CAN_IRQHandler+0x182>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001012:	f7ff ffd9 	bl	8000fc8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001016:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001018:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800101c:	d00a      	beq.n	8001034 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800101e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001022:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001024:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001028:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800102a:	f000 80a8 	beq.w	800117e <HAL_CAN_IRQHandler+0x1a0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800102e:	4628      	mov	r0, r5
 8001030:	f7ff ffcb 	bl	8000fca <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001034:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8001038:	d00a      	beq.n	8001050 <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800103a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800103e:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001040:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001044:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001046:	f000 80aa 	beq.w	800119e <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff ffbe 	bl	8000fcc <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001050:	0732      	lsls	r2, r6, #28
 8001052:	d507      	bpl.n	8001064 <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001054:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001058:	bf1f      	itttt	ne
 800105a:	2210      	movne	r2, #16
 800105c:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800105e:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001062:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001064:	0773      	lsls	r3, r6, #29
 8001066:	d508      	bpl.n	800107a <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001068:	f01b 0f08 	tst.w	fp, #8
 800106c:	d005      	beq.n	800107a <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800106e:	2208      	movs	r2, #8
 8001070:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001072:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001074:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001076:	f7ff fcc6 	bl	8000a06 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800107a:	07b0      	lsls	r0, r6, #30
 800107c:	d506      	bpl.n	800108c <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	0799      	lsls	r1, r3, #30
 8001084:	d002      	beq.n	800108c <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff fc7e 	bl	8000988 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800108c:	0672      	lsls	r2, r6, #25
 800108e:	d507      	bpl.n	80010a0 <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001090:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001094:	bf1f      	itttt	ne
 8001096:	2210      	movne	r2, #16
 8001098:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800109a:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800109e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010a0:	06b3      	lsls	r3, r6, #26
 80010a2:	d508      	bpl.n	80010b6 <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010a4:	f01a 0f08 	tst.w	sl, #8
 80010a8:	d005      	beq.n	80010b6 <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010aa:	2208      	movs	r2, #8
 80010ac:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010ae:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010b0:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010b2:	f7ff ff90 	bl	8000fd6 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010b6:	06f0      	lsls	r0, r6, #27
 80010b8:	d506      	bpl.n	80010c8 <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	0799      	lsls	r1, r3, #30
 80010c0:	d002      	beq.n	80010c8 <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff ff86 	bl	8000fd4 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010c8:	03b2      	lsls	r2, r6, #14
 80010ca:	d508      	bpl.n	80010de <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010cc:	f019 0f10 	tst.w	r9, #16
 80010d0:	d005      	beq.n	80010de <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010d2:	2210      	movs	r2, #16
 80010d4:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80010d6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010d8:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80010da:	f7ff ff7d 	bl	8000fd8 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010de:	03f3      	lsls	r3, r6, #15
 80010e0:	d508      	bpl.n	80010f4 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010e2:	f019 0f08 	tst.w	r9, #8
 80010e6:	d005      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010e8:	2208      	movs	r2, #8
 80010ea:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010ec:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010ee:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010f0:	f7ff ff73 	bl	8000fda <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010f4:	0430      	lsls	r0, r6, #16
 80010f6:	d52a      	bpl.n	800114e <HAL_CAN_IRQHandler+0x170>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010f8:	f019 0f04 	tst.w	r9, #4
 80010fc:	d024      	beq.n	8001148 <HAL_CAN_IRQHandler+0x16a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010fe:	05f1      	lsls	r1, r6, #23
 8001100:	d503      	bpl.n	800110a <HAL_CAN_IRQHandler+0x12c>
 8001102:	07fa      	lsls	r2, r7, #31
        errorcode |= HAL_CAN_ERROR_EWG;
 8001104:	bf48      	it	mi
 8001106:	f044 0401 	orrmi.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800110a:	05b3      	lsls	r3, r6, #22
 800110c:	d503      	bpl.n	8001116 <HAL_CAN_IRQHandler+0x138>
 800110e:	07b8      	lsls	r0, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 8001110:	bf48      	it	mi
 8001112:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001116:	0571      	lsls	r1, r6, #21
 8001118:	d503      	bpl.n	8001122 <HAL_CAN_IRQHandler+0x144>
 800111a:	077a      	lsls	r2, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 800111c:	bf48      	it	mi
 800111e:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001122:	0533      	lsls	r3, r6, #20
 8001124:	d510      	bpl.n	8001148 <HAL_CAN_IRQHandler+0x16a>
 8001126:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 800112a:	d00d      	beq.n	8001148 <HAL_CAN_IRQHandler+0x16a>
        switch (esrflags & CAN_ESR_LEC)
 800112c:	2b40      	cmp	r3, #64	@ 0x40
 800112e:	d056      	beq.n	80011de <HAL_CAN_IRQHandler+0x200>
 8001130:	d845      	bhi.n	80011be <HAL_CAN_IRQHandler+0x1e0>
 8001132:	2b20      	cmp	r3, #32
 8001134:	d04d      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x1f4>
 8001136:	2b30      	cmp	r3, #48	@ 0x30
 8001138:	d04e      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x1fa>
 800113a:	2b10      	cmp	r3, #16
 800113c:	d046      	beq.n	80011cc <HAL_CAN_IRQHandler+0x1ee>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800113e:	682a      	ldr	r2, [r5, #0]
 8001140:	6993      	ldr	r3, [r2, #24]
 8001142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001146:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001148:	2204      	movs	r2, #4
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800114e:	b12c      	cbz	r4, 800115c <HAL_CAN_IRQHandler+0x17e>
    hcan->ErrorCode |= errorcode;
 8001150:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001152:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8001154:	4323      	orrs	r3, r4
 8001156:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001158:	f7ff ff40 	bl	8000fdc <HAL_CAN_ErrorCallback>
}
 800115c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001160:	f018 0f04 	tst.w	r8, #4
 8001164:	d105      	bne.n	8001172 <HAL_CAN_IRQHandler+0x194>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001166:	f018 0f08 	tst.w	r8, #8
 800116a:	d105      	bne.n	8001178 <HAL_CAN_IRQHandler+0x19a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800116c:	f7ff ff2f 	bl	8000fce <HAL_CAN_TxMailbox0AbortCallback>
 8001170:	e751      	b.n	8001016 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001172:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8001176:	e74f      	b.n	8001018 <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001178:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800117c:	e74c      	b.n	8001018 <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800117e:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 8001182:	d002      	beq.n	800118a <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001184:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 8001188:	e754      	b.n	8001034 <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800118a:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 800118e:	d002      	beq.n	8001196 <HAL_CAN_IRQHandler+0x1b8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001190:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001194:	e74e      	b.n	8001034 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff ff1a 	bl	8000fd0 <HAL_CAN_TxMailbox1AbortCallback>
 800119c:	e74a      	b.n	8001034 <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119e:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 80011a2:	d002      	beq.n	80011aa <HAL_CAN_IRQHandler+0x1cc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a4:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80011a8:	e752      	b.n	8001050 <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011aa:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 80011ae:	d002      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x1d8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011b0:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 80011b4:	e74c      	b.n	8001050 <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011b6:	4628      	mov	r0, r5
 80011b8:	f7ff ff0b 	bl	8000fd2 <HAL_CAN_TxMailbox2AbortCallback>
 80011bc:	e748      	b.n	8001050 <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 80011be:	2b50      	cmp	r3, #80	@ 0x50
 80011c0:	d010      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x206>
 80011c2:	2b60      	cmp	r3, #96	@ 0x60
 80011c4:	d1bb      	bne.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011c6:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 80011ca:	e7b8      	b.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_STF;
 80011cc:	f044 0408 	orr.w	r4, r4, #8
            break;
 80011d0:	e7b5      	b.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011d2:	f044 0410 	orr.w	r4, r4, #16
            break;
 80011d6:	e7b2      	b.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011d8:	f044 0420 	orr.w	r4, r4, #32
            break;
 80011dc:	e7af      	b.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BR;
 80011de:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 80011e2:	e7ac      	b.n	800113e <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BD;
 80011e4:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 80011e8:	e7a9      	b.n	800113e <HAL_CAN_IRQHandler+0x160>

080011ea <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ea:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 80011ee:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 80011f2:	68d1      	ldr	r1, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80011fa:	0409      	lsls	r1, r1, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001200:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001202:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800120c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800120e:	4770      	bx	lr

08001210 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001214:	b530      	push	{r4, r5, lr}
 8001216:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800121a:	68dc      	ldr	r4, [r3, #12]
 800121c:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001224:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122c:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122e:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	bf94      	ite	ls
 8001234:	2400      	movls	r4, #0
 8001236:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	fa05 f303 	lsl.w	r3, r5, r3
 800123c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	40a5      	lsls	r5, r4
  if ((int32_t)(IRQn) >= 0)
 8001242:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	fa03 f304 	lsl.w	r3, r3, r4
 800124c:	ea43 0302 	orr.w	r3, r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	bfb6      	itet	lt
 8001252:	f64e 42fc 	movwlt	r2, #60668	@ 0xecfc
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	f2ce 0200 	movtlt	r2, #57344	@ 0xe000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	bfb8      	it	lt
 8001264:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	b2db      	uxtb	r3, r3
 800126a:	bfab      	itete	ge
 800126c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	1812      	addlt	r2, r2, r0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	7613      	strblt	r3, [r2, #24]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001278:	bd30      	pop	{r4, r5, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800127a:	2800      	cmp	r0, #0
 800127c:	db0a      	blt.n	8001294 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	2301      	movs	r3, #1
 8001280:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001284:	0941      	lsrs	r1, r0, #5
 8001286:	f000 001f 	and.w	r0, r0, #31
 800128a:	4083      	lsls	r3, r0
 800128c:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8001290:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001294:	4770      	bx	lr

08001296 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001296:	3801      	subs	r0, #1
 8001298:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800129c:	d20e      	bcs.n	80012bc <HAL_SYSTICK_Config+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	21f0      	movs	r1, #240	@ 0xf0
 80012a8:	f2ce 0200 	movt	r2, #57344	@ 0xe000
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012be:	4770      	bx	lr

080012c0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012c0:	2800      	cmp	r0, #0
 80012c2:	db0b      	blt.n	80012dc <HAL_NVIC_ClearPendingIRQ+0x1c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80012ca:	0943      	lsrs	r3, r0, #5
 80012cc:	f000 001f 	and.w	r0, r0, #31
 80012d0:	4082      	lsls	r2, r0
 80012d2:	f2ce 0100 	movt	r1, #57344	@ 0xe000
 80012d6:	3360      	adds	r3, #96	@ 0x60
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80012dc:	4770      	bx	lr

080012de <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e2:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80012e6:	68d3      	ldr	r3, [r2, #12]
 80012e8:	f013 0310 	ands.w	r3, r3, #16
 80012ec:	d008      	beq.n	8001300 <FLASH_SetErrorCode+0x22>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012ee:	f240 03d0 	movw	r3, #208	@ 0xd0
 80012f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012f6:	69d9      	ldr	r1, [r3, #28]
 80012f8:	f041 0102 	orr.w	r1, r1, #2
 80012fc:	61d9      	str	r1, [r3, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80012fe:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001300:	68d2      	ldr	r2, [r2, #12]
 8001302:	0750      	lsls	r0, r2, #29
 8001304:	d509      	bpl.n	800131a <FLASH_SetErrorCode+0x3c>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001306:	f240 02d0 	movw	r2, #208	@ 0xd0
 800130a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800130e:	69d1      	ldr	r1, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001310:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001314:	f041 0101 	orr.w	r1, r1, #1
 8001318:	61d1      	str	r1, [r2, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800131a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800131e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8001322:	69d1      	ldr	r1, [r2, #28]
 8001324:	07c9      	lsls	r1, r1, #31
 8001326:	d50b      	bpl.n	8001340 <FLASH_SetErrorCode+0x62>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001328:	f240 01d0 	movw	r1, #208	@ 0xd0
 800132c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001330:	69c8      	ldr	r0, [r1, #28]
 8001332:	f040 0004 	orr.w	r0, r0, #4
 8001336:	61c8      	str	r0, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001338:	69d1      	ldr	r1, [r2, #28]
 800133a:	f021 0101 	bic.w	r1, r1, #1
 800133e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001340:	60d3      	str	r3, [r2, #12]
}  
 8001342:	4770      	bx	lr

08001344 <HAL_FLASH_EndOfOperationCallback>:
}
 8001344:	4770      	bx	lr

08001346 <HAL_FLASH_OperationErrorCallback>:
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 8001346:	4770      	bx	lr

08001348 <HAL_FLASH_IRQHandler>:
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
{
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	f240 04d0 	movw	r4, #208	@ 0xd0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001352:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800135c:	f012 0f10 	tst.w	r2, #16
 8001360:	d102      	bne.n	8001368 <HAL_FLASH_IRQHandler+0x20>
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	075a      	lsls	r2, r3, #29
 8001366:	d50a      	bpl.n	800137e <HAL_FLASH_IRQHandler+0x36>
    pFlash.Address = 0xFFFFFFFFU;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 800136c:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 800136e:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8001370:	f7ff ffb5 	bl	80012de <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001374:	4628      	mov	r0, r5
 8001376:	f7ff ffe6 	bl	8001346 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800137a:	2300      	movs	r3, #0
 800137c:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800137e:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
 8001382:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001386:	68eb      	ldr	r3, [r5, #12]
 8001388:	069b      	lsls	r3, r3, #26
 800138a:	d518      	bpl.n	80013be <HAL_FLASH_IRQHandler+0x76>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800138c:	2320      	movs	r3, #32
 800138e:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001390:	7823      	ldrb	r3, [r4, #0]
 8001392:	b1a3      	cbz	r3, 80013be <HAL_FLASH_IRQHandler+0x76>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001394:	7823      	ldrb	r3, [r4, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d12a      	bne.n	80013f0 <HAL_FLASH_IRQHandler+0xa8>
        pFlash.DataRemaining--;
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	3b01      	subs	r3, #1
 800139e:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	b1f3      	cbz	r3, 80013e2 <HAL_FLASH_IRQHandler+0x9a>
          addresstmp = pFlash.Address;
 80013a4:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80013a6:	f7ff ffcd 	bl	8001344 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80013aa:	68a0      	ldr	r0, [r4, #8]
 80013ac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
          pFlash.Address = addresstmp;
 80013b0:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013b2:	692b      	ldr	r3, [r5, #16]
 80013b4:	f023 0302 	bic.w	r3, r3, #2
 80013b8:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 80013ba:	f000 f8f9 	bl	80015b0 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80013be:	7823      	ldrb	r3, [r4, #0]
 80013c0:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80013c4:	b963      	cbnz	r3, 80013e0 <HAL_FLASH_IRQHandler+0x98>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	f022 0207 	bic.w	r2, r2, #7
 80013d4:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	f422 52a0 	bic.w	r2, r2, #5120	@ 0x1400
 80013dc:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80013de:	7621      	strb	r1, [r4, #24]
}
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80013e2:	f04f 30ff 	mov.w	r0, #4294967295
 80013e6:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80013e8:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80013ea:	f7ff ffab 	bl	8001344 <HAL_FLASH_EndOfOperationCallback>
 80013ee:	e7e6      	b.n	80013be <HAL_FLASH_IRQHandler+0x76>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80013f0:	7823      	ldrb	r3, [r4, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d109      	bne.n	800140a <HAL_FLASH_IRQHandler+0xc2>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013f6:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80013f8:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013fa:	f023 0304 	bic.w	r3, r3, #4
 80013fe:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8001400:	f7ff ffa0 	bl	8001344 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001404:	2300      	movs	r3, #0
 8001406:	7023      	strb	r3, [r4, #0]
 8001408:	e7d9      	b.n	80013be <HAL_FLASH_IRQHandler+0x76>
        pFlash.DataRemaining--;
 800140a:	6863      	ldr	r3, [r4, #4]
 800140c:	3b01      	subs	r3, #1
 800140e:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	b1d3      	cbz	r3, 800144a <HAL_FLASH_IRQHandler+0x102>
          pFlash.Address += 2U;
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	3302      	adds	r3, #2
 8001418:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 800141a:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 800141c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8001420:	0c02      	lsrs	r2, r0, #16
 8001422:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001426:	0c0b      	lsrs	r3, r1, #16
 8001428:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800142c:	692b      	ldr	r3, [r5, #16]
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001434:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800143c:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800143e:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8001446:	8032      	strh	r2, [r6, #0]
}
 8001448:	e7b9      	b.n	80013be <HAL_FLASH_IRQHandler+0x76>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800144a:	7823      	ldrb	r3, [r4, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d106      	bne.n	800145e <HAL_FLASH_IRQHandler+0x116>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001450:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001452:	f7ff ff77 	bl	8001344 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	60a3      	str	r3, [r4, #8]
 800145c:	e7d2      	b.n	8001404 <HAL_FLASH_IRQHandler+0xbc>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800145e:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001460:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001462:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001464:	bf0c      	ite	eq
 8001466:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001468:	3806      	subne	r0, #6
 800146a:	e7f2      	b.n	8001452 <HAL_FLASH_IRQHandler+0x10a>

0800146c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800146c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001470:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001474:	6918      	ldr	r0, [r3, #16]
 8001476:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 800147a:	d00c      	beq.n	8001496 <HAL_FLASH_Unlock+0x2a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800147c:	f240 1223 	movw	r2, #291	@ 0x123
 8001480:	f2c4 5267 	movt	r2, #17767	@ 0x4567
 8001484:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001486:	f648 12ab 	movw	r2, #35243	@ 0x89ab
 800148a:	f6cc 52ef 	movt	r2, #52719	@ 0xcdef
 800148e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001490:	6918      	ldr	r0, [r3, #16]
 8001492:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001496:	4770      	bx	lr

08001498 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80014a0:	691a      	ldr	r2, [r3, #16]
}
 80014a2:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80014a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014a8:	611a      	str	r2, [r3, #16]
}
 80014aa:	4770      	bx	lr

080014ac <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 80014ac:	f240 03d0 	movw	r3, #208	@ 0xd0
 80014b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014b4:	69d8      	ldr	r0, [r3, #28]
}
 80014b6:	4770      	bx	lr

080014b8 <FLASH_WaitForLastOperation>:
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fb50 	bl	8000b60 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014c0:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  uint32_t tickstart = HAL_GetTick();
 80014c4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014c6:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 80014ca:	68e3      	ldr	r3, [r4, #12]
 80014cc:	07d8      	lsls	r0, r3, #31
 80014ce:	d412      	bmi.n	80014f6 <FLASH_WaitForLastOperation+0x3e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014d0:	68e3      	ldr	r3, [r4, #12]
 80014d2:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014d4:	bf44      	itt	mi
 80014d6:	2320      	movmi	r3, #32
 80014d8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014da:	68e3      	ldr	r3, [r4, #12]
 80014dc:	06da      	lsls	r2, r3, #27
 80014de:	d406      	bmi.n	80014ee <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80014e0:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014e2:	07db      	lsls	r3, r3, #31
 80014e4:	d403      	bmi.n	80014ee <FLASH_WaitForLastOperation+0x36>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014e6:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80014e8:	f010 0004 	ands.w	r0, r0, #4
 80014ec:	d007      	beq.n	80014fe <FLASH_WaitForLastOperation+0x46>
    FLASH_SetErrorCode();
 80014ee:	f7ff fef6 	bl	80012de <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	e003      	b.n	80014fe <FLASH_WaitForLastOperation+0x46>
    if (Timeout != HAL_MAX_DELAY)
 80014f6:	1c6b      	adds	r3, r5, #1
 80014f8:	d0e7      	beq.n	80014ca <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014fa:	b90d      	cbnz	r5, 8001500 <FLASH_WaitForLastOperation+0x48>
        return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
}
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001500:	f7ff fb2e 	bl	8000b60 <HAL_GetTick>
 8001504:	1b80      	subs	r0, r0, r6
 8001506:	42a8      	cmp	r0, r5
 8001508:	d9df      	bls.n	80014ca <FLASH_WaitForLastOperation+0x12>
 800150a:	e7f7      	b.n	80014fc <FLASH_WaitForLastOperation+0x44>

0800150c <HAL_FLASH_Program>:
{
 800150c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001510:	f240 06d0 	movw	r6, #208	@ 0xd0
 8001514:	f2c2 0600 	movt	r6, #8192	@ 0x2000
{
 8001518:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800151a:	7e33      	ldrb	r3, [r6, #24]
{
 800151c:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800151e:	2b01      	cmp	r3, #1
{
 8001520:	4688      	mov	r8, r1
 8001522:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8001524:	d042      	beq.n	80015ac <HAL_FLASH_Program+0xa0>
 8001526:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001528:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 800152c:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800152e:	f7ff ffc3 	bl	80014b8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001532:	bbb8      	cbnz	r0, 80015a4 <HAL_FLASH_Program+0x98>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001534:	2d01      	cmp	r5, #1
 8001536:	d003      	beq.n	8001540 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001538:	2d02      	cmp	r5, #2
 800153a:	bf14      	ite	ne
 800153c:	2504      	movne	r5, #4
 800153e:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8001540:	f04f 0a00 	mov.w	sl, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001544:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001548:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800154a:	f2c4 0b02 	movt	fp, #16386	@ 0x4002
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800154e:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8001552:	f1c4 0120 	rsb	r1, r4, #32
 8001556:	f1a4 0220 	sub.w	r2, r4, #32
 800155a:	fa07 f101 	lsl.w	r1, r7, r1
 800155e:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001562:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001564:	430c      	orrs	r4, r1
 8001566:	fa27 f202 	lsr.w	r2, r7, r2
 800156a:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800156c:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001570:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800157a:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 800157e:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001582:	f7ff ff99 	bl	80014b8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001586:	f8db 2010 	ldr.w	r2, [fp, #16]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8001592:	b938      	cbnz	r0, 80015a4 <HAL_FLASH_Program+0x98>
    for (index = 0U; index < nbiterations; index++)
 8001594:	f10a 0a01 	add.w	sl, sl, #1
 8001598:	fa5f f28a 	uxtb.w	r2, sl
 800159c:	4295      	cmp	r5, r2
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	d8d4      	bhi.n	800154e <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 80015a4:	2300      	movs	r3, #0
 80015a6:	7633      	strb	r3, [r6, #24]
}
 80015a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80015ac:	2002      	movs	r0, #2
 80015ae:	e7fb      	b.n	80015a8 <HAL_FLASH_Program+0x9c>

080015b0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015b0:	f240 03d0 	movw	r3, #208	@ 0xd0
 80015b4:	2200      	movs	r2, #0
 80015b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015ba:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	f042 0202 	orr.w	r2, r2, #2
 80015ca:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015cc:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015d4:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015d6:	4770      	bx	lr

080015d8 <HAL_FLASHEx_Erase>:
{
 80015d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80015dc:	f240 05d0 	movw	r5, #208	@ 0xd0
 80015e0:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80015e4:	7e2b      	ldrb	r3, [r5, #24]
{
 80015e6:	4606      	mov	r6, r0
  __HAL_LOCK(&pFlash);
 80015e8:	2b01      	cmp	r3, #1
{
 80015ea:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80015ec:	d04a      	beq.n	8001684 <HAL_FLASHEx_Erase+0xac>
 80015ee:	2401      	movs	r4, #1
 80015f0:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015f2:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80015f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d11d      	bne.n	8001638 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80015fc:	f7ff ff5c 	bl	80014b8 <FLASH_WaitForLastOperation>
 8001600:	b120      	cbz	r0, 800160c <HAL_FLASHEx_Erase+0x34>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001602:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001604:	2300      	movs	r3, #0
 8001606:	762b      	strb	r3, [r5, #24]
}
 8001608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800160c:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001610:	61e8      	str	r0, [r5, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001612:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 8001616:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001618:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001622:	6923      	ldr	r3, [r4, #16]
 8001624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001628:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800162a:	f7ff ff45 	bl	80014b8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800162e:	6923      	ldr	r3, [r4, #16]
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6123      	str	r3, [r4, #16]
 8001636:	e7e5      	b.n	8001604 <HAL_FLASHEx_Erase+0x2c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001638:	f7ff ff3e 	bl	80014b8 <FLASH_WaitForLastOperation>
 800163c:	2800      	cmp	r0, #0
 800163e:	d1e0      	bne.n	8001602 <HAL_FLASHEx_Erase+0x2a>
        *PageError = 0xFFFFFFFFU;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
  HAL_StatusTypeDef status = HAL_ERROR;
 8001644:	4620      	mov	r0, r4
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001646:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
        *PageError = 0xFFFFFFFFU;
 800164a:	f8c8 3000 	str.w	r3, [r8]
        for(address = pEraseInit->PageAddress;
 800164e:	68b7      	ldr	r7, [r6, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001650:	f2c4 0402 	movt	r4, #16386	@ 0x4002
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001654:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001658:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800165c:	42bb      	cmp	r3, r7
 800165e:	d9d1      	bls.n	8001604 <HAL_FLASHEx_Erase+0x2c>
          FLASH_PageErase(address);
 8001660:	4638      	mov	r0, r7
 8001662:	f7ff ffa5 	bl	80015b0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001666:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800166a:	f7ff ff25 	bl	80014b8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	f023 0302 	bic.w	r3, r3, #2
 8001674:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001676:	b110      	cbz	r0, 800167e <HAL_FLASHEx_Erase+0xa6>
            *PageError = address;
 8001678:	f8c8 7000 	str.w	r7, [r8]
            break;
 800167c:	e7c2      	b.n	8001604 <HAL_FLASHEx_Erase+0x2c>
            address += FLASH_PAGE_SIZE)
 800167e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001682:	e7e7      	b.n	8001654 <HAL_FLASHEx_Erase+0x7c>
  __HAL_LOCK(&pFlash);
 8001684:	2002      	movs	r0, #2
 8001686:	e7bf      	b.n	8001608 <HAL_FLASHEx_Erase+0x30>

08001688 <HAL_GPIO_Init>:
{
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001688:	2200      	movs	r2, #0
{
 800168a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168e:	4614      	mov	r4, r2
{
 8001690:	b087      	sub	sp, #28
      switch (GPIO_Init->Mode)
 8001692:	f2c1 0422 	movt	r4, #4130	@ 0x1022
 8001696:	9400      	str	r4, [sp, #0]
 8001698:	4614      	mov	r4, r2
 800169a:	f2c1 0431 	movt	r4, #4145	@ 0x1031
 800169e:	9401      	str	r4, [sp, #4]
 80016a0:	4614      	mov	r4, r2
 80016a2:	f2c1 0432 	movt	r4, #4146	@ 0x1032
 80016a6:	9402      	str	r4, [sp, #8]
 80016a8:	4614      	mov	r4, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ae:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
 80016b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
      switch (GPIO_Init->Mode)
 80016b6:	4694      	mov	ip, r2
 80016b8:	4617      	mov	r7, r2
  uint32_t position = 0x00u;
 80016ba:	4615      	mov	r5, r2
      switch (GPIO_Init->Mode)
 80016bc:	f2c1 0412 	movt	r4, #4114	@ 0x1012
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c0:	f2c4 0602 	movt	r6, #16386	@ 0x4002
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	f2c4 0b01 	movt	fp, #16385	@ 0x4001
 80016c8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
      switch (GPIO_Init->Mode)
 80016cc:	9403      	str	r4, [sp, #12]
 80016ce:	f2c1 0c21 	movt	ip, #4129	@ 0x1021
 80016d2:	f2c1 0711 	movt	r7, #4113	@ 0x1011
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	f8d1 e000 	ldr.w	lr, [r1]
 80016da:	fa3e f405 	lsrs.w	r4, lr, r5
 80016de:	d102      	bne.n	80016e6 <HAL_GPIO_Init+0x5e>
      }
    }

	position++;
  }
}
 80016e0:	b007      	add	sp, #28
 80016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80016e6:	f04f 0801 	mov.w	r8, #1
 80016ea:	fa08 f805 	lsl.w	r8, r8, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ee:	ea0e 0408 	and.w	r4, lr, r8
    if (iocurrent == ioposition)
 80016f2:	ea38 0e0e 	bics.w	lr, r8, lr
 80016f6:	f040 80a9 	bne.w	800184c <HAL_GPIO_Init+0x1c4>
      switch (GPIO_Init->Mode)
 80016fa:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80016fe:	f1be 0f03 	cmp.w	lr, #3
 8001702:	d809      	bhi.n	8001718 <HAL_GPIO_Init+0x90>
 8001704:	f10e 3eff 	add.w	lr, lr, #4294967295
 8001708:	f1be 0f02 	cmp.w	lr, #2
 800170c:	f200 80ae 	bhi.w	800186c <HAL_GPIO_Init+0x1e4>
 8001710:	e8df f00e 	tbb	[pc, lr]
 8001714:	c5c0      	.short	0xc5c0
 8001716:	cb          	.byte	0xcb
 8001717:	00          	.byte	0x00
 8001718:	f1be 0f12 	cmp.w	lr, #18
 800171c:	f000 80c2 	beq.w	80018a4 <HAL_GPIO_Init+0x21c>
 8001720:	f200 8096 	bhi.w	8001850 <HAL_GPIO_Init+0x1c8>
 8001724:	f1be 0f11 	cmp.w	lr, #17
 8001728:	f000 80b6 	beq.w	8001898 <HAL_GPIO_Init+0x210>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172c:	2cff      	cmp	r4, #255	@ 0xff
 800172e:	bf94      	ite	ls
 8001730:	4682      	movls	sl, r0
 8001732:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001736:	f8da 8000 	ldr.w	r8, [sl]
 800173a:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 800173e:	46c1      	mov	r9, r8
 8001740:	f04f 080f 	mov.w	r8, #15
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001744:	bf88      	it	hi
 8001746:	f1ae 0e20 	subhi.w	lr, lr, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174a:	fa08 f80e 	lsl.w	r8, r8, lr
 800174e:	ea29 0808 	bic.w	r8, r9, r8
 8001752:	fa02 fe0e 	lsl.w	lr, r2, lr
 8001756:	ea48 080e 	orr.w	r8, r8, lr
 800175a:	f8ca 8000 	str.w	r8, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001762:	f01e 5f80 	tst.w	lr, #268435456	@ 0x10000000
 8001766:	d071      	beq.n	800184c <HAL_GPIO_Init+0x1c4>
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001768:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_AFIO_CLK_ENABLE();
 800176c:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8001770:	f025 0803 	bic.w	r8, r5, #3
 8001774:	f04e 0e01 	orr.w	lr, lr, #1
 8001778:	f8c6 e018 	str.w	lr, [r6, #24]
 800177c:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8001780:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8001784:	f00e 0e01 	and.w	lr, lr, #1
 8001788:	f8cd e014 	str.w	lr, [sp, #20]
 800178c:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001790:	f005 0a03 	and.w	sl, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001794:	f8dd e014 	ldr.w	lr, [sp, #20]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001798:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800179c:	f8d8 e008 	ldr.w	lr, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a0:	fa09 f90a 	lsl.w	r9, r9, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a4:	4558      	cmp	r0, fp
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a6:	ea2e 0909 	bic.w	r9, lr, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017aa:	f000 8082 	beq.w	80018b2 <HAL_GPIO_Init+0x22a>
 80017ae:	f44f 6e40 	mov.w	lr, #3072	@ 0xc00
 80017b2:	f2c4 0e01 	movt	lr, #16385	@ 0x4001
 80017b6:	4570      	cmp	r0, lr
 80017b8:	d07e      	beq.n	80018b8 <HAL_GPIO_Init+0x230>
 80017ba:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 80017be:	f2c4 0e01 	movt	lr, #16385	@ 0x4001
 80017c2:	4570      	cmp	r0, lr
 80017c4:	d07b      	beq.n	80018be <HAL_GPIO_Init+0x236>
 80017c6:	f44f 5ea0 	mov.w	lr, #5120	@ 0x1400
 80017ca:	f2c4 0e01 	movt	lr, #16385	@ 0x4001
 80017ce:	4570      	cmp	r0, lr
 80017d0:	bf14      	ite	ne
 80017d2:	f04f 0e04 	movne.w	lr, #4
 80017d6:	f04f 0e03 	moveq.w	lr, #3
 80017da:	fa0e fe0a 	lsl.w	lr, lr, sl
 80017de:	ea4e 0e09 	orr.w	lr, lr, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	f8c8 e008 	str.w	lr, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80017ea:	f41e 1f80 	tst.w	lr, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ee:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017f2:	bf14      	ite	ne
 80017f4:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f8:	ea2e 0e04 	biceq.w	lr, lr, r4
 80017fc:	f8c3 e008 	str.w	lr, [r3, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001804:	f41e 1f00 	tst.w	lr, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001808:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800180c:	bf14      	ite	ne
 800180e:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001812:	ea2e 0e04 	biceq.w	lr, lr, r4
 8001816:	f8c3 e00c 	str.w	lr, [r3, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800181a:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800181e:	f41e 3f00 	tst.w	lr, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001822:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001826:	bf14      	ite	ne
 8001828:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182c:	ea2e 0e04 	biceq.w	lr, lr, r4
 8001830:	f8c3 e004 	str.w	lr, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001834:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001838:	f41e 3f80 	tst.w	lr, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800183c:	f8d3 e000 	ldr.w	lr, [r3]
 8001840:	bf14      	ite	ne
 8001842:	ea4e 0404 	orrne.w	r4, lr, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001846:	ea2e 0404 	biceq.w	r4, lr, r4
 800184a:	601c      	str	r4, [r3, #0]
	position++;
 800184c:	3501      	adds	r5, #1
 800184e:	e742      	b.n	80016d6 <HAL_GPIO_Init+0x4e>
      switch (GPIO_Init->Mode)
 8001850:	f8dd 9000 	ldr.w	r9, [sp]
 8001854:	45ce      	cmp	lr, r9
 8001856:	d009      	beq.n	800186c <HAL_GPIO_Init+0x1e4>
 8001858:	d814      	bhi.n	8001884 <HAL_GPIO_Init+0x1fc>
 800185a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800185e:	45ce      	cmp	lr, r9
 8001860:	d004      	beq.n	800186c <HAL_GPIO_Init+0x1e4>
 8001862:	45e6      	cmp	lr, ip
 8001864:	d002      	beq.n	800186c <HAL_GPIO_Init+0x1e4>
 8001866:	45be      	cmp	lr, r7
 8001868:	f47f af60 	bne.w	800172c <HAL_GPIO_Init+0xa4>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186c:	688a      	ldr	r2, [r1, #8]
 800186e:	b1f2      	cbz	r2, 80018ae <HAL_GPIO_Init+0x226>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001870:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001872:	bf08      	it	eq
 8001874:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800187c:	bf18      	it	ne
 800187e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001882:	e753      	b.n	800172c <HAL_GPIO_Init+0xa4>
      switch (GPIO_Init->Mode)
 8001884:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001888:	45ce      	cmp	lr, r9
 800188a:	d0ef      	beq.n	800186c <HAL_GPIO_Init+0x1e4>
 800188c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8001890:	45ce      	cmp	lr, r9
 8001892:	e7e9      	b.n	8001868 <HAL_GPIO_Init+0x1e0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001894:	68ca      	ldr	r2, [r1, #12]
          break;
 8001896:	e749      	b.n	800172c <HAL_GPIO_Init+0xa4>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	68ca      	ldr	r2, [r1, #12]
 800189a:	3204      	adds	r2, #4
          break;
 800189c:	e746      	b.n	800172c <HAL_GPIO_Init+0xa4>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	68ca      	ldr	r2, [r1, #12]
 80018a0:	3208      	adds	r2, #8
          break;
 80018a2:	e743      	b.n	800172c <HAL_GPIO_Init+0xa4>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	68ca      	ldr	r2, [r1, #12]
 80018a6:	320c      	adds	r2, #12
          break;
 80018a8:	e740      	b.n	800172c <HAL_GPIO_Init+0xa4>
      switch (GPIO_Init->Mode)
 80018aa:	2200      	movs	r2, #0
 80018ac:	e73e      	b.n	800172c <HAL_GPIO_Init+0xa4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2204      	movs	r2, #4
 80018b0:	e73c      	b.n	800172c <HAL_GPIO_Init+0xa4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b2:	f04f 0e00 	mov.w	lr, #0
 80018b6:	e790      	b.n	80017da <HAL_GPIO_Init+0x152>
 80018b8:	f04f 0e01 	mov.w	lr, #1
 80018bc:	e78d      	b.n	80017da <HAL_GPIO_Init+0x152>
 80018be:	f04f 0e02 	mov.w	lr, #2
 80018c2:	e78a      	b.n	80017da <HAL_GPIO_Init+0x152>

080018c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c4:	b10a      	cbz	r2, 80018ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c6:	6101      	str	r1, [r0, #16]
  }
}
 80018c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ca:	0409      	lsls	r1, r1, #16
 80018cc:	e7fb      	b.n	80018c6 <HAL_GPIO_WritePin+0x2>

080018ce <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80018ce:	4770      	bx	lr

080018d0 <HAL_PWR_PVD_IRQHandler>:
{
 80018d0:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80018d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80018d6:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80018da:	6963      	ldr	r3, [r4, #20]
 80018dc:	03db      	lsls	r3, r3, #15
 80018de:	d504      	bpl.n	80018ea <HAL_PWR_PVD_IRQHandler+0x1a>
    HAL_PWR_PVDCallback();
 80018e0:	f7ff fff5 	bl	80018ce <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80018e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e8:	6163      	str	r3, [r4, #20]
}
 80018ea:	bd10      	pop	{r4, pc}

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	4604      	mov	r4, r0
 80018f2:	b350      	cbz	r0, 800194a <HAL_RCC_OscConfig+0x5e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	07db      	lsls	r3, r3, #31
 80018f8:	d410      	bmi.n	800191c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	079f      	lsls	r7, r3, #30
 80018fe:	d45c      	bmi.n	80019ba <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	0719      	lsls	r1, r3, #28
 8001904:	f100 8098 	bmi.w	8001a38 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	075a      	lsls	r2, r3, #29
 800190c:	f100 80cc 	bmi.w	8001aa8 <HAL_RCC_OscConfig+0x1bc>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001910:	69e3      	ldr	r3, [r4, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8131 	bne.w	8001b7a <HAL_RCC_OscConfig+0x28e>
        }
      }
    }
  }

  return HAL_OK;
 8001918:	2000      	movs	r0, #0
 800191a:	e02e      	b.n	800197a <HAL_RCC_OscConfig+0x8e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800191c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8001920:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001924:	686b      	ldr	r3, [r5, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b04      	cmp	r3, #4
 800192c:	d007      	beq.n	800193e <HAL_RCC_OscConfig+0x52>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800192e:	686b      	ldr	r3, [r5, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d10a      	bne.n	800194e <HAL_RCC_OscConfig+0x62>
 8001938:	686b      	ldr	r3, [r5, #4]
 800193a:	03de      	lsls	r6, r3, #15
 800193c:	d507      	bpl.n	800194e <HAL_RCC_OscConfig+0x62>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	039d      	lsls	r5, r3, #14
 8001942:	d5da      	bpl.n	80018fa <HAL_RCC_OscConfig+0xe>
 8001944:	6863      	ldr	r3, [r4, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1d7      	bne.n	80018fa <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800194a:	2001      	movs	r0, #1
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194e:	6863      	ldr	r3, [r4, #4]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d114      	bne.n	8001980 <HAL_RCC_OscConfig+0x94>
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195e:	6863      	ldr	r3, [r4, #4]
 8001960:	b1fb      	cbz	r3, 80019a2 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8001962:	f7ff f8fd 	bl	8000b60 <HAL_GetTick>
 8001966:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	0398      	lsls	r0, r3, #14
 800196c:	d4c5      	bmi.n	80018fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196e:	f7ff f8f7 	bl	8000b60 <HAL_GetTick>
 8001972:	1b80      	subs	r0, r0, r6
 8001974:	2864      	cmp	r0, #100	@ 0x64
 8001976:	d9f7      	bls.n	8001968 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001978:	2003      	movs	r0, #3
}
 800197a:	b002      	add	sp, #8
 800197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	b93b      	cbnz	r3, 8001992 <HAL_RCC_OscConfig+0xa6>
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001988:	602b      	str	r3, [r5, #0]
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001990:	e7e4      	b.n	800195c <HAL_RCC_OscConfig+0x70>
 8001992:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	d1f4      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800199a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199e:	602b      	str	r3, [r5, #0]
 80019a0:	e7d9      	b.n	8001956 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80019a2:	f7ff f8dd 	bl	8000b60 <HAL_GetTick>
 80019a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	0399      	lsls	r1, r3, #14
 80019ac:	d5a5      	bpl.n	80018fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ae:	f7ff f8d7 	bl	8000b60 <HAL_GetTick>
 80019b2:	1b80      	subs	r0, r0, r6
 80019b4:	2864      	cmp	r0, #100	@ 0x64
 80019b6:	d9f7      	bls.n	80019a8 <HAL_RCC_OscConfig+0xbc>
 80019b8:	e7de      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ba:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80019be:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 80019c2:	686b      	ldr	r3, [r5, #4]
 80019c4:	f013 0f0c 	tst.w	r3, #12
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	686b      	ldr	r3, [r5, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d110      	bne.n	80019f6 <HAL_RCC_OscConfig+0x10a>
 80019d4:	686b      	ldr	r3, [r5, #4]
 80019d6:	03da      	lsls	r2, r3, #15
 80019d8:	d40d      	bmi.n	80019f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	079b      	lsls	r3, r3, #30
 80019de:	d502      	bpl.n	80019e6 <HAL_RCC_OscConfig+0xfa>
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d1b1      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	6962      	ldr	r2, [r4, #20]
 80019ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	e784      	b.n	8001900 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	2300      	movs	r3, #0
 80019f8:	6922      	ldr	r2, [r4, #16]
 80019fa:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80019fe:	b16a      	cbz	r2, 8001a1c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8ac 	bl	8000b60 <HAL_GetTick>
 8001a08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	079f      	lsls	r7, r3, #30
 8001a0e:	d4ea      	bmi.n	80019e6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff f8a6 	bl	8000b60 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9f7      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11e>
 8001a1a:	e7ad      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001a1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f89f 	bl	8000b60 <HAL_GetTick>
 8001a22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	0798      	lsls	r0, r3, #30
 8001a28:	f57f af6a 	bpl.w	8001900 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f898 	bl	8000b60 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f6      	bls.n	8001a24 <HAL_RCC_OscConfig+0x138>
 8001a36:	e79f      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a38:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	69a2      	ldr	r2, [r4, #24]
 8001a40:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001a44:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8001a48:	b1fa      	cbz	r2, 8001a8a <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001a50:	f7ff f886 	bl	8000b60 <HAL_GetTick>
 8001a54:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001a58:	079b      	lsls	r3, r3, #30
 8001a5a:	d510      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x192>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a5c:	f240 030c 	movw	r3, #12
 8001a60:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001a64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a6e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001a70:	bf00      	nop
  }
  while (Delay --);
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	1e5a      	subs	r2, r3, #1
 8001a76:	9201      	str	r2, [sp, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <HAL_RCC_OscConfig+0x184>
 8001a7c:	e744      	b.n	8001908 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f86f 	bl	8000b60 <HAL_GetTick>
 8001a82:	1b80      	subs	r0, r0, r6
 8001a84:	2802      	cmp	r0, #2
 8001a86:	d9e6      	bls.n	8001a56 <HAL_RCC_OscConfig+0x16a>
 8001a88:	e776      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f867 	bl	8000b60 <HAL_GetTick>
 8001a92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001a96:	079f      	lsls	r7, r3, #30
 8001a98:	f57f af36 	bpl.w	8001908 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f860 	bl	8000b60 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	2802      	cmp	r0, #2
 8001aa4:	d9f6      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1a8>
 8001aa6:	e767      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa8:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8001aac:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001ab0:	69eb      	ldr	r3, [r5, #28]
 8001ab2:	00d8      	lsls	r0, r3, #3
 8001ab4:	d42a      	bmi.n	8001b0c <HAL_RCC_OscConfig+0x220>
      pwrclkchanged = SET;
 8001ab6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	69eb      	ldr	r3, [r5, #28]
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	61eb      	str	r3, [r5, #28]
 8001ac0:	69eb      	ldr	r3, [r5, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	f44f 46e0 	mov.w	r6, #28672	@ 0x7000
 8001ace:	f2c4 0600 	movt	r6, #16384	@ 0x4000
 8001ad2:	6833      	ldr	r3, [r6, #0]
 8001ad4:	05d9      	lsls	r1, r3, #23
 8001ad6:	d51b      	bpl.n	8001b10 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	68e3      	ldr	r3, [r4, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d129      	bne.n	8001b32 <HAL_RCC_OscConfig+0x246>
 8001ade:	6a2b      	ldr	r3, [r5, #32]
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	622b      	str	r3, [r5, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d038      	beq.n	8001b5e <HAL_RCC_OscConfig+0x272>
      tickstart = HAL_GetTick();
 8001aec:	f7ff f838 	bl	8000b60 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001af4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	6a2b      	ldr	r3, [r5, #32]
 8001af8:	079b      	lsls	r3, r3, #30
 8001afa:	d52a      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001afc:	2f00      	cmp	r7, #0
 8001afe:	f43f af07 	beq.w	8001910 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	69eb      	ldr	r3, [r5, #28]
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	61eb      	str	r3, [r5, #28]
 8001b0a:	e701      	b.n	8001910 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2700      	movs	r7, #0
 8001b0e:	e7dc      	b.n	8001aca <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	6833      	ldr	r3, [r6, #0]
 8001b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b16:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b18:	f7ff f822 	bl	8000b60 <HAL_GetTick>
 8001b1c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	6833      	ldr	r3, [r6, #0]
 8001b20:	05da      	lsls	r2, r3, #23
 8001b22:	d4d9      	bmi.n	8001ad8 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff f81c 	bl	8000b60 <HAL_GetTick>
 8001b28:	eba0 0008 	sub.w	r0, r0, r8
 8001b2c:	2864      	cmp	r0, #100	@ 0x64
 8001b2e:	d9f6      	bls.n	8001b1e <HAL_RCC_OscConfig+0x232>
 8001b30:	e722      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b32:	b93b      	cbnz	r3, 8001b44 <HAL_RCC_OscConfig+0x258>
 8001b34:	6a2b      	ldr	r3, [r5, #32]
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	622b      	str	r3, [r5, #32]
 8001b3c:	6a2b      	ldr	r3, [r5, #32]
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	e7cf      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1f8>
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	6a2b      	ldr	r3, [r5, #32]
 8001b48:	d1f5      	bne.n	8001b36 <HAL_RCC_OscConfig+0x24a>
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	622b      	str	r3, [r5, #32]
 8001b50:	e7c5      	b.n	8001ade <HAL_RCC_OscConfig+0x1f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f805 	bl	8000b60 <HAL_GetTick>
 8001b56:	1b80      	subs	r0, r0, r6
 8001b58:	4540      	cmp	r0, r8
 8001b5a:	d9cc      	bls.n	8001af6 <HAL_RCC_OscConfig+0x20a>
 8001b5c:	e70c      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
      tickstart = HAL_GetTick();
 8001b5e:	f7fe ffff 	bl	8000b60 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001b66:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	6a2b      	ldr	r3, [r5, #32]
 8001b6a:	0798      	lsls	r0, r3, #30
 8001b6c:	d5c6      	bpl.n	8001afc <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe fff7 	bl	8000b60 <HAL_GetTick>
 8001b72:	1b80      	subs	r0, r0, r6
 8001b74:	4540      	cmp	r0, r8
 8001b76:	d9f7      	bls.n	8001b68 <HAL_RCC_OscConfig+0x27c>
 8001b78:	e6fe      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8001b7e:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001b82:	686a      	ldr	r2, [r5, #4]
 8001b84:	f002 020c 	and.w	r2, r2, #12
 8001b88:	2a08      	cmp	r2, #8
 8001b8a:	d045      	beq.n	8001c18 <HAL_RCC_OscConfig+0x32c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f2c4 2342 	movt	r3, #16962	@ 0x4242
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	d12f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8001b9e:	f7fe ffdf 	bl	8000b60 <HAL_GetTick>
 8001ba2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	0199      	lsls	r1, r3, #6
 8001ba8:	d423      	bmi.n	8001bf2 <HAL_RCC_OscConfig+0x306>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001baa:	6a23      	ldr	r3, [r4, #32]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2d2>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb2:	686b      	ldr	r3, [r5, #4]
 8001bb4:	68a2      	ldr	r2, [r4, #8]
 8001bb6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	686a      	ldr	r2, [r5, #4]
 8001bc0:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001bc4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8001bd6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ffc2 	bl	8000b60 <HAL_GetTick>
 8001bdc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bde:	682b      	ldr	r3, [r5, #0]
 8001be0:	019a      	lsls	r2, r3, #6
 8001be2:	f53f ae99 	bmi.w	8001918 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe ffbb 	bl	8000b60 <HAL_GetTick>
 8001bea:	1b00      	subs	r0, r0, r4
 8001bec:	2802      	cmp	r0, #2
 8001bee:	d9f6      	bls.n	8001bde <HAL_RCC_OscConfig+0x2f2>
 8001bf0:	e6c2      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe ffb5 	bl	8000b60 <HAL_GetTick>
 8001bf6:	1b80      	subs	r0, r0, r6
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	d9d3      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2b8>
 8001bfc:	e6bc      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001bfe:	f7fe ffaf 	bl	8000b60 <HAL_GetTick>
 8001c02:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	019b      	lsls	r3, r3, #6
 8001c08:	f57f ae86 	bpl.w	8001918 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe ffa8 	bl	8000b60 <HAL_GetTick>
 8001c10:	1b00      	subs	r0, r0, r4
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9f6      	bls.n	8001c04 <HAL_RCC_OscConfig+0x318>
 8001c16:	e6af      	b.n	8001978 <HAL_RCC_OscConfig+0x8c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	f43f ae96 	beq.w	800194a <HAL_RCC_OscConfig+0x5e>
        pll_config = RCC->CFGR;
 8001c1e:	6868      	ldr	r0, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	6a23      	ldr	r3, [r4, #32]
 8001c22:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f47f ae8f 	bne.w	800194a <HAL_RCC_OscConfig+0x5e>
 8001c2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c2e:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	1ac0      	subs	r0, r0, r3
 8001c34:	bf18      	it	ne
 8001c36:	2001      	movne	r0, #1
 8001c38:	e69f      	b.n	800197a <HAL_RCC_OscConfig+0x8e>

08001c3a <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c3e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c42:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	f002 010c 	and.w	r1, r2, #12
 8001c48:	2908      	cmp	r1, #8
 8001c4a:	d11e      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x50>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4c:	f641 6172 	movw	r1, #7794	@ 0x1e72
 8001c50:	f3c2 4083 	ubfx	r0, r2, #18, #4
 8001c54:	f6c0 0100 	movt	r1, #2048	@ 0x800
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c5a:	5c08      	ldrb	r0, [r1, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5c:	d50f      	bpl.n	8001c7e <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5e:	f44f 5290 	mov.w	r2, #4608	@ 0x1200
 8001c62:	f2c0 027a 	movt	r2, #122	@ 0x7a
 8001c66:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c68:	f641 6270 	movw	r2, #7792	@ 0x1e70
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8001c72:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c78:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c7c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c7e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001c82:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8001c86:	4358      	muls	r0, r3
 8001c88:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001c8a:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8001c8e:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8001c92:	4770      	bx	lr

08001c94 <HAL_RCC_ClockConfig>:
{
 8001c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	b910      	cbnz	r0, 8001ca4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ca8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f002 0207 	and.w	r2, r2, #7
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d339      	bcc.n	8001d2a <HAL_RCC_ClockConfig+0x96>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	0798      	lsls	r0, r3, #30
 8001cba:	d441      	bmi.n	8001d40 <HAL_RCC_ClockConfig+0xac>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	07da      	lsls	r2, r3, #31
 8001cc0:	d457      	bmi.n	8001d72 <HAL_RCC_ClockConfig+0xde>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f002 0207 	and.w	r2, r2, #7
 8001cd0:	42aa      	cmp	r2, r5
 8001cd2:	d879      	bhi.n	8001dc8 <HAL_RCC_ClockConfig+0x134>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001cde:	f013 0f04 	tst.w	r3, #4
 8001ce2:	d17d      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	071b      	lsls	r3, r3, #28
 8001ce8:	d506      	bpl.n	8001cf8 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cea:	686b      	ldr	r3, [r5, #4]
 8001cec:	6922      	ldr	r2, [r4, #16]
 8001cee:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001cf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cf6:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf8:	f7ff ff9f 	bl	8001c3a <HAL_RCC_GetSysClockFreq>
 8001cfc:	f641 6160 	movw	r1, #7776	@ 0x1e60
 8001d00:	f240 030c 	movw	r3, #12
 8001d04:	686a      	ldr	r2, [r5, #4]
 8001d06:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8001d0a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d0e:	5c8a      	ldrb	r2, [r1, r2]
 8001d10:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d14:	40d0      	lsrs	r0, r2
 8001d16:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001d18:	f240 0314 	movw	r3, #20
 8001d1c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f7fe fed6 	bl	8000ad2 <HAL_InitTick>
  return HAL_OK;
 8001d26:	2000      	movs	r0, #0
 8001d28:	e7ba      	b.n	8001ca0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f022 0207 	bic.w	r2, r2, #7
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	428b      	cmp	r3, r1
 8001d3c:	d1af      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xa>
 8001d3e:	e7ba      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x22>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	f013 0f04 	tst.w	r3, #4
 8001d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d48:	f2c4 0302 	movt	r3, #16386	@ 0x4002
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4c:	bf1e      	ittt	ne
 8001d4e:	685a      	ldrne	r2, [r3, #4]
 8001d50:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001d54:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	0711      	lsls	r1, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5a:	bf42      	ittt	mi
 8001d5c:	685a      	ldrmi	r2, [r3, #4]
 8001d5e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001d62:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	68a1      	ldr	r1, [r4, #8]
 8001d68:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	e7a4      	b.n	8001cbc <HAL_RCC_ClockConfig+0x28>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8001d76:	6862      	ldr	r2, [r4, #4]
 8001d78:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8001d7c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	d08a      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d88:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d96:	f7fe fee3 	bl	8000b60 <HAL_GetTick>
 8001d9a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9c:	6873      	ldr	r3, [r6, #4]
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001da8:	d08b      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x2e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7fe fed9 	bl	8000b60 <HAL_GetTick>
 8001dae:	1bc0      	subs	r0, r0, r7
 8001db0:	4540      	cmp	r0, r8
 8001db2:	d9f3      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x108>
        return HAL_TIMEOUT;
 8001db4:	2003      	movs	r0, #3
 8001db6:	e773      	b.n	8001ca0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db8:	2a02      	cmp	r2, #2
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x12e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001dc0:	e7e1      	b.n	8001d86 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	f013 0f02 	tst.w	r3, #2
 8001dc6:	e7de      	b.n	8001d86 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f022 0207 	bic.w	r2, r2, #7
 8001dce:	432a      	orrs	r2, r5
 8001dd0:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	42ab      	cmp	r3, r5
 8001dda:	f47f af60 	bne.w	8001c9e <HAL_RCC_ClockConfig+0xa>
 8001dde:	e779      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	686b      	ldr	r3, [r5, #4]
 8001de2:	68e2      	ldr	r2, [r4, #12]
 8001de4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001de8:	4313      	orrs	r3, r2
 8001dea:	606b      	str	r3, [r5, #4]
 8001dec:	e77a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x50>

08001dee <memset>:
 8001dee:	4603      	mov	r3, r0
 8001df0:	4402      	add	r2, r0
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d100      	bne.n	8001df8 <memset+0xa>
 8001df6:	4770      	bx	lr
 8001df8:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfc:	e7f9      	b.n	8001df2 <memset+0x4>
	...

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	2600      	movs	r6, #0
 8001e04:	4d0c      	ldr	r5, [pc, #48]	@ (8001e38 <__libc_init_array+0x38>)
 8001e06:	4c0d      	ldr	r4, [pc, #52]	@ (8001e3c <__libc_init_array+0x3c>)
 8001e08:	1b64      	subs	r4, r4, r5
 8001e0a:	10a4      	asrs	r4, r4, #2
 8001e0c:	42a6      	cmp	r6, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	f000 f81a 	bl	8001e48 <_init>
 8001e14:	2600      	movs	r6, #0
 8001e16:	4d0a      	ldr	r5, [pc, #40]	@ (8001e40 <__libc_init_array+0x40>)
 8001e18:	4c0a      	ldr	r4, [pc, #40]	@ (8001e44 <__libc_init_array+0x44>)
 8001e1a:	1b64      	subs	r4, r4, r5
 8001e1c:	10a4      	asrs	r4, r4, #2
 8001e1e:	42a6      	cmp	r6, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e28:	4798      	blx	r3
 8001e2a:	3601      	adds	r6, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e32:	4798      	blx	r3
 8001e34:	3601      	adds	r6, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08001e84 	.word	0x08001e84
 8001e3c:	08001e84 	.word	0x08001e84
 8001e40:	08001e84 	.word	0x08001e84
 8001e44:	08001e88 	.word	0x08001e88

08001e48 <_init>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr

08001e54 <_fini>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	bf00      	nop
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr
